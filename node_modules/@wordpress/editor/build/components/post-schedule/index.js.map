{"version":3,"sources":["@wordpress/editor/src/components/post-schedule/index.js"],"names":["getDayOfTheMonth","date","Date","firstDay","d","getFullYear","getMonth","toISOString","PostSchedule","select","postDate","editorStore","getEditedPostAttribute","postType","getCurrentPostType","editPost","onUpdateDate","previewedMonth","setPreviewedMonth","eventsByPostType","coreStore","getEntityRecords","status","after","before","exclude","getCurrentPostId","events","map","title","type","eventDate","rendered","ref","settings","is12HourTime","test","formats","time","toLowerCase","replace","split","reverse","join","onChange","newDate","ownerDocument","current","activeElement","blur"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __experimentalGetSettings } from '@wordpress/date';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { DateTimePicker } from '@wordpress/components';\nimport { useRef, useState, useMemo } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as editorStore } from '../../store';\n\nfunction getDayOfTheMonth( date = new Date(), firstDay = true ) {\n\tconst d = new Date( date );\n\treturn new Date(\n\t\td.getFullYear(),\n\t\td.getMonth() + ( firstDay ? 0 : 1 ),\n\t\tfirstDay ? 1 : 0\n\t).toISOString();\n}\n\nexport default function PostSchedule() {\n\tconst { postDate, postType } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpostDate: select( editorStore ).getEditedPostAttribute( 'date' ),\n\t\t\tpostType: select( editorStore ).getCurrentPostType(),\n\t\t} ),\n\t\t[]\n\t);\n\n\tconst { editPost } = useDispatch( editorStore );\n\tconst onUpdateDate = ( date ) => editPost( { date } );\n\n\tconst [ previewedMonth, setPreviewedMonth ] = useState(\n\t\tgetDayOfTheMonth( postDate )\n\t);\n\n\t// Pick up published and schduled site posts.\n\tconst eventsByPostType = useSelect(\n\t\t( select ) =>\n\t\t\tselect( coreStore ).getEntityRecords( 'postType', postType, {\n\t\t\t\tstatus: 'publish,future',\n\t\t\t\tafter: getDayOfTheMonth( previewedMonth ),\n\t\t\t\tbefore: getDayOfTheMonth( previewedMonth, false ),\n\t\t\t\texclude: [ select( editorStore ).getCurrentPostId() ],\n\t\t\t} ),\n\t\t[ previewedMonth, postType ]\n\t);\n\n\tconst events = useMemo(\n\t\t() =>\n\t\t\t( eventsByPostType || [] ).map(\n\t\t\t\t( { title, type, date: eventDate } ) => ( {\n\t\t\t\t\ttitle: title?.rendered,\n\t\t\t\t\ttype,\n\t\t\t\t\tdate: new Date( eventDate ),\n\t\t\t\t} )\n\t\t\t),\n\t\t[ eventsByPostType ]\n\t);\n\n\tconst ref = useRef();\n\tconst settings = __experimentalGetSettings();\n\n\t// To know if the current timezone is a 12 hour time with look for \"a\" in the time format\n\t// We also make sure this a is not escaped by a \"/\"\n\tconst is12HourTime = /a(?!\\\\)/i.test(\n\t\tsettings.formats.time\n\t\t\t.toLowerCase() // Test only the lower case a\n\t\t\t.replace( /\\\\\\\\/g, '' ) // Replace \"//\" with empty strings\n\t\t\t.split( '' )\n\t\t\t.reverse()\n\t\t\t.join( '' ) // Reverse the string and test for \"a\" not followed by a slash\n\t);\n\n\tfunction onChange( newDate ) {\n\t\tonUpdateDate( newDate );\n\t\tconst { ownerDocument } = ref.current;\n\t\townerDocument.activeElement.blur();\n\t}\n\n\treturn (\n\t\t<DateTimePicker\n\t\t\tref={ ref }\n\t\t\tcurrentDate={ postDate }\n\t\t\tonChange={ onChange }\n\t\t\tis12Hour={ is12HourTime }\n\t\t\tevents={ events }\n\t\t\tonMonthPreviewed={ setPreviewedMonth }\n\t\t/>\n\t);\n}\n"]}