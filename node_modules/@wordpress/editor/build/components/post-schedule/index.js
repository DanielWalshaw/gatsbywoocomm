"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostSchedule;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _date = require("@wordpress/date");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _coreData = require("@wordpress/core-data");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getDayOfTheMonth() {
  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  var firstDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var d = new Date(date);
  return new Date(d.getFullYear(), d.getMonth() + (firstDay ? 0 : 1), firstDay ? 1 : 0).toISOString();
}

function PostSchedule() {
  var _useSelect = (0, _data.useSelect)(function (select) {
    return {
      postDate: select(_store.store).getEditedPostAttribute('date'),
      postType: select(_store.store).getCurrentPostType()
    };
  }, []),
      postDate = _useSelect.postDate,
      postType = _useSelect.postType;

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      editPost = _useDispatch.editPost;

  var onUpdateDate = function onUpdateDate(date) {
    return editPost({
      date: date
    });
  };

  var _useState = (0, _element.useState)(getDayOfTheMonth(postDate)),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      previewedMonth = _useState2[0],
      setPreviewedMonth = _useState2[1]; // Pick up published and schduled site posts.


  var eventsByPostType = (0, _data.useSelect)(function (select) {
    return select(_coreData.store).getEntityRecords('postType', postType, {
      status: 'publish,future',
      after: getDayOfTheMonth(previewedMonth),
      before: getDayOfTheMonth(previewedMonth, false),
      exclude: [select(_store.store).getCurrentPostId()]
    });
  }, [previewedMonth, postType]);
  var events = (0, _element.useMemo)(function () {
    return (eventsByPostType || []).map(function (_ref) {
      var title = _ref.title,
          type = _ref.type,
          eventDate = _ref.date;
      return {
        title: title === null || title === void 0 ? void 0 : title.rendered,
        type: type,
        date: new Date(eventDate)
      };
    });
  }, [eventsByPostType]);
  var ref = (0, _element.useRef)();
  var settings = (0, _date.__experimentalGetSettings)(); // To know if the current timezone is a 12 hour time with look for "a" in the time format
  // We also make sure this a is not escaped by a "/"

  var is12HourTime = /a(?!\\)/i.test(settings.formats.time.toLowerCase() // Test only the lower case a
  .replace(/\\\\/g, '') // Replace "//" with empty strings
  .split('').reverse().join('') // Reverse the string and test for "a" not followed by a slash
  );

  function onChange(newDate) {
    onUpdateDate(newDate);
    var ownerDocument = ref.current.ownerDocument;
    ownerDocument.activeElement.blur();
  }

  return (0, _element.createElement)(_components.DateTimePicker, {
    ref: ref,
    currentDate: postDate,
    onChange: onChange,
    is12Hour: is12HourTime,
    events: events,
    onMonthPreviewed: setPreviewedMonth
  });
}
//# sourceMappingURL=index.js.map