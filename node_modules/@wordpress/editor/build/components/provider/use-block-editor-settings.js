"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _utils = require("../../utils");

var _store = require("../../store");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * React hook used to compute the block editor settings to use for the post editor.
 *
 * @param {Object}  settings    EditorProvider settings prop.
 * @param {boolean} hasTemplate Whether template mode is enabled.
 *
 * @return {Object} Block Editor Settings.
 */
function useBlockEditorSettings(settings, hasTemplate) {
  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        canUserUseUnfilteredHTML = _select.canUserUseUnfilteredHTML,
        isPostTitleSelected = _select.isPostTitleSelected;

    var _select2 = select(_coreData.store),
        canUser = _select2.canUser;

    return {
      canUseUnfilteredHTML: canUserUseUnfilteredHTML(),
      reusableBlocks: select(_coreData.store).getEntityRecords('postType', 'wp_block',
      /**
       * Unbounded queries are not supported on native so as a workaround, we set per_page with the maximum value that native version can handle.
       * Related issue: https://github.com/wordpress-mobile/gutenberg-mobile/issues/2661
       */
      {
        per_page: _element.Platform.select({
          web: -1,
          native: 10
        })
      }),
      hasUploadPermissions: (0, _lodash.defaultTo)(canUser('create', 'media'), true),
      // This selector is only defined on mobile.
      isTitleSelected: isPostTitleSelected && isPostTitleSelected()
    };
  }, []),
      reusableBlocks = _useSelect.reusableBlocks,
      hasUploadPermissions = _useSelect.hasUploadPermissions,
      canUseUnfilteredHTML = _useSelect.canUseUnfilteredHTML,
      isTitleSelected = _useSelect.isTitleSelected;

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      undo = _useDispatch.undo;

  return (0, _element.useMemo)(function () {
    return _objectSpread(_objectSpread({}, (0, _lodash.pick)(settings, ['__experimentalBlockDirectory', '__experimentalBlockPatternCategories', '__experimentalBlockPatterns', '__experimentalFeatures', '__experimentalGlobalStylesBaseStyles', '__experimentalGlobalStylesUserEntityId', '__experimentalPreferredStyleVariations', '__experimentalSetIsInserterOpened', 'alignWide', 'allowedBlockTypes', 'bodyPlaceholder', 'codeEditingEnabled', 'colors', 'disableCustomColors', 'disableCustomFontSizes', 'disableCustomGradients', 'enableCustomLineHeight', 'enableCustomSpacing', 'enableCustomUnits', 'focusMode', 'fontSizes', 'gradients', 'hasFixedToolbar', 'hasReducedUI', 'imageDefaultSize', 'imageDimensions', 'imageEditing', 'imageSizes', 'isRTL', 'keepCaretInsideBlock', 'maxWidth', 'onUpdateDefaultBlockStyles', 'styles', 'template', 'templateLock', 'titlePlaceholder', 'supportsLayout', 'widgetTypesToHideFromLegacyWidgetBlock'])), {}, {
      mediaUpload: hasUploadPermissions ? _utils.mediaUpload : undefined,
      __experimentalReusableBlocks: reusableBlocks,
      __experimentalFetchLinkSuggestions: function __experimentalFetchLinkSuggestions(search, searchOptions) {
        return (0, _coreData.__experimentalFetchLinkSuggestions)(search, searchOptions, settings);
      },
      __experimentalCanUserUseUnfilteredHTML: canUseUnfilteredHTML,
      __experimentalUndo: undo,
      __experimentalShouldInsertAtTheTop: isTitleSelected,
      outlineMode: hasTemplate
    });
  }, [settings, hasUploadPermissions, reusableBlocks, canUseUnfilteredHTML, undo, isTitleSelected, hasTemplate]);
}

var _default = useBlockEditorSettings;
exports.default = _default;
//# sourceMappingURL=use-block-editor-settings.js.map