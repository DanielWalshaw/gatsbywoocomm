"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _icons = require("@wordpress/icons");

var _coreData = require("@wordpress/core-data");

var _entityTypeList = _interopRequireDefault(require("./entity-type-list"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function EntitiesSavedStates(_ref) {
  var isOpen = _ref.isOpen,
      close = _ref.close;
  var saveButtonRef = (0, _element.useRef)();
  (0, _element.useEffect)(function () {
    if (isOpen) {
      var _saveButtonRef$curren;

      // Focus the save button when the saved states panel is opened
      (_saveButtonRef$curren = saveButtonRef.current) === null || _saveButtonRef$curren === void 0 ? void 0 : _saveButtonRef$curren.focus();
    }
  }, [isOpen]);

  var _useSelect = (0, _data.useSelect)(function (select) {
    return {
      dirtyEntityRecords: select(_coreData.store).__experimentalGetDirtyEntityRecords()
    };
  }, []),
      dirtyEntityRecords = _useSelect.dirtyEntityRecords;

  var _useDispatch = (0, _data.useDispatch)(_coreData.store),
      saveEditedEntityRecord = _useDispatch.saveEditedEntityRecord; // To group entities by type.


  var partitionedSavables = Object.values((0, _lodash.groupBy)(dirtyEntityRecords, 'name')); // Unchecked entities to be ignored by save function.

  var _useState = (0, _element.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      unselectedEntities = _useState2[0],
      _setUnselectedEntities = _useState2[1];

  var setUnselectedEntities = function setUnselectedEntities(_ref2, checked) {
    var kind = _ref2.kind,
        name = _ref2.name,
        key = _ref2.key;

    if (checked) {
      _setUnselectedEntities(unselectedEntities.filter(function (elt) {
        return elt.kind !== kind || elt.name !== name || elt.key !== key;
      }));
    } else {
      _setUnselectedEntities([].concat((0, _toConsumableArray2.default)(unselectedEntities), [{
        kind: kind,
        name: name,
        key: key
      }]));
    }
  };

  var saveCheckedEntities = function saveCheckedEntities() {
    var entitiesToSave = dirtyEntityRecords.filter(function (_ref3) {
      var kind = _ref3.kind,
          name = _ref3.name,
          key = _ref3.key;
      return !(0, _lodash.some)(unselectedEntities, function (elt) {
        return elt.kind === kind && elt.name === name && elt.key === key;
      });
    });
    close(entitiesToSave);
    entitiesToSave.forEach(function (_ref4) {
      var kind = _ref4.kind,
          name = _ref4.name,
          key = _ref4.key;
      saveEditedEntityRecord(kind, name, key);
    });
  }; // Explicitly define this with no argument passed.  Using `close` on
  // its own will use the event object in place of the expected saved entities.


  var dismissPanel = (0, _element.useCallback)(function () {
    return close();
  }, [close]);
  return isOpen ? (0, _element.createElement)("div", {
    className: "entities-saved-states__panel"
  }, (0, _element.createElement)("div", {
    className: "entities-saved-states__panel-header"
  }, (0, _element.createElement)(_components.Button, {
    ref: saveButtonRef,
    isPrimary: true,
    disabled: dirtyEntityRecords.length - unselectedEntities.length === 0,
    onClick: saveCheckedEntities,
    className: "editor-entities-saved-states__save-button"
  }, (0, _i18n.__)('Save')), (0, _element.createElement)(_components.Button, {
    onClick: dismissPanel,
    icon: _icons.close,
    label: (0, _i18n.__)('Close panel')
  })), (0, _element.createElement)("div", {
    className: "entities-saved-states__text-prompt"
  }, (0, _element.createElement)("strong", null, (0, _i18n.__)('Select the changes you want to save')), (0, _element.createElement)("p", null, (0, _i18n.__)('Some changes may affect other areas of your site.'))), partitionedSavables.map(function (list) {
    return (0, _element.createElement)(_entityTypeList.default, {
      key: list[0].name,
      list: list,
      closePanel: dismissPanel,
      unselectedEntities: unselectedEntities,
      setUnselectedEntities: setUnselectedEntities
    });
  })) : null;
}

var _default = (0, _components.withFocusReturn)(EntitiesSavedStates);

exports.default = _default;
//# sourceMappingURL=index.js.map