"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageAttributesParent = PageAttributesParent;
exports.default = exports.getItemPriority = void 0;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _htmlEntities = require("@wordpress/html-entities");

var _terms = require("../../utils/terms");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getTitle(post) {
  var _post$title;

  return post !== null && post !== void 0 && (_post$title = post.title) !== null && _post$title !== void 0 && _post$title.rendered ? (0, _htmlEntities.decodeEntities)(post.title.rendered) : "#".concat(post.id, " (").concat((0, _i18n.__)('no title'), ")");
}

var getItemPriority = function getItemPriority(name, searchValue) {
  var normalizedName = (0, _lodash.deburr)(name).toLowerCase();
  var normalizedSearch = (0, _lodash.deburr)(searchValue).toLowerCase();

  if (normalizedName === normalizedSearch) {
    return 0;
  }

  if (normalizedName.startsWith(normalizedSearch)) {
    return normalizedName.length;
  }

  return Infinity;
};

exports.getItemPriority = getItemPriority;

function PageAttributesParent() {
  var _useDispatch = (0, _data.useDispatch)('core/editor'),
      editPost = _useDispatch.editPost;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fieldValue = _useState2[0],
      setFieldValue = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core'),
        getPostType = _select.getPostType,
        getEntityRecords = _select.getEntityRecords,
        getEntityRecord = _select.getEntityRecord;

    var _select2 = select('core/editor'),
        getCurrentPostId = _select2.getCurrentPostId,
        getEditedPostAttribute = _select2.getEditedPostAttribute;

    var postTypeSlug = getEditedPostAttribute('type');
    var pageId = getEditedPostAttribute('parent');
    var pType = getPostType(postTypeSlug);
    var postId = getCurrentPostId();
    var isHierarchical = (0, _lodash.get)(pType, ['hierarchical'], false);
    var query = {
      per_page: 100,
      exclude: postId,
      parent_exclude: postId,
      orderby: 'menu_order',
      order: 'asc',
      _fields: 'id,title,parent'
    }; // Perform a search when the field is changed.

    if (!!fieldValue) {
      query.search = fieldValue;
    }

    return {
      parentPostId: pageId,
      parentPost: pageId ? getEntityRecord('postType', postTypeSlug, pageId) : null,
      items: isHierarchical ? getEntityRecords('postType', postTypeSlug, query) : [],
      postType: pType
    };
  }, [fieldValue]),
      parentPost = _useSelect.parentPost,
      parentPostId = _useSelect.parentPostId,
      items = _useSelect.items,
      postType = _useSelect.postType;

  var isHierarchical = (0, _lodash.get)(postType, ['hierarchical'], false);
  var parentPageLabel = (0, _lodash.get)(postType, ['labels', 'parent_item_colon']);
  var pageItems = items || [];
  var parentOptions = (0, _element.useMemo)(function () {
    var getOptionsFromTree = function getOptionsFromTree(tree) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var mappedNodes = tree.map(function (treeNode) {
        return [{
          value: treeNode.id,
          label: (0, _lodash.repeat)('â€” ', level) + (0, _lodash.unescape)(treeNode.name),
          rawName: treeNode.name
        }].concat((0, _toConsumableArray2.default)(getOptionsFromTree(treeNode.children || [], level + 1)));
      });
      var sortedNodes = mappedNodes.sort(function (_ref, _ref2) {
        var _ref3 = (0, _slicedToArray2.default)(_ref, 1),
            a = _ref3[0];

        var _ref4 = (0, _slicedToArray2.default)(_ref2, 1),
            b = _ref4[0];

        var priorityA = getItemPriority(a.rawName, fieldValue);
        var priorityB = getItemPriority(b.rawName, fieldValue);
        return priorityA >= priorityB ? 1 : -1;
      });
      return (0, _lodash.flatten)(sortedNodes);
    };

    var tree = pageItems.map(function (item) {
      return {
        id: item.id,
        parent: item.parent,
        name: getTitle(item)
      };
    }); // Only build a hierarchical tree when not searching.

    if (!fieldValue) {
      tree = (0, _terms.buildTermsTree)(tree);
    }

    var opts = getOptionsFromTree(tree); // Ensure the current parent is in the options list.

    var optsHasParent = (0, _lodash.find)(opts, function (item) {
      return item.value === parentPostId;
    });

    if (parentPost && !optsHasParent) {
      opts.unshift({
        value: parentPostId,
        label: getTitle(parentPost)
      });
    }

    return opts;
  }, [pageItems, fieldValue]);

  if (!isHierarchical || !parentPageLabel) {
    return null;
  }
  /**
   * Handle user input.
   *
   * @param {string} inputValue The current value of the input field.
   */


  var handleKeydown = function handleKeydown(inputValue) {
    setFieldValue(inputValue);
  };
  /**
   * Handle author selection.
   *
   * @param {Object} selectedPostId The selected Author.
   */


  var handleChange = function handleChange(selectedPostId) {
    editPost({
      parent: selectedPostId
    });
  };

  return (0, _element.createElement)(_components.ComboboxControl, {
    className: "editor-page-attributes__parent",
    label: parentPageLabel,
    value: parentPostId,
    options: parentOptions,
    onFilterValueChange: (0, _lodash.debounce)(handleKeydown, 300),
    onChange: handleChange
  });
}

var _default = PageAttributesParent;
exports.default = _default;
//# sourceMappingURL=parent.js.map