import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { some, groupBy } from 'lodash';
/**
 * WordPress dependencies
 */

import { Button, withFocusReturn } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect, useDispatch } from '@wordpress/data';
import { useState, useCallback, useRef, useEffect } from '@wordpress/element';
import { close as closeIcon } from '@wordpress/icons';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import EntityTypeList from './entity-type-list';

function EntitiesSavedStates(_ref) {
  var isOpen = _ref.isOpen,
      close = _ref.close;
  var saveButtonRef = useRef();
  useEffect(function () {
    if (isOpen) {
      var _saveButtonRef$curren;

      // Focus the save button when the saved states panel is opened
      (_saveButtonRef$curren = saveButtonRef.current) === null || _saveButtonRef$curren === void 0 ? void 0 : _saveButtonRef$curren.focus();
    }
  }, [isOpen]);

  var _useSelect = useSelect(function (select) {
    return {
      dirtyEntityRecords: select(coreStore).__experimentalGetDirtyEntityRecords()
    };
  }, []),
      dirtyEntityRecords = _useSelect.dirtyEntityRecords;

  var _useDispatch = useDispatch(coreStore),
      saveEditedEntityRecord = _useDispatch.saveEditedEntityRecord; // To group entities by type.


  var partitionedSavables = Object.values(groupBy(dirtyEntityRecords, 'name')); // Unchecked entities to be ignored by save function.

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      unselectedEntities = _useState2[0],
      _setUnselectedEntities = _useState2[1];

  var setUnselectedEntities = function setUnselectedEntities(_ref2, checked) {
    var kind = _ref2.kind,
        name = _ref2.name,
        key = _ref2.key;

    if (checked) {
      _setUnselectedEntities(unselectedEntities.filter(function (elt) {
        return elt.kind !== kind || elt.name !== name || elt.key !== key;
      }));
    } else {
      _setUnselectedEntities([].concat(_toConsumableArray(unselectedEntities), [{
        kind: kind,
        name: name,
        key: key
      }]));
    }
  };

  var saveCheckedEntities = function saveCheckedEntities() {
    var entitiesToSave = dirtyEntityRecords.filter(function (_ref3) {
      var kind = _ref3.kind,
          name = _ref3.name,
          key = _ref3.key;
      return !some(unselectedEntities, function (elt) {
        return elt.kind === kind && elt.name === name && elt.key === key;
      });
    });
    close(entitiesToSave);
    entitiesToSave.forEach(function (_ref4) {
      var kind = _ref4.kind,
          name = _ref4.name,
          key = _ref4.key;
      saveEditedEntityRecord(kind, name, key);
    });
  }; // Explicitly define this with no argument passed.  Using `close` on
  // its own will use the event object in place of the expected saved entities.


  var dismissPanel = useCallback(function () {
    return close();
  }, [close]);
  return isOpen ? createElement("div", {
    className: "entities-saved-states__panel"
  }, createElement("div", {
    className: "entities-saved-states__panel-header"
  }, createElement(Button, {
    ref: saveButtonRef,
    isPrimary: true,
    disabled: dirtyEntityRecords.length - unselectedEntities.length === 0,
    onClick: saveCheckedEntities,
    className: "editor-entities-saved-states__save-button"
  }, __('Save')), createElement(Button, {
    onClick: dismissPanel,
    icon: closeIcon,
    label: __('Close panel')
  })), createElement("div", {
    className: "entities-saved-states__text-prompt"
  }, createElement("strong", null, __('Select the changes you want to save')), createElement("p", null, __('Some changes may affect other areas of your site.'))), partitionedSavables.map(function (list) {
    return createElement(EntityTypeList, {
      key: list[0].name,
      list: list,
      closePanel: dismissPanel,
      unselectedEntities: unselectedEntities,
      setUnselectedEntities: setUnselectedEntities
    });
  })) : null;
}

export default withFocusReturn(EntitiesSavedStates);
//# sourceMappingURL=index.js.map