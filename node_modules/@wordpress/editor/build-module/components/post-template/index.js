import _objectDestructuringEmpty from "@babel/runtime/helpers/esm/objectDestructuringEmpty";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isEmpty, map } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { SelectControl } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { store as editorStore } from '../../store';
export function PostTemplate(_ref) {
  _objectDestructuringEmpty(_ref);

  var _useSelect = useSelect(function (select) {
    var _getPostType$viewable, _getPostType;

    var _select = select(editorStore),
        getEditedPostAttribute = _select.getEditedPostAttribute,
        getEditorSettings = _select.getEditorSettings,
        getCurrentPostType = _select.getCurrentPostType;

    var _select2 = select(coreStore),
        getPostType = _select2.getPostType;

    return {
      selectedTemplate: getEditedPostAttribute('template'),
      availableTemplates: getEditorSettings().availableTemplates,
      isViewable: (_getPostType$viewable = (_getPostType = getPostType(getCurrentPostType())) === null || _getPostType === void 0 ? void 0 : _getPostType.viewable) !== null && _getPostType$viewable !== void 0 ? _getPostType$viewable : false
    };
  }, []),
      availableTemplates = _useSelect.availableTemplates,
      selectedTemplate = _useSelect.selectedTemplate,
      isViewable = _useSelect.isViewable;

  var _useDispatch = useDispatch(editorStore),
      editPost = _useDispatch.editPost;

  if (!isViewable || isEmpty(availableTemplates)) {
    return null;
  }

  return createElement(SelectControl, {
    label: __('Template:'),
    value: selectedTemplate,
    onChange: function onChange(templateSlug) {
      editPost({
        template: templateSlug || ''
      });
    },
    options: map(availableTemplates, function (templateName, templateSlug) {
      return {
        value: templateSlug,
        label: templateName
      };
    })
  });
}
export default PostTemplate;
//# sourceMappingURL=index.js.map