"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rendererPath = rendererPath;
exports.default = ServerSideRender;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _url = require("@wordpress/url");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function rendererPath(block) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var urlQueryArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return (0, _url.addQueryArgs)("/wp/v2/block-renderer/".concat(block), _objectSpread(_objectSpread({
    context: 'edit'
  }, null !== attributes ? {
    attributes: attributes
  } : {}), urlQueryArgs));
}

function DefaultEmptyResponsePlaceholder(_ref) {
  var className = _ref.className;
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, (0, _i18n.__)('Block rendered as empty.'));
}

function DefaultErrorResponsePlaceholder(_ref2) {
  var response = _ref2.response,
      className = _ref2.className;
  var errorMessage = (0, _i18n.sprintf)( // translators: %s: error message describing the problem
  (0, _i18n.__)('Error loading block: %s'), response.errorMsg);
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, errorMessage);
}

function DefaultLoadingResponsePlaceholder(_ref3) {
  var className = _ref3.className;
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, (0, _element.createElement)(_components.Spinner, null));
}

function ServerSideRender(props) {
  var attributes = props.attributes,
      block = props.block,
      className = props.className,
      _props$httpMethod = props.httpMethod,
      httpMethod = _props$httpMethod === void 0 ? 'GET' : _props$httpMethod,
      urlQueryArgs = props.urlQueryArgs,
      _props$EmptyResponseP = props.EmptyResponsePlaceholder,
      EmptyResponsePlaceholder = _props$EmptyResponseP === void 0 ? DefaultEmptyResponsePlaceholder : _props$EmptyResponseP,
      _props$ErrorResponseP = props.ErrorResponsePlaceholder,
      ErrorResponsePlaceholder = _props$ErrorResponseP === void 0 ? DefaultErrorResponsePlaceholder : _props$ErrorResponseP,
      _props$LoadingRespons = props.LoadingResponsePlaceholder,
      LoadingResponsePlaceholder = _props$LoadingRespons === void 0 ? DefaultLoadingResponsePlaceholder : _props$LoadingRespons;
  var isMountedRef = (0, _element.useRef)(true);
  var fetchRequestRef = (0, _element.useRef)();

  var _useState = (0, _element.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      response = _useState2[0],
      setResponse = _useState2[1];

  var prevProps = (0, _compose.usePrevious)(props);

  function fetchData() {
    if (!isMountedRef.current) {
      return;
    }

    if (null !== response) {
      setResponse(null);
    }

    var sanitizedAttributes = attributes && (0, _blocks.__experimentalSanitizeBlockAttributes)(block, attributes); // If httpMethod is 'POST', send the attributes in the request body instead of the URL.
    // This allows sending a larger attributes object than in a GET request, where the attributes are in the URL.

    var isPostRequest = 'POST' === httpMethod;
    var urlAttributes = isPostRequest ? null : sanitizedAttributes !== null && sanitizedAttributes !== void 0 ? sanitizedAttributes : null;
    var path = rendererPath(block, urlAttributes, urlQueryArgs);
    var data = isPostRequest ? {
      attributes: sanitizedAttributes !== null && sanitizedAttributes !== void 0 ? sanitizedAttributes : null
    } : null; // Store the latest fetch request so that when we process it, we can
    // check if it is the current request, to avoid race conditions on slow networks.

    var fetchRequest = fetchRequestRef.current = (0, _apiFetch.default)({
      path: path,
      data: data,
      method: isPostRequest ? 'POST' : 'GET'
    }).then(function (fetchResponse) {
      if (isMountedRef.current && fetchRequest === fetchRequestRef.current && fetchResponse) {
        setResponse(fetchResponse.rendered);
      }
    }).catch(function (error) {
      if (isMountedRef.current && fetchRequest === fetchRequestRef.current) {
        setResponse({
          error: true,
          errorMsg: error.message
        });
      }
    });
    return fetchRequest;
  }

  var debouncedFetchData = (0, _compose.useDebounce)(fetchData, 500); // When the component unmounts, set isMountedRef to false. This will
  // let the async fetch callbacks know when to stop.

  (0, _element.useEffect)(function () {
    return function () {
      isMountedRef.current = false;
    };
  }, []);
  (0, _element.useEffect)(function () {
    // Don't debounce the first fetch. This ensures that the first render
    // shows data as soon as possible
    if (prevProps === undefined) {
      fetchData();
    } else if (!(0, _lodash.isEqual)(prevProps, props)) {
      debouncedFetchData();
    }
  });

  if (response === '') {
    return (0, _element.createElement)(EmptyResponsePlaceholder, props);
  } else if (!response) {
    return (0, _element.createElement)(LoadingResponsePlaceholder, props);
  } else if (response.error) {
    return (0, _element.createElement)(ErrorResponsePlaceholder, (0, _extends2.default)({
      response: response
    }, props));
  }

  return (0, _element.createElement)(_element.RawHTML, {
    className: className
  }, response);
}
//# sourceMappingURL=server-side-render.js.map