"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplatePartAdvancedControls = TemplatePartAdvancedControls;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _coreData = require("@wordpress/core-data");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _getTagBasedOnArea = require("./get-tag-based-on-area");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var AREA_OPTIONS = [{
  label: (0, _i18n.__)('Header'),
  value: 'header'
}, {
  label: (0, _i18n.__)('Footer'),
  value: 'footer'
}, {
  label: (0, _i18n.__)('General'),
  value: 'uncategorized'
}];

function TemplatePartAdvancedControls(_ref) {
  var tagName = _ref.tagName,
      setAttributes = _ref.setAttributes,
      isEntityAvailable = _ref.isEntityAvailable,
      templatePartId = _ref.templatePartId;

  var _useEntityProp = (0, _coreData.useEntityProp)('postType', 'wp_template_part', 'area', templatePartId),
      _useEntityProp2 = (0, _slicedToArray2.default)(_useEntityProp, 2),
      area = _useEntityProp2[0],
      setArea = _useEntityProp2[1];

  var _useEntityProp3 = (0, _coreData.useEntityProp)('postType', 'wp_template_part', 'title', templatePartId),
      _useEntityProp4 = (0, _slicedToArray2.default)(_useEntityProp3, 2),
      title = _useEntityProp4[0],
      setTitle = _useEntityProp4[1];

  return (0, _element.createElement)(_blockEditor.InspectorAdvancedControls, null, isEntityAvailable && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Title'),
    value: title,
    onChange: function onChange(value) {
      setTitle(value);
    },
    onFocus: function onFocus(event) {
      return event.target.select();
    }
  }), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Area'),
    labelPosition: "top",
    options: AREA_OPTIONS,
    value: area,
    onChange: setArea
  })), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('HTML element'),
    options: [{
      label: (0, _i18n.sprintf)(
      /* translators: %s: HTML tag based on area. */
      (0, _i18n.__)('Default based on area (%s)'), "<".concat((0, _getTagBasedOnArea.getTagBasedOnArea)(area), ">")),
      value: ''
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }, {
      label: '<div>',
      value: 'div'
    }],
    value: tagName || '',
    onChange: function onChange(value) {
      return setAttributes({
        tagName: value
      });
    }
  }));
}
//# sourceMappingURL=advanced-controls.js.map