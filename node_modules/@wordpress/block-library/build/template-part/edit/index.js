"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _coreData = require("@wordpress/core-data");

var _innerBlocks = _interopRequireDefault(require("./inner-blocks"));

var _placeholder = _interopRequireDefault(require("./placeholder"));

var _selection = _interopRequireDefault(require("./selection"));

var _advancedControls = require("./advanced-controls");

var _getTagBasedOnArea = require("./get-tag-based-on-area");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function TemplatePartEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      clientId = _ref.clientId;
  var slug = attributes.slug,
      theme = attributes.theme,
      tagName = attributes.tagName,
      _attributes$layout = attributes.layout,
      layout = _attributes$layout === void 0 ? {} : _attributes$layout;
  var templatePartId = theme && slug ? theme + '//' + slug : null;

  var _useNoRecursiveRender = (0, _blockEditor.__experimentalUseNoRecursiveRenders)(templatePartId),
      _useNoRecursiveRender2 = (0, _slicedToArray2.default)(_useNoRecursiveRender, 2),
      hasAlreadyRendered = _useNoRecursiveRender2[0],
      RecursionProvider = _useNoRecursiveRender2[1]; // Set the postId block attribute if it did not exist,
  // but wait until the inner blocks have loaded to allow
  // new edits to trigger this.


  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_coreData.store),
        getEditedEntityRecord = _select.getEditedEntityRecord,
        hasFinishedResolution = _select.hasFinishedResolution;

    var _select2 = select(_blockEditor.store),
        getBlocks = _select2.getBlocks;

    var getEntityArgs = ['postType', 'wp_template_part', templatePartId];
    var entityRecord = templatePartId ? getEditedEntityRecord.apply(void 0, getEntityArgs) : null;
    var hasResolvedEntity = templatePartId ? hasFinishedResolution('getEditedEntityRecord', getEntityArgs) : false;
    return {
      innerBlocks: getBlocks(clientId),
      isResolved: hasResolvedEntity,
      isMissing: hasResolvedEntity && !entityRecord,
      area: entityRecord === null || entityRecord === void 0 ? void 0 : entityRecord.area
    };
  }, [templatePartId, clientId]),
      isResolved = _useSelect.isResolved,
      innerBlocks = _useSelect.innerBlocks,
      isMissing = _useSelect.isMissing,
      area = _useSelect.area;

  var blockProps = (0, _blockEditor.useBlockProps)();
  var isPlaceholder = !slug;
  var isEntityAvailable = !isPlaceholder && !isMissing && isResolved;
  var TagName = tagName || (0, _getTagBasedOnArea.getTagBasedOnArea)(area); // We don't want to render a missing state if we have any inner blocks.
  // A new template part is automatically created if we have any inner blocks but no entity.

  if (innerBlocks.length === 0 && (slug && !theme || slug && isMissing)) {
    return (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.sprintf)(
    /* translators: %s: Template part slug */
    (0, _i18n.__)('Template part has been deleted or is unavailable: %s'), slug)));
  }

  if (isEntityAvailable && hasAlreadyRendered) {
    return (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block cannot be rendered inside itself.')));
  }

  return (0, _element.createElement)(RecursionProvider, null, (0, _element.createElement)(_advancedControls.TemplatePartAdvancedControls, {
    tagName: tagName,
    setAttributes: setAttributes,
    isEntityAvailable: isEntityAvailable,
    templatePartId: templatePartId
  }), isPlaceholder && (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_placeholder.default, {
    area: attributes.area,
    setAttributes: setAttributes,
    innerBlocks: innerBlocks
  })), isEntityAvailable && (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, {
    className: "wp-block-template-part__block-control-group"
  }, (0, _element.createElement)(_components.Dropdown, {
    className: "wp-block-template-part__preview-dropdown-button",
    contentClassName: "wp-block-template-part__preview-dropdown-content",
    position: "bottom right left",
    renderToggle: function renderToggle(_ref2) {
      var isOpen = _ref2.isOpen,
          onToggle = _ref2.onToggle;
      return (0, _element.createElement)(_components.ToolbarButton, {
        "aria-expanded": isOpen,
        onClick: onToggle // Disable when open to prevent odd FireFox bug causing reopening.
        // As noted in https://github.com/WordPress/gutenberg/pull/24990#issuecomment-689094119 .
        ,
        disabled: isOpen
      }, (0, _i18n.__)('Replace'));
    },
    renderContent: function renderContent(_ref3) {
      var onClose = _ref3.onClose;
      return (0, _element.createElement)(_selection.default, {
        setAttributes: setAttributes,
        onClose: onClose
      });
    }
  }))), isEntityAvailable && (0, _element.createElement)(_innerBlocks.default, {
    tagName: TagName,
    blockProps: blockProps,
    postId: templatePartId,
    hasInnerBlocks: innerBlocks.length > 0,
    layout: layout
  }), !isPlaceholder && !isResolved && (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_components.Spinner, null)));
}
//# sourceMappingURL=index.js.map