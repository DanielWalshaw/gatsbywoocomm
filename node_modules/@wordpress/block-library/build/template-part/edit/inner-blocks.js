"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartInnerBlocks;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _coreData = require("@wordpress/core-data");

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */
function TemplatePartInnerBlocks(_ref) {
  var id = _ref.postId,
      hasInnerBlocks = _ref.hasInnerBlocks,
      layout = _ref.layout,
      TagName = _ref.tagName,
      blockProps = _ref.blockProps;
  var themeSupportsLayout = (0, _data.useSelect)(function (select) {
    var _getSettings;

    var _select = select(_blockEditor.store),
        getSettings = _select.getSettings;

    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  var defaultLayout = (0, _blockEditor.__experimentalUseEditorFeature)('layout') || {};
  var usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  var contentSize = usedLayout.contentSize,
      wideSize = usedLayout.wideSize;
  var alignments = contentSize || wideSize ? ['wide', 'full'] : ['left', 'center', 'right'];

  var _useEntityBlockEditor = (0, _coreData.useEntityBlockEditor)('postType', 'wp_template_part', {
    id: id
  }),
      _useEntityBlockEditor2 = (0, _slicedToArray2.default)(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)(blockProps, {
    value: blocks,
    onInput: onInput,
    onChange: onChange,
    renderAppender: hasInnerBlocks ? undefined : _blockEditor.InnerBlocks.ButtonBlockAppender,
    __experimentalLayout: {
      type: 'default',
      // Find a way to inject this in the support flag code (hooks).
      alignments: themeSupportsLayout ? alignments : undefined
    }
  });
  return (0, _element.createElement)(TagName, innerBlocksProps);
}
//# sourceMappingURL=inner-blocks.js.map