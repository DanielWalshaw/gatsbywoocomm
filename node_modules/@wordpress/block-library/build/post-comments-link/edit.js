"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _url = require("@wordpress/url");

var _i18n = require("@wordpress/i18n");

var _coreData = require("@wordpress/core-data");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function PostCommentsLinkEdit(_ref) {
  var context = _ref.context,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes;
  var textAlign = attributes.textAlign;
  var postType = context.postType,
      postId = context.postId;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      commentsCount = _useState2[0],
      setCommentsCount = _useState2[1];

  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames2.default)((0, _defineProperty2.default)({}, "has-text-align-".concat(textAlign), textAlign))
  });
  (0, _element.useEffect)(function () {
    if (!postId) {
      return;
    }

    var currentPostId = postId;
    (0, _apiFetch.default)({
      path: (0, _url.addQueryArgs)('/wp/v2/comments', {
        post: postId
      }),
      parse: false
    }).then(function (res) {
      // Stale requests will have the `currentPostId` of an older closure.
      if (currentPostId === postId) {
        setCommentsCount(res.headers.get('X-WP-Total'));
      }
    });
  }, [postId]);
  var post = (0, _data.useSelect)(function (select) {
    return select(_coreData.store).getEditedEntityRecord('postType', postType, postId);
  }, [postType, postId]);

  if (!post) {
    return null;
  }

  var link = post.link;
  var commentsText;

  if (commentsCount !== undefined) {
    var commentsNumber = parseInt(commentsCount);

    if (commentsNumber === 0) {
      commentsText = (0, _i18n.__)('No comments');
    } else {
      commentsText = (0, _i18n.sprintf)(
      /* translators: %s: Number of comments */
      (0, _i18n._n)('%s comment', '%s comments', commentsNumber), commentsNumber.toLocaleString());
    }
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), (0, _element.createElement)("div", blockProps, link && commentsText !== undefined ? (0, _element.createElement)("a", {
    href: link + '#comments',
    onClick: function onClick(event) {
      return event.preventDefault();
    }
  }, commentsText) : (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Post Comments Link block: post not found.'))));
}

var _default = PostCommentsLinkEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map