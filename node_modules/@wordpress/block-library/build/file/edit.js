"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MAX_PREVIEW_HEIGHT = exports.MIN_PREVIEW_HEIGHT = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _blob = require("@wordpress/blob");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _coreData = require("@wordpress/core-data");

var _notices = require("@wordpress/notices");

var _inspector = _interopRequireDefault(require("./inspector"));

var _utils = require("./utils");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var MIN_PREVIEW_HEIGHT = 200;
exports.MIN_PREVIEW_HEIGHT = MIN_PREVIEW_HEIGHT;
var MAX_PREVIEW_HEIGHT = 2000;
exports.MAX_PREVIEW_HEIGHT = MAX_PREVIEW_HEIGHT;

function ClipboardToolbarButton(_ref) {
  var text = _ref.text,
      disabled = _ref.disabled;

  var _useDispatch = (0, _data.useDispatch)(_notices.store),
      createNotice = _useDispatch.createNotice;

  var ref = (0, _compose.useCopyToClipboard)(text, function () {
    createNotice('info', (0, _i18n.__)('Copied URL to clipboard.'), {
      isDismissible: true,
      type: 'snackbar'
    });
  });
  return (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-clipboard-toolbar-button",
    ref: ref,
    disabled: disabled
  }, (0, _i18n.__)('Copy URL'));
}

function FileEdit(_ref2) {
  var attributes = _ref2.attributes,
      isSelected = _ref2.isSelected,
      setAttributes = _ref2.setAttributes,
      noticeUI = _ref2.noticeUI,
      noticeOperations = _ref2.noticeOperations;
  var id = attributes.id,
      fileName = attributes.fileName,
      href = attributes.href,
      textLinkHref = attributes.textLinkHref,
      textLinkTarget = attributes.textLinkTarget,
      showDownloadButton = attributes.showDownloadButton,
      downloadButtonText = attributes.downloadButtonText,
      displayPreview = attributes.displayPreview,
      previewHeight = attributes.previewHeight;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasError = _useState2[0],
      setHasError = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    return {
      media: id === undefined ? undefined : select(_coreData.store).getMedia(id),
      mediaUpload: select(_blockEditor.store).getSettings().mediaUpload
    };
  }, [id]),
      media = _useSelect.media,
      mediaUpload = _useSelect.mediaUpload;

  var _useDispatch2 = (0, _data.useDispatch)(_blockEditor.store),
      toggleSelection = _useDispatch2.toggleSelection;

  (0, _element.useEffect)(function () {
    // Upload a file drag-and-dropped into the editor
    if ((0, _blob.isBlobURL)(href)) {
      var file = (0, _blob.getBlobByURL)(href);
      mediaUpload({
        filesList: [file],
        onFileChange: function onFileChange(_ref3) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 1),
              newMedia = _ref4[0];

          return onSelectFile(newMedia);
        },
        onError: function onError(message) {
          setHasError(true);
          noticeOperations.createErrorNotice(message);
        }
      });
      (0, _blob.revokeBlobURL)(href);
    }

    if (downloadButtonText === undefined) {
      changeDownloadButtonText((0, _i18n._x)('Download', 'button label'));
    }
  }, []);

  function onSelectFile(newMedia) {
    if (newMedia && newMedia.url) {
      setHasError(false);
      var isPdf = newMedia.url.endsWith('.pdf');
      setAttributes({
        href: newMedia.url,
        fileName: newMedia.title,
        textLinkHref: newMedia.url,
        id: newMedia.id,
        displayPreview: isPdf ? true : undefined,
        previewHeight: isPdf ? 600 : undefined
      });
    }
  }

  function onUploadError(message) {
    setHasError(true);
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function changeLinkDestinationOption(newHref) {
    // Choose Media File or Attachment Page (when file is in Media Library)
    setAttributes({
      textLinkHref: newHref
    });
  }

  function changeOpenInNewWindow(newValue) {
    setAttributes({
      textLinkTarget: newValue ? '_blank' : false
    });
  }

  function changeShowDownloadButton(newValue) {
    setAttributes({
      showDownloadButton: newValue
    });
  }

  function changeDownloadButtonText(newValue) {
    // Remove anchor tags from button text content.
    setAttributes({
      downloadButtonText: newValue.replace(/<\/?a[^>]*>/g, '')
    });
  }

  function changeDisplayPreview(newValue) {
    setAttributes({
      displayPreview: newValue
    });
  }

  function handleOnResizeStop(event, direction, elt, delta) {
    toggleSelection(true);
    var newHeight = parseInt(previewHeight + delta.height, 10);
    setAttributes({
      previewHeight: newHeight
    });
  }

  function changePreviewHeight(newValue) {
    var newHeight = Math.max(parseInt(newValue, 10), MIN_PREVIEW_HEIGHT);
    setAttributes({
      previewHeight: newHeight
    });
  }

  var attachmentPage = media && media.link;
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)((0, _blob.isBlobURL)(href) && (0, _components.__unstableGetAnimateClassName)({
      type: 'loading'
    }), {
      'is-transient': (0, _blob.isBlobURL)(href)
    })
  });
  var displayPreviewInEditor = (0, _utils.browserSupportsPdfs)() && displayPreview;

  if (!href || hasError) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.file
      }),
      labels: {
        title: (0, _i18n.__)('File'),
        instructions: (0, _i18n.__)('Upload a file or pick one from your media library.')
      },
      onSelect: onSelectFile,
      notices: noticeUI,
      onError: onUploadError,
      accept: "*"
    }));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_inspector.default, {
    hrefs: {
      href: href,
      textLinkHref: textLinkHref,
      attachmentPage: attachmentPage
    },
    openInNewWindow: !!textLinkTarget,
    showDownloadButton: showDownloadButton,
    changeLinkDestinationOption: changeLinkDestinationOption,
    changeOpenInNewWindow: changeOpenInNewWindow,
    changeShowDownloadButton: changeShowDownloadButton,
    displayPreview: displayPreview,
    changeDisplayPreview: changeDisplayPreview,
    previewHeight: previewHeight,
    changePreviewHeight: changePreviewHeight
  }), (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "other"
  }, (0, _element.createElement)(_blockEditor.MediaReplaceFlow, {
    mediaId: id,
    mediaURL: href,
    accept: "*",
    onSelect: onSelectFile,
    onError: onUploadError
  }), (0, _element.createElement)(ClipboardToolbarButton, {
    text: href,
    disabled: (0, _blob.isBlobURL)(href)
  })), (0, _element.createElement)("div", blockProps, displayPreviewInEditor && (0, _element.createElement)(_components.ResizableBox, {
    size: {
      height: previewHeight
    },
    minHeight: MIN_PREVIEW_HEIGHT,
    maxHeight: MAX_PREVIEW_HEIGHT,
    minWidth: "100%",
    grid: [10, 10],
    enable: {
      top: false,
      right: false,
      bottom: true,
      left: false,
      topRight: false,
      bottomRight: false,
      bottomLeft: false,
      topLeft: false
    },
    onResizeStart: function onResizeStart() {
      return toggleSelection(false);
    },
    onResizeStop: handleOnResizeStop,
    showHandle: isSelected
  }, (0, _element.createElement)("object", {
    className: "wp-block-file__preview",
    data: href,
    type: "application/pdf",
    "aria-label": (0, _i18n.__)('Embed of the selected PDF file.')
  }), !isSelected && (0, _element.createElement)("div", {
    className: "wp-block-file__preview-overlay"
  })), (0, _element.createElement)("div", {
    className: 'wp-block-file__content-wrapper'
  }, (0, _element.createElement)(_blockEditor.RichText, {
    style: {
      display: 'inline-block'
    },
    tagName: "a" // must be block-level or else cursor disappears
    ,
    value: fileName,
    placeholder: (0, _i18n.__)('Write file name…'),
    withoutInteractiveFormatting: true,
    onChange: function onChange(text) {
      return setAttributes({
        fileName: text
      });
    },
    href: textLinkHref
  }), showDownloadButton && (0, _element.createElement)("div", {
    className: 'wp-block-file__button-richtext-wrapper'
  }, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    "aria-label": (0, _i18n.__)('Download button text'),
    className: 'wp-block-file__button',
    value: downloadButtonText,
    withoutInteractiveFormatting: true,
    placeholder: (0, _i18n.__)('Add text…'),
    onChange: function onChange(text) {
      return changeDownloadButtonText(text);
    }
  })))));
}

var _default = (0, _components.withNotices)(FileEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map