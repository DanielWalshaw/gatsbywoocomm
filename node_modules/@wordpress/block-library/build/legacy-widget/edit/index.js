"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _widgetTypeSelector = _interopRequireDefault(require("./widget-type-selector"));

var _inspectorCard = _interopRequireDefault(require("./inspector-card"));

var _formWrapper = _interopRequireDefault(require("./form-wrapper"));

var _form = _interopRequireDefault(require("./form"));

var _preview = _interopRequireDefault(require("./preview"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function Edit(props) {
  var _props$attributes = props.attributes,
      id = _props$attributes.id,
      idBase = _props$attributes.idBase;
  return (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)(), !id && !idBase ? (0, _element.createElement)(Empty, props) : (0, _element.createElement)(NotEmpty, props));
}

function Empty(_ref) {
  var _ref$attributes = _ref.attributes,
      id = _ref$attributes.id,
      idBase = _ref$attributes.idBase,
      setAttributes = _ref.setAttributes;
  return (0, _element.createElement)(_components.Placeholder, {
    icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
      icon: _icons.brush
    }),
    label: (0, _i18n.__)('Legacy Widget')
  }, (0, _element.createElement)(_widgetTypeSelector.default, {
    selectedId: id !== null && id !== void 0 ? id : idBase,
    onSelect: function onSelect(_ref2) {
      var selectedId = _ref2.selectedId,
          isMulti = _ref2.isMulti;

      if (!selectedId) {
        setAttributes({
          id: null,
          idBase: null,
          instance: null
        });
      } else if (isMulti) {
        setAttributes({
          id: null,
          idBase: selectedId,
          instance: {}
        });
      } else {
        setAttributes({
          id: selectedId,
          idBase: null,
          instance: null
        });
      }
    }
  }));
}

function NotEmpty(_ref3) {
  var _ref3$attributes = _ref3.attributes,
      id = _ref3$attributes.id,
      idBase = _ref3$attributes.idBase,
      instance = _ref3$attributes.instance,
      setAttributes = _ref3.setAttributes;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select$getSettings$w, _select$getSettings;

    var widgetTypeId = id !== null && id !== void 0 ? id : idBase;
    var hiddenIds = (_select$getSettings$w = (_select$getSettings = select(_blockEditor.store).getSettings()) === null || _select$getSettings === void 0 ? void 0 : _select$getSettings.widgetTypesToHideFromLegacyWidgetBlock) !== null && _select$getSettings$w !== void 0 ? _select$getSettings$w : [];
    return {
      widgetType: select(_coreData.store).getWidgetType(widgetTypeId),
      hasResolved: select(_coreData.store).hasFinishedResolution('getWidgetType', [widgetTypeId]),
      isWidgetTypeHidden: hiddenIds.includes(widgetTypeId)
    };
  }, [id, idBase]),
      widgetType = _useSelect.widgetType,
      hasResolved = _useSelect.hasResolved,
      isWidgetTypeHidden = _useSelect.isWidgetTypeHidden;

  var _useState = (0, _element.useState)('edit'),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      tab = _useState2[0],
      setTab = _useState2[1];

  var setInstance = (0, _element.useCallback)(function (newInstance) {
    return setAttributes({
      instance: newInstance
    });
  }, [setAttributes]);

  if (!widgetType && !hasResolved) {
    return (0, _element.createElement)(_components.Spinner, null);
  }

  if (!widgetType && hasResolved) {
    return (0, _element.createElement)(_components.Placeholder, null, (0, _i18n.__)('Widget is missing.'));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, !isWidgetTypeHidden && (0, _element.createElement)(_components.ToolbarButton, {
    label: (0, _i18n.__)('Change widget'),
    icon: _icons.update,
    onClick: function onClick() {
      return setAttributes({
        id: null,
        idBase: null,
        instance: null
      });
    }
  }), idBase && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: tab === 'edit',
    onClick: function onClick() {
      return setTab('edit');
    }
  }, (0, _element.createElement)("span", null, (0, _i18n.__)('Edit'))), (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: tab === 'preview',
    onClick: function onClick() {
      return setTab('preview');
    }
  }, (0, _element.createElement)("span", null, (0, _i18n.__)('Preview')))))), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_inspectorCard.default, {
    name: widgetType.name,
    description: widgetType.description
  })), (0, _element.createElement)(_formWrapper.default, {
    title: widgetType.name,
    isVisible: tab === 'edit'
  }, (0, _element.createElement)(_form.default, {
    id: id,
    idBase: idBase,
    instance: instance,
    setInstance: setInstance
  })), idBase && (0, _element.createElement)(_preview.default, {
    idBase: idBase,
    instance: instance,
    isVisible: tab === 'preview'
  }));
}
//# sourceMappingURL=index.js.map