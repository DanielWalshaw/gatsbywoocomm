"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;

var _element = require("@wordpress/element");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _notices = require("@wordpress/notices");

var _i18n = require("@wordpress/i18n");

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function Form(_ref) {
  var id = _ref.id,
      idBase = _ref.idBase,
      instance = _ref.instance,
      setInstance = _ref.setInstance;

  var _useForm = useForm({
    id: id,
    idBase: idBase,
    instance: instance,
    setInstance: setInstance
  }),
      html = _useForm.html,
      setFormData = _useForm.setFormData;

  var setFormDataDebounced = (0, _element.useCallback)((0, _lodash.debounce)(setFormData, 300), [setFormData]);
  return (0, _element.createElement)(Control, {
    id: id,
    idBase: idBase,
    html: html,
    onChange: setFormDataDebounced,
    onSave: setFormData
  });
}

function useForm(_ref2) {
  var id = _ref2.id,
      idBase = _ref2.idBase,
      instance = _ref2.instance,
      setInstance = _ref2.setInstance;
  var isStillMounted = (0, _element.useRef)(false);

  var _useState = (0, _element.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      html = _useState2[0],
      setHTML = _useState2[1];

  var _useState3 = (0, _element.useState)(null),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      formData = _useState4[0],
      setFormData = _useState4[1];

  (0, _element.useEffect)(function () {
    isStillMounted.current = true;
    return function () {
      return isStillMounted.current = false;
    };
  }, []);

  var _useDispatch = (0, _data.useDispatch)(_notices.store),
      createNotice = _useDispatch.createNotice;

  (0, _element.useEffect)(function () {
    var performFetch = /*#__PURE__*/function () {
      var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var widget, _error$message, response, _error$message2;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!id) {
                  _context.next = 19;
                  break;
                }

                _context.prev = 1;

                if (!formData) {
                  _context.next = 8;
                  break;
                }

                _context.next = 5;
                return (0, _apiFetch.default)({
                  path: "/wp/v2/widgets/".concat(id, "?context=edit"),
                  method: 'PUT',
                  data: {
                    form_data: formData
                  }
                });

              case 5:
                widget = _context.sent;
                _context.next = 11;
                break;

              case 8:
                _context.next = 10;
                return (0, _apiFetch.default)({
                  path: "/wp/v2/widgets/".concat(id, "?context=edit"),
                  method: 'GET'
                });

              case 10:
                widget = _context.sent;

              case 11:
                if (isStillMounted.current) {
                  setHTML(widget.rendered_form);
                }

                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](1);
                createNotice('error', (_error$message = _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message) !== null && _error$message !== void 0 ? _error$message : (0, _i18n.__)('An error occured while updating the widget.'));

              case 17:
                _context.next = 30;
                break;

              case 19:
                if (!idBase) {
                  _context.next = 30;
                  break;
                }

                _context.prev = 20;
                _context.next = 23;
                return (0, _apiFetch.default)({
                  path: "/wp/v2/widget-types/".concat(idBase, "/encode"),
                  method: 'POST',
                  data: {
                    instance: instance,
                    form_data: formData
                  }
                });

              case 23:
                response = _context.sent;

                if (isStillMounted.current) {
                  setInstance(response.instance); // Only set HTML the first time so that we don't cause a
                  // focus loss by remounting the form.

                  setHTML(function (previousHTML) {
                    return previousHTML !== null && previousHTML !== void 0 ? previousHTML : response.form;
                  });
                }

                _context.next = 30;
                break;

              case 27:
                _context.prev = 27;
                _context.t1 = _context["catch"](20);
                createNotice('error', (_error$message2 = _context.t1 === null || _context.t1 === void 0 ? void 0 : _context.t1.message) !== null && _error$message2 !== void 0 ? _error$message2 : (0, _i18n.__)('An error occured while updating the widget.'));

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 14], [20, 27]]);
      }));

      return function performFetch() {
        return _ref3.apply(this, arguments);
      };
    }();

    performFetch();
  }, [id, idBase, setInstance, formData // Do not trigger when `instance` changes so that we don't make two API
  // requests when there is form input.
  ]);
  return {
    html: html,
    setFormData: setFormData
  };
}

function Control(_ref4) {
  var id = _ref4.id,
      idBase = _ref4.idBase,
      html = _ref4.html,
      onChange = _ref4.onChange,
      onSave = _ref4.onSave;
  var controlRef = (0, _element.useRef)();
  var formRef = (0, _element.useRef)(); // Trigger 'widget-added' when widget is ready and 'widget-updated' when
  // widget changes. This event is what widgets' scripts use to initialize,
  // attach events, etc. The event must be fired using jQuery's event bus as
  // this is what widget scripts expect. If jQuery is not loaded, do nothing -
  // some widgets will still work regardless.

  var hasBeenAdded = (0, _element.useRef)(false);
  (0, _element.useEffect)(function () {
    if (!window.jQuery) {
      return;
    }

    var _window = window,
        $ = _window.jQuery;

    if (html) {
      $(document).trigger(hasBeenAdded.current ? 'widget-updated' : 'widget-added', [$(controlRef.current)]);
      hasBeenAdded.current = true;
    }
  }, [html, // Include id and idBase in the deps so that widget-updated is triggered
  // if they change.
  id, idBase]); // Prefer jQuery 'change' event instead of the native 'change' event because
  // many widgets use jQuery's event bus to trigger an update.

  (0, _element.useEffect)(function () {
    var handler = function handler() {
      return onChange(serializeForm(formRef.current));
    };

    if (window.jQuery) {
      var _window2 = window,
          $ = _window2.jQuery;
      $(formRef.current).on('change', null, handler);
      return function () {
        return $(formRef.current).off('change', null, handler);
      };
    }

    formRef.current.addEventListener('change', handler);
    return function () {
      return formRef.current.removeEventListener('change', handler);
    };
  }, [onChange]); // Non-multi widgets can be saved via a Save button.

  var handleSubmit = function handleSubmit(event) {
    event.preventDefault();
    onSave(serializeForm(event.target));
  }; // We can't use the real widget number as this is calculated by the server
  // and we may not ever *actually* save this widget. Instead, use a fake but
  // unique number.


  var number = (0, _compose.useInstanceId)(Control);
  return (0, _element.createElement)("div", {
    ref: controlRef,
    className: "widget open"
  }, (0, _element.createElement)("div", {
    className: "widget-inside"
  }, (0, _element.createElement)("form", {
    ref: formRef,
    className: "form",
    method: "post",
    onSubmit: handleSubmit
  }, (0, _element.createElement)("input", {
    type: "hidden",
    name: "widget-id",
    className: "widget-id",
    value: id !== null && id !== void 0 ? id : "".concat(idBase, "-").concat(number)
  }), (0, _element.createElement)("input", {
    type: "hidden",
    name: "id_base",
    className: "id_base",
    value: idBase !== null && idBase !== void 0 ? idBase : id
  }), (0, _element.createElement)("input", {
    type: "hidden",
    name: "widget-width",
    className: "widget-width",
    value: "250"
  }), (0, _element.createElement)("input", {
    type: "hidden",
    name: "widget-height",
    className: "widget-height",
    value: "200"
  }), (0, _element.createElement)("input", {
    type: "hidden",
    name: "widget_number",
    className: "widget_number",
    value: idBase ? number : ''
  }), (0, _element.createElement)("input", {
    type: "hidden",
    name: "add_new",
    className: "add_new",
    value: ""
  }), (0, _element.createElement)(_element.RawHTML, {
    className: "widget-content"
  }, html), id && (0, _element.createElement)(_components.Button, {
    type: "submit",
    isPrimary: true
  }, (0, _i18n.__)('Save')))));
}

function serializeForm(form) {
  return new window.URLSearchParams(Array.from(new window.FormData(form))).toString();
}
//# sourceMappingURL=form.js.map