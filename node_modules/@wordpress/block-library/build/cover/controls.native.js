"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _reactNativeVideo = _interopRequireDefault(require("react-native-video"));

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _compose = require("@wordpress/compose");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _style = _interopRequireDefault(require("./style.scss"));

var _overlayColorSettings = _interopRequireDefault(require("./overlay-color-settings"));

var _focalPointSettingsButton = _interopRequireDefault(require("./focal-point-settings-button"));

var _shared = require("./shared");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Controls(_ref) {
  var _styles$focalPointHin;

  var attributes = _ref.attributes,
      didUploadFail = _ref.didUploadFail,
      hasOnlyColorBackground = _ref.hasOnlyColorBackground,
      isUploadInProgress = _ref.isUploadInProgress,
      onClearMedia = _ref.onClearMedia,
      onSelectMedia = _ref.onSelectMedia,
      setAttributes = _ref.setAttributes;
  var backgroundType = attributes.backgroundType,
      dimRatio = attributes.dimRatio,
      hasParallax = attributes.hasParallax,
      focalPoint = attributes.focalPoint,
      minHeight = attributes.minHeight,
      _attributes$minHeight = attributes.minHeightUnit,
      minHeightUnit = _attributes$minHeight === void 0 ? 'px' : _attributes$minHeight,
      url = attributes.url;
  var CONTAINER_HEIGHT = minHeight || _shared.COVER_DEFAULT_HEIGHT;
  var onHeightChange = (0, _element.useCallback)(function (value) {
    if (minHeight || value !== _shared.COVER_DEFAULT_HEIGHT) {
      setAttributes({
        minHeight: value
      });
    }
  }, [minHeight]);
  var onOpacityChange = (0, _element.useCallback)(function (value) {
    setAttributes({
      dimRatio: value
    });
  }, []);
  var onChangeUnit = (0, _element.useCallback)(function (nextUnit) {
    setAttributes({
      minHeightUnit: nextUnit,
      minHeight: nextUnit === 'px' ? Math.max(CONTAINER_HEIGHT, _shared.COVER_MIN_HEIGHT) : CONTAINER_HEIGHT
    });
  }, []);

  var _useState = (0, _element.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      displayPlaceholder = _useState2[0],
      setDisplayPlaceholder = _useState2[1];

  function setFocalPoint(value) {
    setAttributes({
      focalPoint: value
    });
  }

  var toggleParallax = function toggleParallax() {
    setAttributes(_objectSpread({
      hasParallax: !hasParallax
    }, !hasParallax ? {
      focalPoint: undefined
    } : {
      focalPoint: _components.IMAGE_DEFAULT_FOCAL_POINT
    }));
  };

  var addMediaButtonStyle = (0, _compose.usePreferredColorSchemeStyle)(_style.default.addMediaButton, _style.default.addMediaButtonDark);

  function focalPointPosition() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _components.IMAGE_DEFAULT_FOCAL_POINT,
        x = _ref2.x,
        y = _ref2.y;

    return {
      left: "".concat((hasParallax ? 0.5 : x) * 100, "%"),
      top: "".concat((hasParallax ? 0.5 : y) * 100, "%")
    };
  }

  var _useState3 = (0, _element.useState)(null),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      videoNaturalSize = _useState4[0],
      setVideoNaturalSize = _useState4[1];

  var videoRef = (0, _element.useRef)(null);
  var mediaBackground = (0, _compose.usePreferredColorSchemeStyle)(_style.default.mediaBackground, _style.default.mediaBackgroundDark);
  var imagePreviewStyles = [displayPlaceholder && _style.default.imagePlaceholder];
  var videoPreviewStyles = [{
    aspectRatio: videoNaturalSize && videoNaturalSize.width / videoNaturalSize.height,
    // Hide Video component since it has black background while loading the source
    opacity: displayPlaceholder ? 0 : 1
  }, _style.default.video, displayPlaceholder && _style.default.imagePlaceholder];
  var focalPointHint = !hasParallax && !displayPlaceholder && (0, _element.createElement)(_components.Icon, {
    icon: _icons.plus,
    size: (_styles$focalPointHin = _style.default.focalPointHint) === null || _styles$focalPointHin === void 0 ? void 0 : _styles$focalPointHin.width,
    style: [_style.default.focalPointHint, focalPointPosition(focalPoint)]
  });

  var renderMediaSection = function renderMediaSection(_ref3) {
    var _styles$image;

    var openMediaOptions = _ref3.open,
        getMediaOptions = _ref3.getMediaOptions;
    return (0, _element.createElement)(_element.Fragment, null, getMediaOptions(), url ? (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.BottomSheet.Cell, {
      accessible: false,
      cellContainerStyle: [_style.default.mediaPreview, mediaBackground],
      onLongPress: openMediaOptions
    }, (0, _element.createElement)(_reactNative.View, {
      style: _style.default.mediaInner
    }, _shared.IMAGE_BACKGROUND_TYPE === backgroundType && (0, _element.createElement)(_components.Image, {
      editButton: !displayPlaceholder,
      highlightSelected: false,
      isSelected: !displayPlaceholder,
      isUploadFailed: didUploadFail,
      isUploadInProgress: isUploadInProgress,
      mediaPickerOptions: [{
        destructiveButton: true,
        id: 'clearMedia',
        label: (0, _i18n.__)('Clear Media'),
        onPress: onClearMedia,
        separated: true,
        value: 'clearMedia'
      }],
      onImageDataLoad: function onImageDataLoad() {
        setDisplayPlaceholder(false);
      },
      onSelectMediaUploadOption: onSelectMedia,
      openMediaOptions: openMediaOptions,
      url: url,
      height: "100%",
      style: imagePreviewStyles,
      width: (_styles$image = _style.default.image) === null || _styles$image === void 0 ? void 0 : _styles$image.width
    }), _shared.VIDEO_BACKGROUND_TYPE === backgroundType && (0, _element.createElement)(_reactNativeVideo.default, {
      muted: true,
      paused: true,
      disableFocus: true,
      onLoadStart: function onLoadStart() {
        setDisplayPlaceholder(true);
      },
      onLoad: function onLoad(event) {
        var _event$naturalSize = event.naturalSize,
            height = _event$naturalSize.height,
            width = _event$naturalSize.width;
        setVideoNaturalSize({
          height: height,
          width: width
        });
        setDisplayPlaceholder(false); // Avoid invisible, paused video on Android, presumably
        // related to https://git.io/Jt6Dr

        videoRef === null || videoRef === void 0 ? void 0 : videoRef.current.seek(0);
      },
      ref: videoRef,
      resizeMode: 'cover',
      source: {
        uri: url
      },
      style: videoPreviewStyles
    }), displayPlaceholder ? null : focalPointHint)), (0, _element.createElement)(_focalPointSettingsButton.default, {
      disabled: hasParallax,
      focalPoint: focalPoint || _components.IMAGE_DEFAULT_FOCAL_POINT,
      onFocalPointChange: setFocalPoint,
      url: url
    }), _shared.IMAGE_BACKGROUND_TYPE === backgroundType && (0, _element.createElement)(_components.ToggleControl, {
      label: (0, _i18n.__)('Fixed background'),
      checked: hasParallax,
      onChange: toggleParallax
    }), (0, _element.createElement)(_components.TextControl, {
      leftAlign: true,
      label: (0, _i18n.__)('Clear Media'),
      labelStyle: _style.default.clearMediaButton,
      onPress: onClearMedia
    })) : (0, _element.createElement)(_components.TextControl, {
      accessibilityLabel: (0, _i18n.__)('Add image or video'),
      label: (0, _i18n.__)('Add image or video'),
      labelStyle: addMediaButtonStyle,
      leftAlign: true,
      onPress: openMediaOptions
    }));
  };

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Media')
  }, (0, _element.createElement)(_blockEditor.MediaUpload, {
    allowedTypes: _shared.ALLOWED_MEDIA_TYPES,
    isReplacingMedia: !hasOnlyColorBackground,
    onSelect: onSelectMedia,
    render: renderMediaSection
  })), (0, _element.createElement)(_overlayColorSettings.default, {
    overlayColor: attributes.overlayColor,
    customOverlayColor: attributes.customOverlayColor,
    gradient: attributes.gradient,
    customGradient: attributes.customGradient,
    setAttributes: setAttributes
  }), url ? (0, _element.createElement)(_components.PanelBody, null, (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Opacity'),
    minimumValue: 0,
    maximumValue: 100,
    value: dimRatio,
    onChange: onOpacityChange,
    style: _style.default.rangeCellContainer,
    separatorType: 'topFullWidth'
  })) : null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Dimensions')
  }, (0, _element.createElement)(_components.UnitControl, {
    label: (0, _i18n.__)('Minimum height'),
    min: minHeightUnit === 'px' ? _shared.COVER_MIN_HEIGHT : 1,
    max: _shared.COVER_MAX_HEIGHT,
    unit: minHeightUnit,
    value: CONTAINER_HEIGHT,
    onChange: onHeightChange,
    onUnitChange: onChangeUnit,
    units: _shared.CSS_UNITS,
    style: _style.default.rangeCellContainer,
    key: minHeightUnit
  })));
}

var _default = Controls;
exports.default = _default;
//# sourceMappingURL=controls.native.js.map