"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SearchEdit;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _compose = require("@wordpress/compose");

var _style = _interopRequireDefault(require("./style.scss"));

var _styles$widthMargin, _styles$widthMargin2;

/**
 * Constants
 */
var MIN_BUTTON_WIDTH = 75;
var MARGINS = ((_styles$widthMargin = _style.default.widthMargin) === null || _styles$widthMargin === void 0 ? void 0 : _styles$widthMargin.marginLeft) + ((_styles$widthMargin2 = _style.default.widthMargin) === null || _styles$widthMargin2 === void 0 ? void 0 : _styles$widthMargin2.paddingLeft);
var BUTTON_OPTIONS = [{
  value: 'button-inside',
  label: (0, _i18n.__)('Button inside')
}, {
  value: 'button-outside',
  label: (0, _i18n.__)('Button outside')
}, {
  value: 'no-button',
  label: (0, _i18n.__)('No button')
}];

function SearchEdit(_ref) {
  var _styles$richTextButto2;

  var _onFocus = _ref.onFocus,
      isSelected = _ref.isSelected,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      className = _ref.className,
      blockWidth = _ref.blockWidth;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isButtonSelected = _useState2[0],
      setIsButtonSelected = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isLabelSelected = _useState4[0],
      setIsLabelSelected = _useState4[1];

  var _useState5 = (0, _element.useState)(true),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isPlaceholderSelected = _useState6[0],
      setIsPlaceholderSelected = _useState6[1];

  var _useState7 = (0, _element.useState)(false),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      isLongButton = _useState8[0],
      setIsLongButton = _useState8[1];

  var _useState9 = (0, _element.useState)(MIN_BUTTON_WIDTH),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      buttonWidth = _useState10[0],
      setButtonWidth = _useState10[1];

  var textInputRef = (0, _element.useRef)(null);
  var label = attributes.label,
      showLabel = attributes.showLabel,
      buttonPosition = attributes.buttonPosition,
      buttonUseIcon = attributes.buttonUseIcon,
      placeholder = attributes.placeholder,
      buttonText = attributes.buttonText;
  /*
   * Called when the value of isSelected changes. Blurs the PlainText component
   * used by the placeholder when this block loses focus.
   */

  (0, _element.useEffect)(function () {
    if (hasTextInput() && isPlaceholderSelected && !isSelected) {
      textInputRef.current.blur();
    }
  }, [isSelected]);
  (0, _element.useEffect)(function () {
    var maxButtonWidth = Math.floor(blockWidth / 2 - MARGINS);
    var tempIsLongButton = buttonWidth > maxButtonWidth; // Update this value only if it has changed to avoid flickering.

    if (isLongButton !== tempIsLongButton) {
      setIsLongButton(tempIsLongButton);
    }
  }, [blockWidth, buttonWidth]);

  var hasTextInput = function hasTextInput() {
    return textInputRef && textInputRef.current;
  };

  var onLayoutButton = function onLayoutButton(_ref2) {
    var nativeEvent = _ref2.nativeEvent;

    var _nativeEvent$layout = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.layout,
        width = _nativeEvent$layout.width;

    if (width) {
      setButtonWidth(width);
    }
  };

  var getBlockClassNames = function getBlockClassNames() {
    return (0, _classnames.default)(className, 'button-inside' === buttonPosition ? 'wp-block-search__button-inside' : undefined, 'button-outside' === buttonPosition ? 'wp-block-search__button-outside' : undefined, 'no-button' === buttonPosition ? 'wp-block-search__no-button' : undefined, 'button-only' === buttonPosition ? 'wp-block-search__button-only' : undefined, !buttonUseIcon && 'no-button' !== buttonPosition ? 'wp-block-search__text-button' : undefined, buttonUseIcon && 'no-button' !== buttonPosition ? 'wp-block-search__icon-button' : undefined);
  };

  var getSelectedButtonPositionLabel = function getSelectedButtonPositionLabel(option) {
    switch (option) {
      case 'button-inside':
        return (0, _i18n.__)('Inside');

      case 'button-outside':
        return (0, _i18n.__)('Outside');

      case 'no-button':
        return (0, _i18n.__)('No button');
    }
  };

  var blockProps = (0, _blockEditor.useBlockProps)({
    className: getBlockClassNames()
  });
  var controls = (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Search settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Hide search heading'),
    checked: !showLabel,
    onChange: function onChange() {
      setAttributes({
        showLabel: !showLabel
      });
    }
  }), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Button position'),
    value: getSelectedButtonPositionLabel(buttonPosition),
    onChange: function onChange(position) {
      setAttributes({
        buttonPosition: position
      });
    },
    options: BUTTON_OPTIONS,
    hideCancelButton: true
  }), buttonPosition !== 'no-button' && (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Use icon button'),
    checked: buttonUseIcon,
    onChange: function onChange() {
      setAttributes({
        buttonUseIcon: !buttonUseIcon
      });
    }
  })));
  var isButtonInside = buttonPosition === 'button-inside';
  var borderStyle = (0, _compose.usePreferredColorSchemeStyle)(_style.default.border, _style.default.borderDark);
  var inputStyle = [!isButtonInside && borderStyle, (0, _compose.usePreferredColorSchemeStyle)(_style.default.plainTextInput, _style.default.plainTextInputDark)];
  var placeholderStyle = (0, _compose.usePreferredColorSchemeStyle)(_style.default.plainTextPlaceholder, _style.default.plainTextPlaceholderDark);
  var searchBarStyle = [_style.default.searchBarContainer, isButtonInside && borderStyle, isLongButton && {
    flexDirection: 'column'
  }];

  var getPlaceholderAccessibilityLabel = function getPlaceholderAccessibilityLabel() {
    var title = (0, _i18n.__)('Search input field.');
    var description = placeholder ? "".concat((0, _i18n.__)('Current placeholder text is'), " ").concat(placeholder) : (0, _i18n.__)('No custom placeholder set');
    return "".concat(title, " ").concat(description);
  };

  var renderTextField = function renderTextField() {
    return (0, _element.createElement)(_reactNative.View, {
      style: _style.default.searchInputContainer,
      accessible: true,
      accessibilityRole: "none",
      accessibilityHint: (0, _i18n.__)('Double tap to edit placeholder text'),
      accessibilityLabel: getPlaceholderAccessibilityLabel()
    }, (0, _element.createElement)(_blockEditor.PlainText, {
      ref: textInputRef,
      isSelected: isPlaceholderSelected,
      className: "wp-block-search__input",
      style: inputStyle,
      numberOfLines: 1,
      ellipsizeMode: "tail" // currently only works on ios
      ,
      label: null,
      value: placeholder,
      placeholder: placeholder ? undefined : (0, _i18n.__)('Optional placeholderâ€¦'),
      onChange: function onChange(newVal) {
        return setAttributes({
          placeholder: newVal
        });
      },
      onFocus: function onFocus() {
        setIsPlaceholderSelected(true);

        _onFocus();
      },
      onBlur: function onBlur() {
        return setIsPlaceholderSelected(false);
      },
      placeholderTextColor: placeholderStyle === null || placeholderStyle === void 0 ? void 0 : placeholderStyle.color
    }));
  }; // To achieve proper expanding and shrinking `RichText` on Android, there is a need to set
  // a `placeholder` as an empty string when `RichText` is focused,
  // because `AztecView` is calculating a `minWidth` based on placeholder text.


  var buttonPlaceholderText = isButtonSelected || !isButtonSelected && buttonText && buttonText !== '' ? '' : (0, _i18n.__)('Add button text');

  var renderButton = function renderButton() {
    var _styles$richTextButto;

    return (0, _element.createElement)(_reactNative.View, {
      style: [_style.default.buttonContainer, isLongButton && _style.default.buttonContainerWide]
    }, buttonUseIcon && (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
      icon: _icons.search
    }, _style.default.icon, {
      onLayout: onLayoutButton
    })), !buttonUseIcon && (0, _element.createElement)(_reactNative.View, {
      accessible: true,
      accessibilityRole: "none",
      accessibilityHint: (0, _i18n.__)('Double tap to edit button text'),
      accessibilityLabel: "".concat((0, _i18n.__)('Search button. Current button text is'), " ").concat(buttonText),
      onLayout: onLayoutButton
    }, (0, _element.createElement)(_blockEditor.RichText, {
      className: "wp-block-search__button",
      identifier: "text",
      tagName: "p",
      style: _style.default.richTextButton,
      placeholder: buttonPlaceholderText,
      value: buttonText,
      withoutInteractiveFormatting: true,
      onChange: function onChange(html) {
        return setAttributes({
          buttonText: html
        });
      },
      minWidth: MIN_BUTTON_WIDTH,
      maxWidth: blockWidth - MARGINS,
      textAlign: "center",
      isSelected: isButtonSelected,
      __unstableMobileNoFocusOnMount: !isSelected,
      unstableOnFocus: function unstableOnFocus() {
        setIsButtonSelected(true);
      },
      onBlur: function onBlur() {
        setIsButtonSelected(false);
      },
      selectionColor: (_styles$richTextButto = _style.default.richTextButtonCursor) === null || _styles$richTextButto === void 0 ? void 0 : _styles$richTextButto.color
    })));
  };

  return (0, _element.createElement)(_reactNative.View, (0, _extends2.default)({}, blockProps, {
    style: _style.default.searchBlockContainer,
    importantForAccessibility: isSelected ? 'yes' : 'no-hide-descendants',
    accessibilityElementsHidden: isSelected ? false : true
  }), isSelected && controls, showLabel && (0, _element.createElement)(_reactNative.View, {
    accessible: true,
    accessibilityRole: "none",
    accessibilityHint: (0, _i18n.__)('Double tap to edit label text'),
    accessibilityLabel: "".concat((0, _i18n.__)('Search block label. Current text is'), " ").concat(label)
  }, (0, _element.createElement)(_blockEditor.RichText, {
    className: "wp-block-search__label",
    identifier: "text",
    tagName: "p",
    style: _style.default.richTextLabel,
    placeholder: (0, _i18n.__)('Add labelâ€¦'),
    withoutInteractiveFormatting: true,
    value: label,
    onChange: function onChange(html) {
      return setAttributes({
        label: html
      });
    },
    isSelected: isLabelSelected,
    __unstableMobileNoFocusOnMount: !isSelected,
    unstableOnFocus: function unstableOnFocus() {
      setIsLabelSelected(true);
    },
    onBlur: function onBlur() {
      setIsLabelSelected(false);
    },
    selectionColor: (_styles$richTextButto2 = _style.default.richTextButtonCursor) === null || _styles$richTextButto2 === void 0 ? void 0 : _styles$richTextButto2.color
  })), ('button-inside' === buttonPosition || 'button-outside' === buttonPosition) && (0, _element.createElement)(_reactNative.View, {
    style: searchBarStyle
  }, renderTextField(), renderButton()), 'button-only' === buttonPosition && renderButton(), 'no-button' === buttonPosition && renderTextField());
}
//# sourceMappingURL=edit.native.js.map