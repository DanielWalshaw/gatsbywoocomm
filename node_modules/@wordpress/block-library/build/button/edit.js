"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _keycodes = require("@wordpress/keycodes");

var _icons = require("@wordpress/icons");

var _blocks = require("@wordpress/blocks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var NEW_TAB_REL = 'noreferrer noopener';

function WidthPanel(_ref) {
  var selectedWidth = _ref.selectedWidth,
      setAttributes = _ref.setAttributes;

  function handleChange(newWidth) {
    // Check if we are toggling the width off
    var width = selectedWidth === newWidth ? undefined : newWidth; // Update attributes

    setAttributes({
      width: width
    });
  }

  return (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Width settings')
  }, (0, _element.createElement)(_components.ButtonGroup, {
    "aria-label": (0, _i18n.__)('Button width')
  }, [25, 50, 75, 100].map(function (widthValue) {
    return (0, _element.createElement)(_components.Button, {
      key: widthValue,
      isSmall: true,
      isPrimary: widthValue === selectedWidth,
      onClick: function onClick() {
        return handleChange(widthValue);
      }
    }, widthValue, "%");
  })));
}

function URLPicker(_ref2) {
  var _ref4;

  var isSelected = _ref2.isSelected,
      url = _ref2.url,
      setAttributes = _ref2.setAttributes,
      opensInNewTab = _ref2.opensInNewTab,
      onToggleOpenInNewTab = _ref2.onToggleOpenInNewTab,
      anchorRef = _ref2.anchorRef;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isURLPickerOpen = _useState2[0],
      setIsURLPickerOpen = _useState2[1];

  var urlIsSet = !!url;
  var urlIsSetandSelected = urlIsSet && isSelected;

  var openLinkControl = function openLinkControl() {
    setIsURLPickerOpen(true);
    return false; // prevents default behaviour for event
  };

  var unlinkButton = function unlinkButton() {
    setAttributes({
      url: undefined,
      linkTarget: undefined,
      rel: undefined
    });
    setIsURLPickerOpen(false);
  };

  var linkControl = (isURLPickerOpen || urlIsSetandSelected) && (0, _element.createElement)(_components.Popover, {
    position: "bottom center",
    onClose: function onClose() {
      return setIsURLPickerOpen(false);
    },
    anchorRef: anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current
  }, (0, _element.createElement)(_blockEditor.__experimentalLinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: {
      url: url,
      opensInNewTab: opensInNewTab
    },
    onChange: function onChange(_ref3) {
      var _ref3$url = _ref3.url,
          newURL = _ref3$url === void 0 ? '' : _ref3$url,
          newOpensInNewTab = _ref3.opensInNewTab;
      setAttributes({
        url: newURL
      });

      if (opensInNewTab !== newOpensInNewTab) {
        onToggleOpenInNewTab(newOpensInNewTab);
      }
    }
  }));
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, !urlIsSet && (0, _element.createElement)(_components.ToolbarButton, {
    name: "link",
    icon: _icons.link,
    title: (0, _i18n.__)('Link'),
    shortcut: _keycodes.displayShortcut.primary('k'),
    onClick: openLinkControl
  }), urlIsSetandSelected && (0, _element.createElement)(_components.ToolbarButton, {
    name: "link",
    icon: _icons.linkOff,
    title: (0, _i18n.__)('Unlink'),
    shortcut: _keycodes.displayShortcut.primaryShift('k'),
    onClick: unlinkButton,
    isActive: true
  })), isSelected && (0, _element.createElement)(_components.KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: (_ref4 = {}, (0, _defineProperty2.default)(_ref4, _keycodes.rawShortcut.primary('k'), openLinkControl), (0, _defineProperty2.default)(_ref4, _keycodes.rawShortcut.primaryShift('k'), unlinkButton), _ref4)
  }), linkControl);
}

function ButtonEdit(props) {
  var _style$border, _classnames;

  var attributes = props.attributes,
      setAttributes = props.setAttributes,
      className = props.className,
      isSelected = props.isSelected,
      onReplace = props.onReplace,
      mergeBlocks = props.mergeBlocks;
  var linkTarget = attributes.linkTarget,
      placeholder = attributes.placeholder,
      rel = attributes.rel,
      style = attributes.style,
      text = attributes.text,
      url = attributes.url,
      width = attributes.width;
  var onSetLinkRel = (0, _element.useCallback)(function (value) {
    setAttributes({
      rel: value
    });
  }, [setAttributes]);
  var onToggleOpenInNewTab = (0, _element.useCallback)(function (value) {
    var newLinkTarget = value ? '_blank' : undefined;
    var updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }, [rel, setAttributes]);

  var setButtonText = function setButtonText(newText) {
    // Remove anchor tags from button text content.
    setAttributes({
      text: newText.replace(/<\/?a[^>]*>/g, '')
    });
  };

  var borderRadius = style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius;
  var colorProps = (0, _blockEditor.__experimentalUseColorProps)(attributes);
  var ref = (0, _element.useRef)();
  var blockProps = (0, _blockEditor.useBlockProps)({
    ref: ref
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("div", (0, _extends2.default)({}, blockProps, {
    className: (0, _classnames2.default)(blockProps.className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "has-custom-width wp-block-button__width-".concat(width), width), (0, _defineProperty2.default)(_classnames, "has-custom-font-size", blockProps.style.fontSize), _classnames))
  }), (0, _element.createElement)(_blockEditor.RichText, {
    "aria-label": (0, _i18n.__)('Button text'),
    placeholder: placeholder || (0, _i18n.__)('Add textâ€¦'),
    value: text,
    onChange: function onChange(value) {
      return setButtonText(value);
    },
    withoutInteractiveFormatting: true,
    className: (0, _classnames2.default)(className, 'wp-block-button__link', colorProps.className, {
      'no-border-radius': borderRadius === 0
    }),
    style: _objectSpread({
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    }, colorProps.style),
    onSplit: function onSplit(value) {
      return (0, _blocks.createBlock)('core/button', _objectSpread(_objectSpread({}, attributes), {}, {
        text: value
      }));
    },
    onReplace: onReplace,
    onMerge: mergeBlocks,
    identifier: "text"
  })), (0, _element.createElement)(URLPicker, {
    url: url,
    setAttributes: setAttributes,
    isSelected: isSelected,
    opensInNewTab: linkTarget === '_blank',
    onToggleOpenInNewTab: onToggleOpenInNewTab,
    anchorRef: ref
  }), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(WidthPanel, {
    selectedWidth: width,
    setAttributes: setAttributes
  })), (0, _element.createElement)(_blockEditor.InspectorAdvancedControls, null, (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Link rel'),
    value: rel || '',
    onChange: onSetLinkRel
  })));
}

var _default = ButtonEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map