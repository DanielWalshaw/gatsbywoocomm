"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

/**
 * WordPress dependencies
 */
function GroupEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      clientId = _ref.clientId;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _getSettings;

    var _select = select(_blockEditor.store),
        getBlock = _select.getBlock,
        getSettings = _select.getSettings;

    var block = getBlock(clientId);
    return {
      hasInnerBlocks: !!(block && block.innerBlocks.length),
      themeSupportsLayout: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout
    };
  }, [clientId]),
      hasInnerBlocks = _useSelect.hasInnerBlocks,
      themeSupportsLayout = _useSelect.themeSupportsLayout;

  var defaultLayout = (0, _blockEditor.__experimentalUseEditorFeature)('layout') || {};
  var _attributes$tagName = attributes.tagName,
      TagName = _attributes$tagName === void 0 ? 'div' : _attributes$tagName,
      templateLock = attributes.templateLock,
      _attributes$layout = attributes.layout,
      layout = _attributes$layout === void 0 ? {} : _attributes$layout;
  var usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  var contentSize = usedLayout.contentSize,
      wideSize = usedLayout.wideSize;
  var alignments = contentSize || wideSize ? ['wide', 'full'] : ['left', 'center', 'right'];
  var blockProps = (0, _blockEditor.useBlockProps)();
  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)(themeSupportsLayout ? blockProps : {
    className: 'wp-block-group__inner-container'
  }, {
    templateLock: templateLock,
    renderAppender: hasInnerBlocks ? undefined : _blockEditor.InnerBlocks.ButtonBlockAppender,
    __experimentalLayout: {
      type: 'default',
      // Find a way to inject this in the support flag code (hooks).
      alignments: themeSupportsLayout ? alignments : undefined
    }
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorAdvancedControls, null, (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('HTML element'),
    options: [{
      label: (0, _i18n.__)('Default (<div>)'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: TagName,
    onChange: function onChange(value) {
      return setAttributes({
        tagName: value
      });
    }
  })), themeSupportsLayout && (0, _element.createElement)(TagName, innerBlocksProps), !themeSupportsLayout && (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)("div", innerBlocksProps)));
}

var _default = GroupEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map