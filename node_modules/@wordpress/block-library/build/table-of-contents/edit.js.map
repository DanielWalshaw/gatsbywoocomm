{"version":3,"sources":["@wordpress/block-library/src/table-of-contents/edit.js"],"names":["TableOfContentsEdit","onlyIncludeCurrentPage","attributes","clientId","setAttributes","blockProps","headings","setHeadings","headingTree","setHeadingTree","select","listBlockExists","blocksStore","getBlockType","postContent","editorStore","getEditedPostContent","pageIndex","blockEditorStore","getBlockAttributes","getBlockIndex","getBlockName","getBlockOrder","blockIndex","blockOrder","page","i","blockName","pageBreaks","content","match","undefined","length","latestHeadings","pagesOfContent","split","replaceBlocks","toolbarControls","values","inspectorControls","value"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tBlockControls,\n\tBlockIcon,\n\tInspectorControls,\n\tstore as blockEditorStore,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { createBlock, store as blocksStore } from '@wordpress/blocks';\nimport {\n\tPanelBody,\n\tPlaceholder,\n\tToggleControl,\n\tToolbarButton,\n\tToolbarGroup,\n} from '@wordpress/components';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { store as editorStore } from '@wordpress/editor';\nimport { renderToString, useEffect, useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport TableOfContentsList from './list';\nimport { getHeadingsFromContent, linearToNestedHeadingList } from './utils';\n\n/**\n * Table of Contents block edit component.\n *\n * @param {Object}                       props            The props.\n * @param {Object}                       props.attributes The block attributes.\n * @param {boolean}                      props.attributes.onlyIncludeCurrentPage\n * Whether to only include headings from the current page (if the post is\n * paginated).\n * @param {string}                       props.clientId\n * @param {(attributes: Object) => void} props.setAttributes\n *\n * @return {WPComponent} The component.\n */\nexport default function TableOfContentsEdit( {\n\tattributes: { onlyIncludeCurrentPage },\n\tclientId,\n\tsetAttributes,\n} ) {\n\tconst blockProps = useBlockProps();\n\n\t// Local state; not saved to block attributes. The saved block is dynamic and uses PHP to generate its content.\n\tconst [ headings, setHeadings ] = useState( [] );\n\tconst [ headingTree, setHeadingTree ] = useState( [] );\n\n\tconst { listBlockExists, postContent } = useSelect(\n\t\t( select ) => ( {\n\t\t\tlistBlockExists: !! select( blocksStore ).getBlockType(\n\t\t\t\t'core/list'\n\t\t\t),\n\t\t\tpostContent: select( editorStore ).getEditedPostContent(),\n\t\t} ),\n\t\t[]\n\t);\n\n\t// The page this block would be part of on the front-end. For performance\n\t// reasons, this is only calculated when onlyIncludeCurrentPage is true.\n\tconst pageIndex = useSelect(\n\t\t( select ) => {\n\t\t\tif ( ! onlyIncludeCurrentPage ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tgetBlockAttributes,\n\t\t\t\tgetBlockIndex,\n\t\t\t\tgetBlockName,\n\t\t\t\tgetBlockOrder,\n\t\t\t} = select( blockEditorStore );\n\n\t\t\tconst blockIndex = getBlockIndex( clientId );\n\t\t\tconst blockOrder = getBlockOrder();\n\n\t\t\t// Calculate which page the block will appear in on the front-end by\n\t\t\t// counting how many <!--nextpage--> tags precede it.\n\t\t\t// Unfortunately, this implementation only accounts for Page Break and\n\t\t\t// Classic blocks, so if there are any <!--nextpage--> tags in any\n\t\t\t// other block, they won't be counted. This will result in the table\n\t\t\t// of contents showing headings from the wrong page if\n\t\t\t// onlyIncludeCurrentPage === true. Thankfully, this issue only\n\t\t\t// affects the editor implementation.\n\t\t\tlet page = 1;\n\t\t\tfor ( let i = 0; i < blockIndex; i++ ) {\n\t\t\t\tconst blockName = getBlockName( blockOrder[ i ] );\n\t\t\t\tif ( blockName === 'core/nextpage' ) {\n\t\t\t\t\tpage++;\n\t\t\t\t} else if ( blockName === 'core/freeform' ) {\n\t\t\t\t\t// Count the page breaks inside the Classic block.\n\t\t\t\t\tconst pageBreaks = getBlockAttributes(\n\t\t\t\t\t\tblockOrder[ i ]\n\t\t\t\t\t).content?.match( /<!--nextpage-->/g );\n\n\t\t\t\t\tif ( pageBreaks !== null && pageBreaks !== undefined ) {\n\t\t\t\t\t\tpage += pageBreaks.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn page;\n\t\t},\n\t\t[ clientId, onlyIncludeCurrentPage ]\n\t);\n\n\tuseEffect( () => {\n\t\tlet latestHeadings;\n\n\t\tif ( onlyIncludeCurrentPage ) {\n\t\t\tconst pagesOfContent = postContent.split( '<!--nextpage-->' );\n\n\t\t\tlatestHeadings = getHeadingsFromContent(\n\t\t\t\tpagesOfContent[ pageIndex - 1 ]\n\t\t\t);\n\t\t} else {\n\t\t\tlatestHeadings = getHeadingsFromContent( postContent );\n\t\t}\n\n\t\tif ( ! isEqual( headings, latestHeadings ) ) {\n\t\t\tsetHeadings( latestHeadings );\n\t\t\tsetHeadingTree( linearToNestedHeadingList( latestHeadings ) );\n\t\t}\n\t}, [ pageIndex, postContent, onlyIncludeCurrentPage ] );\n\n\tconst { replaceBlocks } = useDispatch( blockEditorStore );\n\n\tconst toolbarControls = listBlockExists && (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton\n\t\t\t\t\tonClick={ () =>\n\t\t\t\t\t\treplaceBlocks(\n\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\tcreateBlock( 'core/list', {\n\t\t\t\t\t\t\t\tvalues: renderToString(\n\t\t\t\t\t\t\t\t\t<TableOfContentsList\n\t\t\t\t\t\t\t\t\t\tnestedHeadingList={ headingTree }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Convert to static list' ) }\n\t\t\t\t</ToolbarButton>\n\t\t\t</ToolbarGroup>\n\t\t</BlockControls>\n\t);\n\n\tconst inspectorControls = (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title={ __( 'Table of Contents settings' ) }>\n\t\t\t\t<ToggleControl\n\t\t\t\t\tlabel={ __( 'Only include current page' ) }\n\t\t\t\t\tchecked={ onlyIncludeCurrentPage }\n\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\tsetAttributes( { onlyIncludeCurrentPage: value } )\n\t\t\t\t\t}\n\t\t\t\t\thelp={\n\t\t\t\t\t\tonlyIncludeCurrentPage\n\t\t\t\t\t\t\t? __(\n\t\t\t\t\t\t\t\t\t'Only including headings from the current page (if the post is paginated).'\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: __(\n\t\t\t\t\t\t\t\t\t'Toggle to only include headings from the current page (if the post is paginated).'\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n\n\t// If there are no headings or the only heading is empty.\n\t// Note that the toolbar controls are intentionally omitted since the\n\t// \"Convert to static list\" option is useless to the placeholder state.\n\tif ( headings.length === 0 ) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div { ...blockProps }>\n\t\t\t\t\t<Placeholder\n\t\t\t\t\t\ticon={ <BlockIcon icon=\"list-view\" /> }\n\t\t\t\t\t\tlabel=\"Table of Contents\"\n\t\t\t\t\t\tinstructions={ __(\n\t\t\t\t\t\t\t'Start adding Heading blocks to create a table of contents. Headings with HTML anchors will be linked here.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{ inspectorControls }\n\t\t\t</>\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<nav { ...blockProps }>\n\t\t\t\t<ul>\n\t\t\t\t\t<TableOfContentsList nestedHeadingList={ headingTree } />\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t\t{ toolbarControls }\n\t\t\t{ inspectorControls }\n\t\t</>\n\t);\n}\n"]}