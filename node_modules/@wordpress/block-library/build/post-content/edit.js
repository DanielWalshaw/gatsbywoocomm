"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostContentEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _coreData = require("@wordpress/core-data");

/**
 * WordPress dependencies
 */
function Content(_ref) {
  var layout = _ref.layout,
      postType = _ref.postType,
      postId = _ref.postId;
  var themeSupportsLayout = (0, _data.useSelect)(function (select) {
    var _getSettings;

    var _select = select(_blockEditor.store),
        getSettings = _select.getSettings;

    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  var defaultLayout = (0, _blockEditor.__experimentalUseEditorFeature)('layout') || {};
  var usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  var contentSize = usedLayout.contentSize,
      wideSize = usedLayout.wideSize;
  var alignments = contentSize || wideSize ? ['wide', 'full'] : ['left', 'center', 'right'];

  var _useEntityBlockEditor = (0, _coreData.useEntityBlockEditor)('postType', postType, {
    id: postId
  }),
      _useEntityBlockEditor2 = (0, _slicedToArray2.default)(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  var props = (0, _blockEditor.__experimentalUseInnerBlocksProps)((0, _blockEditor.useBlockProps)({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput: onInput,
    onChange: onChange,
    __experimentalLayout: {
      type: 'default',
      // Find a way to inject this in the support flag code (hooks).
      alignments: themeSupportsLayout ? alignments : undefined
    }
  });
  return (0, _element.createElement)("div", props);
}

function Placeholder() {
  var blockProps = (0, _blockEditor.useBlockProps)();
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)("div", {
    className: "wp-block-post-content__placeholder"
  }, (0, _element.createElement)("span", null, (0, _i18n.__)('This is a placeholder for post content.'))));
}

function PostContentEdit(_ref2) {
  var _ref2$context = _ref2.context,
      contextPostId = _ref2$context.postId,
      contextPostType = _ref2$context.postType,
      attributes = _ref2.attributes;
  var _attributes$layout = attributes.layout,
      layout = _attributes$layout === void 0 ? {} : _attributes$layout;
  return contextPostId && contextPostType ? (0, _element.createElement)(Content, {
    postType: contextPostType,
    postId: contextPostId,
    layout: layout
  }) : (0, _element.createElement)(Placeholder, null);
}
//# sourceMappingURL=edit.js.map