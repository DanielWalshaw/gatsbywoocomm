"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ButtonsEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _reactNative = require("react-native");

var _blockEditor = require("@wordpress/block-editor");

var _blocks = require("@wordpress/blocks");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _button = require("../button/");

var _editor = _interopRequireDefault(require("./editor.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var ALLOWED_BLOCKS = [_button.name];
var BUTTONS_TEMPLATE = [['core/button']];
var layoutProp = {
  type: 'default',
  alignments: []
};

function ButtonsEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      contentJustification = _ref$attributes.contentJustification,
      align = _ref$attributes.align,
      clientId = _ref.clientId,
      isSelected = _ref.isSelected,
      setAttributes = _ref.setAttributes,
      blockWidth = _ref.blockWidth;

  var _useResizeObserver = (0, _compose.useResizeObserver)(),
      _useResizeObserver2 = (0, _slicedToArray2.default)(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _useState = (0, _element.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      maxWidth = _useState2[0],
      setMaxWidth = _useState2[1];

  var spacing = _editor.default.spacing.marginLeft;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_blockEditor.store),
        getBlockCount = _select.getBlockCount,
        getBlockParents = _select.getBlockParents,
        getSelectedBlockClientId = _select.getSelectedBlockClientId;

    var selectedBlockClientId = getSelectedBlockClientId();
    var selectedBlockParents = getBlockParents(selectedBlockClientId, true);
    return {
      isInnerButtonSelected: selectedBlockParents[0] === clientId,
      // The purpose of `shouldDelete` check is giving the ability to
      // pass to mobile toolbar function called `onDelete` which removes
      // the whole `Buttons` container along with the last inner button
      // when there is exactly one button.
      shouldDelete: getBlockCount(clientId) === 1
    };
  }, [clientId]),
      isInnerButtonSelected = _useSelect.isInnerButtonSelected,
      shouldDelete = _useSelect.shouldDelete;

  var _useSelect2 = (0, _data.useSelect)(_blockEditor.store),
      getBlockOrder = _useSelect2.getBlockOrder;

  var _useDispatch = (0, _data.useDispatch)(_blockEditor.store),
      insertBlock = _useDispatch.insertBlock,
      removeBlock = _useDispatch.removeBlock,
      selectBlock = _useDispatch.selectBlock;

  (0, _element.useEffect)(function () {
    var _ref2 = sizes || {},
        width = _ref2.width;

    var isFullWidth = _components.alignmentHelpers.isFullWidth;

    if (width) {
      var isFullWidthBlock = isFullWidth(align);
      setMaxWidth(isFullWidthBlock ? blockWidth : width);
    }
  }, [sizes, align]);
  var onAddNextButton = (0, _element.useCallback)((0, _lodash.debounce)(function (selectedId) {
    var order = getBlockOrder(clientId);
    var selectedButtonIndex = order.findIndex(function (i) {
      return i === selectedId;
    });
    var index = selectedButtonIndex === -1 ? order.length + 1 : selectedButtonIndex;
    var insertedBlock = (0, _blocks.createBlock)('core/button');
    insertBlock(insertedBlock, index, clientId);
    selectBlock(insertedBlock.clientId);
  }, 200), []);
  var renderFooterAppender = (0, _element.useRef)(function () {
    return (0, _element.createElement)(_reactNative.View, {
      style: _editor.default.appenderContainer
    }, (0, _element.createElement)(_blockEditor.InnerBlocks.ButtonBlockAppender, {
      isFloating: true,
      onAddBlock: onAddNextButton
    }));
  });
  var justifyControls = ['left', 'center', 'right'];
  var remove = (0, _element.useCallback)(function () {
    return removeBlock(clientId);
  }, [clientId]);
  var shouldRenderFooterAppender = isSelected || isInnerButtonSelected;
  return (0, _element.createElement)(_element.Fragment, null, isSelected && (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_blockEditor.JustifyContentControl, {
    allowedControls: justifyControls,
    value: contentJustification,
    onChange: function onChange(value) {
      return setAttributes({
        contentJustification: value
      });
    },
    popoverProps: {
      position: 'bottom right',
      isAlternate: true
    }
  })), resizeObserver, (0, _element.createElement)(_blockEditor.InnerBlocks, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: BUTTONS_TEMPLATE,
    renderFooterAppender: shouldRenderFooterAppender && renderFooterAppender.current,
    orientation: "horizontal",
    horizontalAlignment: contentJustification,
    onDeleteBlock: shouldDelete ? remove : undefined,
    onAddBlock: onAddNextButton,
    parentWidth: maxWidth // This value controls the width of that the buttons are able to expand to.
    ,
    marginHorizontal: spacing,
    marginVertical: spacing,
    __experimentalLayout: layoutProp,
    templateInsertUpdatesSelection: true,
    blockWidth: blockWidth
  }));
}
//# sourceMappingURL=edit.native.js.map