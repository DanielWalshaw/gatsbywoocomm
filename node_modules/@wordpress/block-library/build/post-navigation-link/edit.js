"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostNavigationLinkEdit;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function PostNavigationLinkEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      type = _ref$attributes.type,
      label = _ref$attributes.label,
      showTitle = _ref$attributes.showTitle,
      textAlign = _ref$attributes.textAlign,
      setAttributes = _ref.setAttributes;
  var isNext = type === 'next';
  var placeholder = isNext ? (0, _i18n.__)('Next') : (0, _i18n.__)('Previous');
  var ariaLabel = isNext ? (0, _i18n.__)('Next post') : (0, _i18n.__)('Previous post');
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames2.default)((0, _defineProperty2.default)({}, "has-text-align-".concat(textAlign), textAlign))
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, null, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Display the title as a link'),
    help: (0, _i18n.__)('If you have entered a custom label, it will be prepended before the title.'),
    checked: !!showTitle,
    onChange: function onChange() {
      return setAttributes({
        showTitle: !showTitle
      });
    }
  }))), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "a",
    "aria-label": ariaLabel,
    placeholder: placeholder,
    value: label,
    allowedFormats: ['core/bold', 'core/italic'],
    onChange: function onChange(newLabel) {
      return setAttributes({
        label: newLabel
      });
    }
  })));
}
//# sourceMappingURL=edit.js.map