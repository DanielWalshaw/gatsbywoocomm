"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QueryTitleEdit;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _headingLevelDropdown = _interopRequireDefault(require("../heading/heading-level-dropdown"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
// import { useSelect, useDispatch } from '@wordpress/data';

/**
 * Internal dependencies
 */
var SUPPORTED_TYPES = ['archive'];

function QueryTitleEdit(_ref) {
  var _classnames;

  var _ref$attributes = _ref.attributes,
      type = _ref$attributes.type,
      level = _ref$attributes.level,
      textAlign = _ref$attributes.textAlign,
      setAttributes = _ref.setAttributes;
  var TagName = "h".concat(level);
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, "has-text-align-".concat(textAlign), textAlign), (0, _defineProperty2.default)(_classnames, 'wp-block-query-title__placeholder', type === 'archive'), _classnames))
  }); // The plan is to augment this block with more
  // block variations like `Search Title`.

  if (!SUPPORTED_TYPES.includes(type)) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Provided type is not supported.')));
  }

  var titleElement;

  if (type === 'archive') {
    titleElement = (0, _element.createElement)(TagName, blockProps, (0, _i18n.__)('Archive title'));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_headingLevelDropdown.default, {
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  })), (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), titleElement);
}
//# sourceMappingURL=edit.js.map