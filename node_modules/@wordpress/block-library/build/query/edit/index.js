"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryContent = QueryContent;
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _blockEditor = require("@wordpress/block-editor");

var _queryToolbar = _interopRequireDefault(require("./query-toolbar"));

var _queryInspectorControls = _interopRequireDefault(require("./query-inspector-controls"));

var _queryBlockSetup = _interopRequireDefault(require("./query-block-setup"));

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TEMPLATE = [['core/query-loop']];

function QueryContent(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes;
  var queryId = attributes.queryId,
      query = attributes.query,
      layout = attributes.layout;

  var _useDispatch = (0, _data.useDispatch)(_blockEditor.store),
      __unstableMarkNextChangeAsNotPersistent = _useDispatch.__unstableMarkNextChangeAsNotPersistent;

  var instanceId = (0, _compose.useInstanceId)(QueryContent);
  var blockProps = (0, _blockEditor.useBlockProps)();
  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)({}, {
    template: TEMPLATE
  });

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_blockEditor.store),
        getSettings = _select.getSettings;

    return {
      postsPerPage: +getSettings().postsPerPage || _constants.DEFAULTS_POSTS_PER_PAGE
    };
  }, []),
      postsPerPage = _useSelect.postsPerPage; // There are some effects running where some initialization logic is
  // happening and setting some values to some attributes (ex. queryId).
  // These updates can cause an `undo trap` where undoing will result in
  // resetting again, so we need to mark these changes as not persistent
  // with `__unstableMarkNextChangeAsNotPersistent`.
  // Changes in query property (which is an object) need to be in the same callback,
  // because updates are batched after the render and changes in different query properties
  // would cause to overide previous wanted changes.


  (0, _element.useEffect)(function () {
    var newQuery = {};

    if (!query.perPage && postsPerPage) {
      newQuery.perPage = postsPerPage;
    }

    if (!!Object.keys(newQuery).length) {
      __unstableMarkNextChangeAsNotPersistent();

      updateQuery(newQuery);
    }
  }, [query.perPage]); // We need this for multi-query block pagination.
  // Query parameters for each block are scoped to their ID.

  (0, _element.useEffect)(function () {
    if (!queryId) {
      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        queryId: instanceId
      });
    }
  }, [queryId, instanceId]);

  var updateQuery = function updateQuery(newQuery) {
    return setAttributes({
      query: _objectSpread(_objectSpread({}, query), newQuery)
    });
  };

  var updateLayout = function updateLayout(newLayout) {
    return setAttributes({
      layout: _objectSpread(_objectSpread({}, layout), newLayout)
    });
  };

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_queryInspectorControls.default, {
    attributes: attributes,
    setQuery: updateQuery,
    setLayout: updateLayout
  }), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_queryToolbar.default, {
    attributes: attributes,
    setQuery: updateQuery,
    setLayout: updateLayout
  })), (0, _element.createElement)("div", blockProps, (0, _element.createElement)("div", innerBlocksProps)));
}

var QueryEdit = function QueryEdit(props) {
  var clientId = props.clientId;
  var hasInnerBlocks = (0, _data.useSelect)(function (select) {
    return !!select(_blockEditor.store).getBlocks(clientId).length;
  }, [clientId]);
  var Component = hasInnerBlocks ? QueryContent : _queryBlockSetup.default;
  return (0, _element.createElement)(Component, props);
};

var _default = QueryEdit;
exports.default = _default;
//# sourceMappingURL=index.js.map