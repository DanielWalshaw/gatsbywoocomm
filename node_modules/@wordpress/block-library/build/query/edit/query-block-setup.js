"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

var _blockSetup = _interopRequireDefault(require("./block-setup"));

var _utils = require("../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var QueryBlockSetup = function QueryBlockSetup(_ref) {
  var clientId = _ref.clientId,
      query = _ref.attributes.query,
      setAttributes = _ref.setAttributes,
      blockName = _ref.name;
  var postType = query.postType,
      inherit = query.inherit;

  var _useDispatch = (0, _data.useDispatch)(_blockEditor.store),
      replaceBlocks = _useDispatch.replaceBlocks,
      replaceInnerBlocks = _useDispatch.replaceInnerBlocks;

  var _usePostTypes = (0, _utils.usePostTypes)(),
      postTypesSelectOptions = _usePostTypes.postTypesSelectOptions;

  var updateQuery = function updateQuery(newQuery) {
    return setAttributes({
      query: _objectSpread(_objectSpread({}, query), newQuery)
    });
  };

  var onVariationSelect = function onVariationSelect(nextVariation) {
    if (nextVariation.attributes) {
      setAttributes(nextVariation.attributes);
    }

    if (nextVariation.innerBlocks) {
      replaceInnerBlocks(clientId, (0, _blocks.createBlocksFromInnerBlocksTemplate)(nextVariation.innerBlocks), false);
    }
  };

  var onBlockPatternSelect = function onBlockPatternSelect(blocks) {
    var clonedBlocks = blocks.map(function (block) {
      var clone = (0, _blocks.cloneBlock)(block);
      /**
       * TODO: this check will be revised with the ongoing work on block patterns.
       * For now we keep the value of posts per page (`query.perPage`) from Query patterns
       * so as to preview the pattern as intended, without possible big previews.
       * During insertion, we need to override the Query's attributes that can be set in
       * the Placeholder and we unset the `perPage` value to be set appropriately by Query block.
       */

      if (block.name === 'core/query') {
        /**
         * We need to `cloneDeep` the Query's attributes, as `cloneBlock` does a swallow
         * copy of the block.
         */
        var queryAttributes = (0, _lodash.cloneDeep)(clone.attributes);
        Object.assign(queryAttributes.query, {
          inherit: query.inherit,
          postType: query.postType,
          perPage: null
        });
        return _objectSpread(_objectSpread({}, clone), {}, {
          attributes: queryAttributes
        });
      }

      return clone;
    });
    replaceBlocks(clientId, clonedBlocks);
  };

  var inheritToggleHelp = !!inherit ? (0, _i18n._x)('Inherit the global query depending on the URL.', 'Query block `inherit` option helping text') : (0, _i18n._x)('Customize the query arguments.', 'Query block `inherit` option helping text');
  return (0, _element.createElement)(_blockSetup.default, {
    blockName: blockName,
    useLayoutSetup: true,
    onVariationSelect: onVariationSelect,
    onBlockPatternSelect: onBlockPatternSelect
  }, (0, _element.createElement)("div", {
    className: "block-attributes-setup-container"
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Inherit query from URL'),
    checked: !!inherit,
    onChange: function onChange(value) {
      return updateQuery({
        inherit: !!value
      });
    },
    help: inheritToggleHelp
  }), !inherit && (0, _element.createElement)(_components.SelectControl, {
    options: postTypesSelectOptions,
    value: postType,
    label: (0, _i18n.__)('Post Type'),
    onChange: function onChange(newValue) {
      return updateQuery({
        postType: newValue
      });
    }
  })));
};

var _default = QueryBlockSetup;
exports.default = _default;
//# sourceMappingURL=query-block-setup.js.map