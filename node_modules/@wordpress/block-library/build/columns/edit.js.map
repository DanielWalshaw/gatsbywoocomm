{"version":3,"sources":["@wordpress/block-library/src/columns/edit.js"],"names":["ALLOWED_BLOCKS","ColumnsEditContainer","attributes","updateAlignment","updateColumns","clientId","verticalAlignment","select","count","blockEditorStore","getBlockCount","classes","blockProps","className","innerBlocksProps","allowedBlocks","orientation","renderAppender","value","Math","max","ColumnsEditContainerWrapper","dispatch","ownProps","registry","setAttributes","updateBlockAttributes","getBlockOrder","innerBlockClientIds","forEach","innerBlockClientId","previousColumns","newColumns","replaceInnerBlocks","getBlocks","innerBlocks","hasExplicitWidths","isAddingColumn","newColumnWidth","widths","width","Placeholder","name","blocksStore","getBlockVariations","getBlockType","getDefaultBlockVariation","blockType","defaultVariation","variations","nextVariation","ColumnsEdit","props","hasInnerBlocks","length","Component"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { dropRight, get, times } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody, RangeControl, Notice } from '@wordpress/components';\n\nimport {\n\tInspectorControls,\n\t__experimentalUseInnerBlocksProps as useInnerBlocksProps,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\t__experimentalBlockVariationPicker,\n\tuseBlockProps,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\nimport {\n\tcreateBlock,\n\tcreateBlocksFromInnerBlocksTemplate,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\thasExplicitPercentColumnWidths,\n\tgetMappedColumnWidths,\n\tgetRedistributedColumnWidths,\n\ttoWidthPrecision,\n} from './utils';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n */\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\nfunction ColumnsEditContainer( {\n\tattributes,\n\tupdateAlignment,\n\tupdateColumns,\n\tclientId,\n} ) {\n\tconst { verticalAlignment } = attributes;\n\n\tconst { count } = useSelect(\n\t\t( select ) => {\n\t\t\treturn {\n\t\t\t\tcount: select( blockEditorStore ).getBlockCount( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst classes = classnames( {\n\t\t[ `are-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t} );\n\n\tconst blockProps = useBlockProps( {\n\t\tclassName: classes,\n\t} );\n\tconst innerBlocksProps = useInnerBlocksProps( blockProps, {\n\t\tallowedBlocks: ALLOWED_BLOCKS,\n\t\torientation: 'horizontal',\n\t\trenderAppender: false,\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Columns' ) }\n\t\t\t\t\t\tvalue={ count }\n\t\t\t\t\t\tonChange={ ( value ) => updateColumns( count, value ) }\n\t\t\t\t\t\tmin={ 1 }\n\t\t\t\t\t\tmax={ Math.max( 6, count ) }\n\t\t\t\t\t/>\n\t\t\t\t\t{ count > 6 && (\n\t\t\t\t\t\t<Notice status=\"warning\" isDismissible={ false }>\n\t\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t\t'This column count exceeds the recommended amount and may cause visual breakage.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</Notice>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<div { ...innerBlocksProps } />\n\t\t</>\n\t);\n}\n\nconst ColumnsEditContainerWrapper = withDispatch(\n\t( dispatch, ownProps, registry ) => ( {\n\t\t/**\n\t\t * Update all child Column blocks with a new vertical alignment setting\n\t\t * based on whatever alignment is passed in. This allows change to parent\n\t\t * to overide anything set on a individual column basis.\n\t\t *\n\t\t * @param {string} verticalAlignment the vertical alignment setting\n\t\t */\n\t\tupdateAlignment( verticalAlignment ) {\n\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\tconst { updateBlockAttributes } = dispatch( blockEditorStore );\n\t\t\tconst { getBlockOrder } = registry.select( blockEditorStore );\n\n\t\t\t// Update own alignment.\n\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t// Update all child Column Blocks to match\n\t\t\tconst innerBlockClientIds = getBlockOrder( clientId );\n\t\t\tinnerBlockClientIds.forEach( ( innerBlockClientId ) => {\n\t\t\t\tupdateBlockAttributes( innerBlockClientId, {\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Updates the column count, including necessary revisions to child Column\n\t\t * blocks to grant required or redistribute available space.\n\t\t *\n\t\t * @param {number} previousColumns Previous column count.\n\t\t * @param {number} newColumns      New column count.\n\t\t */\n\t\tupdateColumns( previousColumns, newColumns ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks } = dispatch( blockEditorStore );\n\t\t\tconst { getBlocks } = registry.select( blockEditorStore );\n\n\t\t\tlet innerBlocks = getBlocks( clientId );\n\t\t\tconst hasExplicitWidths = hasExplicitPercentColumnWidths(\n\t\t\t\tinnerBlocks\n\t\t\t);\n\n\t\t\t// Redistribute available width for existing inner blocks.\n\t\t\tconst isAddingColumn = newColumns > previousColumns;\n\n\t\t\tif ( isAddingColumn && hasExplicitWidths ) {\n\t\t\t\t// If adding a new column, assign width to the new column equal to\n\t\t\t\t// as if it were `1 / columns` of the total available space.\n\t\t\t\tconst newColumnWidth = toWidthPrecision( 100 / newColumns );\n\n\t\t\t\t// Redistribute in consideration of pending block insertion as\n\t\t\t\t// constraining the available working width.\n\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t100 - newColumnWidth\n\t\t\t\t);\n\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...getMappedColumnWidths( innerBlocks, widths ),\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column', {\n\t\t\t\t\t\t\twidth: newColumnWidth,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else if ( isAddingColumn ) {\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column' );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\t\tinnerBlocks = dropRight(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpreviousColumns - newColumns\n\t\t\t\t);\n\n\t\t\t\tif ( hasExplicitWidths ) {\n\t\t\t\t\t// Redistribute as if block is already removed.\n\t\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t\t100\n\t\t\t\t\t);\n\n\t\t\t\t\tinnerBlocks = getMappedColumnWidths( innerBlocks, widths );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks );\n\t\t},\n\t} )\n)( ColumnsEditContainer );\n\nfunction Placeholder( { clientId, name, setAttributes } ) {\n\tconst { blockType, defaultVariation, variations } = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockVariations,\n\t\t\t\tgetBlockType,\n\t\t\t\tgetDefaultBlockVariation,\n\t\t\t} = select( blocksStore );\n\n\t\t\treturn {\n\t\t\t\tblockType: getBlockType( name ),\n\t\t\t\tdefaultVariation: getDefaultBlockVariation( name, 'block' ),\n\t\t\t\tvariations: getBlockVariations( name, 'block' ),\n\t\t\t};\n\t\t},\n\t\t[ name ]\n\t);\n\tconst { replaceInnerBlocks } = useDispatch( blockEditorStore );\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<__experimentalBlockVariationPicker\n\t\t\t\ticon={ get( blockType, [ 'icon', 'src' ] ) }\n\t\t\t\tlabel={ get( blockType, [ 'title' ] ) }\n\t\t\t\tvariations={ variations }\n\t\t\t\tonSelect={ ( nextVariation = defaultVariation ) => {\n\t\t\t\t\tif ( nextVariation.attributes ) {\n\t\t\t\t\t\tsetAttributes( nextVariation.attributes );\n\t\t\t\t\t}\n\t\t\t\t\tif ( nextVariation.innerBlocks ) {\n\t\t\t\t\t\treplaceInnerBlocks(\n\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate(\n\t\t\t\t\t\t\t\tnextVariation.innerBlocks\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} }\n\t\t\t\tallowSkip\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nconst ColumnsEdit = ( props ) => {\n\tconst { clientId } = props;\n\tconst hasInnerBlocks = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blockEditorStore ).getBlocks( clientId ).length > 0,\n\t\t[ clientId ]\n\t);\n\tconst Component = hasInnerBlocks\n\t\t? ColumnsEditContainerWrapper\n\t\t: Placeholder;\n\n\treturn <Component { ...props } />;\n};\n\nexport default ColumnsEdit;\n"]}