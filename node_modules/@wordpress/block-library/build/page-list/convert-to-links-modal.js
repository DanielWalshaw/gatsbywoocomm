"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConvertToLinksModal;
exports.convertSelectedBlockToNavigationLinks = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

/**
 * WordPress dependencies
 */
var PAGE_FIELDS = ['id', 'title', 'link', 'type', 'parent'];
var MAX_PAGE_COUNT = 100;

var convertSelectedBlockToNavigationLinks = function convertSelectedBlockToNavigationLinks(_ref) {
  var pages = _ref.pages,
      clientId = _ref.clientId,
      replaceBlock = _ref.replaceBlock,
      createBlock = _ref.createBlock;
  return function () {
    if (!pages) {
      return;
    }

    var linkMap = {};
    var navigationLinks = [];
    pages.forEach(function (_ref2) {
      var _linkMap$id$innerBloc, _linkMap$id;

      var id = _ref2.id,
          title = _ref2.title,
          url = _ref2.link,
          type = _ref2.type,
          parent = _ref2.parent;
      // See if a placeholder exists. This is created if children appear before parents in list
      var innerBlocks = (_linkMap$id$innerBloc = (_linkMap$id = linkMap[id]) === null || _linkMap$id === void 0 ? void 0 : _linkMap$id.innerBlocks) !== null && _linkMap$id$innerBloc !== void 0 ? _linkMap$id$innerBloc : [];
      linkMap[id] = createBlock('core/navigation-link', {
        id: id,
        label: title.rendered,
        url: url,
        type: type,
        kind: 'post-type'
      }, innerBlocks);

      if (!parent) {
        navigationLinks.push(linkMap[id]);
      } else {
        if (!linkMap[parent]) {
          // Use a placeholder if the child appears before parent in list
          linkMap[parent] = {
            innerBlocks: []
          };
        }

        var parentLinkInnerBlocks = linkMap[parent].innerBlocks;
        parentLinkInnerBlocks.push(linkMap[id]);
      }
    });
    replaceBlock(clientId, navigationLinks);
  };
};

exports.convertSelectedBlockToNavigationLinks = convertSelectedBlockToNavigationLinks;

function ConvertToLinksModal(_ref3) {
  var onClose = _ref3.onClose,
      clientId = _ref3.clientId;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_coreData.store),
        getEntityRecords = _select.getEntityRecords,
        hasFinishedResolution = _select.hasFinishedResolution;

    var query = ['postType', 'page', {
      per_page: MAX_PAGE_COUNT,
      _fields: PAGE_FIELDS,
      // TODO: When https://core.trac.wordpress.org/ticket/39037 REST API support for multiple orderby
      // values is resolved, update 'orderby' to [ 'menu_order', 'post_title' ] to provide a consistent
      // sort.
      orderby: 'menu_order',
      order: 'asc'
    }];
    return {
      pages: getEntityRecords.apply(void 0, query),
      pagesFinished: hasFinishedResolution('getEntityRecords', query)
    };
  }, [clientId]),
      pages = _useSelect.pages,
      pagesFinished = _useSelect.pagesFinished;

  var _useDispatch = (0, _data.useDispatch)(_blockEditor.store),
      replaceBlock = _useDispatch.replaceBlock;

  return (0, _element.createElement)(_components.Modal, {
    closeLabel: (0, _i18n.__)('Close'),
    onRequestClose: onClose,
    title: (0, _i18n.__)('Convert to links'),
    className: 'wp-block-page-list-modal',
    aria: {
      describedby: 'wp-block-page-list-modal__description'
    }
  }, (0, _element.createElement)("p", {
    id: 'wp-block-page-list-modal__description'
  }, (0, _i18n.__)('To edit this navigation menu, convert it to single page links. This allows you to add, re-order, remove items, or edit their labels.')), (0, _element.createElement)("p", null, (0, _i18n.__)("Note: if you add new pages to your site, you'll need to add them to your navigation menu.")), (0, _element.createElement)("div", {
    className: "wp-block-page-list-modal-buttons"
  }, (0, _element.createElement)(_components.Button, {
    isTertiary: true,
    onClick: onClose
  }, (0, _i18n.__)('Cancel')), (0, _element.createElement)(_components.Button, {
    isPrimary: true,
    disabled: !pagesFinished,
    onClick: convertSelectedBlockToNavigationLinks({
      pages: pages,
      replaceBlock: replaceBlock,
      clientId: clientId,
      createBlock: _blocks.createBlock
    })
  }, (0, _i18n.__)('Convert'))));
}
//# sourceMappingURL=convert-to-links-modal.js.map