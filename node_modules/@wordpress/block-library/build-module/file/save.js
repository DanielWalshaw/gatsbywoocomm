import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { RichText, useBlockProps } from '@wordpress/block-editor';
import { __, sprintf } from '@wordpress/i18n';
export default function save(_ref) {
  var attributes = _ref.attributes;
  var href = attributes.href,
      fileName = attributes.fileName,
      textLinkHref = attributes.textLinkHref,
      textLinkTarget = attributes.textLinkTarget,
      showDownloadButton = attributes.showDownloadButton,
      downloadButtonText = attributes.downloadButtonText,
      displayPreview = attributes.displayPreview,
      previewHeight = attributes.previewHeight;
  var pdfEmbedLabel = RichText.isEmpty(fileName) ? __('PDF embed') : sprintf(
  /* translators: %s: filename. */
  __('Embed of %s.'), fileName);
  return href && createElement("div", useBlockProps.save(), displayPreview && createElement(Fragment, null, createElement("object", {
    className: "wp-block-file__embed",
    data: href,
    type: "application/pdf",
    style: {
      width: '100%',
      height: "".concat(previewHeight, "px")
    },
    "aria-label": pdfEmbedLabel
  })), !RichText.isEmpty(fileName) && createElement("a", {
    href: textLinkHref,
    target: textLinkTarget,
    rel: textLinkTarget ? 'noreferrer noopener' : undefined
  }, createElement(RichText.Content, {
    value: fileName
  })), showDownloadButton && createElement("a", {
    href: href,
    className: "wp-block-file__button",
    download: true
  }, createElement(RichText.Content, {
    value: downloadButtonText
  })));
}
//# sourceMappingURL=save.js.map