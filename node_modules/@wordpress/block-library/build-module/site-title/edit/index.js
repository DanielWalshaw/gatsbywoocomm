import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useEntityProp } from '@wordpress/core-data';
import { __ } from '@wordpress/i18n';
import { RichText, AlignmentControl, BlockControls, useBlockProps } from '@wordpress/block-editor';
import { createBlock, getDefaultBlockName } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import LevelControl from './level-toolbar';
export default function SiteTitleEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      insertBlocksAfter = _ref.insertBlocksAfter;
  var level = attributes.level,
      textAlign = attributes.textAlign;

  var _useEntityProp = useEntityProp('root', 'site', 'title'),
      _useEntityProp2 = _slicedToArray(_useEntityProp, 2),
      title = _useEntityProp2[0],
      setTitle = _useEntityProp2[1];

  var TagName = level === 0 ? 'p' : "h".concat(level);
  var blockProps = useBlockProps({
    className: classnames(_defineProperty({}, "has-text-align-".concat(textAlign), textAlign))
  });
  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, createElement(LevelControl, {
    level: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  }), createElement(AlignmentControl, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement(TagName, blockProps, createElement(RichText, {
    tagName: "a",
    style: {
      display: 'inline-block'
    },
    "aria-label": __('Site title text'),
    placeholder: __('Write site titleâ€¦'),
    value: title,
    onChange: setTitle,
    allowedFormats: [],
    disableLineBreaks: true,
    __unstableOnSplitAtEnd: function __unstableOnSplitAtEnd() {
      return insertBlocksAfter(createBlock(getDefaultBlockName()));
    }
  })));
}
//# sourceMappingURL=index.js.map