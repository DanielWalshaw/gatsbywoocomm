import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { ToggleControl, PanelBody } from '@wordpress/components';
import { InspectorControls, RichText, BlockControls, AlignmentToolbar, useBlockProps } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
export default function PostNavigationLinkEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      type = _ref$attributes.type,
      label = _ref$attributes.label,
      showTitle = _ref$attributes.showTitle,
      textAlign = _ref$attributes.textAlign,
      setAttributes = _ref.setAttributes;
  var isNext = type === 'next';
  var placeholder = isNext ? __('Next') : __('Previous');
  var ariaLabel = isNext ? __('Next post') : __('Previous post');
  var blockProps = useBlockProps({
    className: classnames(_defineProperty({}, "has-text-align-".concat(textAlign), textAlign))
  });
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, null, createElement(ToggleControl, {
    label: __('Display the title as a link'),
    help: __('If you have entered a custom label, it will be prepended before the title.'),
    checked: !!showTitle,
    onChange: function onChange() {
      return setAttributes({
        showTitle: !showTitle
      });
    }
  }))), createElement(BlockControls, null, createElement(AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement("div", blockProps, createElement(RichText, {
    tagName: "a",
    "aria-label": ariaLabel,
    placeholder: placeholder,
    value: label,
    allowedFormats: ['core/bold', 'core/italic'],
    onChange: function onChange(newLabel) {
      return setAttributes({
        label: newLabel
      });
    }
  })));
}
//# sourceMappingURL=edit.js.map