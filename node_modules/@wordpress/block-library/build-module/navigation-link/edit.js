import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
import { escape } from 'lodash';
/**
 * WordPress dependencies
 */

import { createBlock } from '@wordpress/blocks';
import { useSelect, useDispatch } from '@wordpress/data';
import { KeyboardShortcuts, PanelBody, Popover, TextControl, TextareaControl, ToolbarButton, ToolbarGroup } from '@wordpress/components';
import { rawShortcut, displayShortcut } from '@wordpress/keycodes';
import { __, sprintf } from '@wordpress/i18n';
import { BlockControls, InnerBlocks, __experimentalUseInnerBlocksProps as useInnerBlocksProps, InspectorControls, RichText, __experimentalLinkControl as LinkControl, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import { isURL, prependHTTP } from '@wordpress/url';
import { Fragment, useState, useEffect, useRef, createInterpolateElement } from '@wordpress/element';
import { placeCaretAtHorizontalEdge } from '@wordpress/dom';
import { link as linkIcon, addSubmenu } from '@wordpress/icons';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { ItemSubmenuIcon } from './icons';
var _apiVersion$name$cate = {
  apiVersion: 2,
  name: "core/navigation-link",
  category: "design",
  parent: ["core/navigation"],
  attributes: {
    label: {
      type: "string"
    },
    type: {
      type: "string"
    },
    description: {
      type: "string"
    },
    rel: {
      type: "string"
    },
    id: {
      type: "number"
    },
    opensInNewTab: {
      type: "boolean",
      "default": false
    },
    url: {
      type: "string"
    },
    title: {
      type: "string"
    },
    kind: {
      type: "string"
    }
  },
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "style"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "wp-block-navigation-link-editor",
  style: "wp-block-navigation-link"
},
    name = _apiVersion$name$cate.name;
var ALLOWED_BLOCKS = ['core/navigation-link', 'core/spacer'];
var MAX_NESTING = 5;
/**
 * A React hook to determine if it's dragging within the target element.
 *
 * @typedef {import('@wordpress/element').RefObject} RefObject
 *
 * @param {RefObject<HTMLElement>} elementRef The target elementRef object.
 *
 * @return {boolean} Is dragging within the target element.
 */

var useIsDraggingWithin = function useIsDraggingWithin(elementRef) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDraggingWithin = _useState2[0],
      setIsDraggingWithin = _useState2[1];

  useEffect(function () {
    var ownerDocument = elementRef.current.ownerDocument;

    function handleDragStart(event) {
      // Check the first time when the dragging starts.
      handleDragEnter(event);
    } // Set to false whenever the user cancel the drag event by either releasing the mouse or press Escape.


    function handleDragEnd() {
      setIsDraggingWithin(false);
    }

    function handleDragEnter(event) {
      // Check if the current target is inside the item element.
      if (elementRef.current.contains(event.target)) {
        setIsDraggingWithin(true);
      } else {
        setIsDraggingWithin(false);
      }
    } // Bind these events to the document to catch all drag events.
    // Ideally, we can also use `event.relatedTarget`, but sadly that
    // doesn't work in Safari.


    ownerDocument.addEventListener('dragstart', handleDragStart);
    ownerDocument.addEventListener('dragend', handleDragEnd);
    ownerDocument.addEventListener('dragenter', handleDragEnter);
    return function () {
      ownerDocument.removeEventListener('dragstart', handleDragStart);
      ownerDocument.removeEventListener('dragend', handleDragEnd);
      ownerDocument.removeEventListener('dragenter', handleDragEnter);
    };
  }, []);
  return isDraggingWithin;
};
/**
 * Given the Link block's type attribute, return the query params to give to
 * /wp/v2/search.
 *
 * @param {string} type Link block's type attribute.
 * @param {string} kind Link block's entity of kind (post-type|taxonomy)
 * @return {{ type?: string, subtype?: string }} Search query params.
 */


function getSuggestionsQuery(type, kind) {
  switch (type) {
    case 'post':
    case 'page':
      return {
        type: 'post',
        subtype: type
      };

    case 'category':
      return {
        type: 'term',
        subtype: 'category'
      };

    case 'tag':
      return {
        type: 'term',
        subtype: 'post_tag'
      };

    case 'post_format':
      return {
        type: 'post-format'
      };

    default:
      if (kind === 'taxonomy') {
        return {
          type: 'term',
          subtype: type
        };
      }

      if (kind === 'post-type') {
        return {
          type: 'post',
          subtype: type
        };
      }

      return {};
  }
}

export default function NavigationLinkEdit(_ref) {
  var _style$color, _style$color2, _classnames, _style$color3, _style$color4;

  var attributes = _ref.attributes,
      isSelected = _ref.isSelected,
      setAttributes = _ref.setAttributes,
      insertBlocksAfter = _ref.insertBlocksAfter,
      mergeBlocks = _ref.mergeBlocks,
      onReplace = _ref.onReplace,
      context = _ref.context,
      clientId = _ref.clientId;
  var label = attributes.label,
      type = attributes.type,
      opensInNewTab = attributes.opensInNewTab,
      url = attributes.url,
      description = attributes.description,
      rel = attributes.rel,
      title = attributes.title,
      kind = attributes.kind;
  var link = {
    url: url,
    opensInNewTab: opensInNewTab
  };
  var textColor = context.textColor,
      backgroundColor = context.backgroundColor,
      style = context.style,
      showSubmenuIcon = context.showSubmenuIcon;

  var _useDispatch = useDispatch(coreStore),
      saveEntityRecord = _useDispatch.saveEntityRecord;

  var _useDispatch2 = useDispatch(blockEditorStore),
      insertBlock = _useDispatch2.insertBlock;

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isLinkOpen = _useState4[0],
      setIsLinkOpen = _useState4[1];

  var listItemRef = useRef(null);
  var isDraggingWithin = useIsDraggingWithin(listItemRef);

  var itemLabelPlaceholder = __('Add linkâ€¦');

  var ref = useRef();

  var _useSelect = useSelect(function (select) {
    var _getClientIdsOfDescen;

    var _select = select(blockEditorStore),
        getClientIdsOfDescendants = _select.getClientIdsOfDescendants,
        hasSelectedInnerBlock = _select.hasSelectedInnerBlock,
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        getBlockParentsByBlockName = _select.getBlockParentsByBlockName;

    var selectedBlockId = getSelectedBlockClientId();
    var descendants = getClientIdsOfDescendants([clientId]).length;
    return {
      isAtMaxNesting: getBlockParentsByBlockName(clientId, name).length >= MAX_NESTING,
      isParentOfSelectedBlock: hasSelectedInnerBlock(clientId, true),
      isImmediateParentOfSelectedBlock: hasSelectedInnerBlock(clientId, false),
      hasDescendants: !!descendants,
      selectedBlockHasDescendants: !!((_getClientIdsOfDescen = getClientIdsOfDescendants([selectedBlockId])) !== null && _getClientIdsOfDescen !== void 0 && _getClientIdsOfDescen.length),
      numberOfDescendants: descendants,
      userCanCreatePages: select(coreStore).canUser('create', 'pages'),
      userCanCreatePosts: select(coreStore).canUser('create', 'posts')
    };
  }, [clientId]),
      isAtMaxNesting = _useSelect.isAtMaxNesting,
      isParentOfSelectedBlock = _useSelect.isParentOfSelectedBlock,
      isImmediateParentOfSelectedBlock = _useSelect.isImmediateParentOfSelectedBlock,
      hasDescendants = _useSelect.hasDescendants,
      selectedBlockHasDescendants = _useSelect.selectedBlockHasDescendants,
      numberOfDescendants = _useSelect.numberOfDescendants,
      userCanCreatePages = _useSelect.userCanCreatePages,
      userCanCreatePosts = _useSelect.userCanCreatePosts;
  /**
   * Insert a link block when submenu is added.
   */


  function insertLinkBlock() {
    var insertionPoint = numberOfDescendants;
    var blockToInsert = createBlock('core/navigation-link');
    insertBlock(blockToInsert, insertionPoint, clientId);
  } // Show the LinkControl on mount if the URL is empty
  // ( When adding a new menu item)
  // This can't be done in the useState call because it conflicts
  // with the autofocus behavior of the BlockListBlock component.


  useEffect(function () {
    if (!url) {
      setIsLinkOpen(true);
    }
  }, []);
  /**
   * The hook shouldn't be necessary but due to a focus loss happening
   * when selecting a suggestion in the link popover, we force close on block unselection.
   */

  useEffect(function () {
    if (!isSelected) {
      setIsLinkOpen(false);
    }
  }, [isSelected]); // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.

  useEffect(function () {
    if (isLinkOpen && url) {
      // Does this look like a URL and have something TLD-ish?
      if (isURL(prependHTTP(label)) && /^.+\.[a-z]+/.test(label)) {
        // Focus and select the label text.
        selectLabelText();
      } else {
        // Focus it (but do not select).
        placeCaretAtHorizontalEdge(ref.current, true);
      }
    }
  }, [url]);
  /**
   * Focus the Link label text and select it.
   */

  function selectLabelText() {
    ref.current.focus();
    var ownerDocument = ref.current.ownerDocument;
    var defaultView = ownerDocument.defaultView;
    var selection = defaultView.getSelection();
    var range = ownerDocument.createRange(); // Get the range of the current ref contents so we can add this range to the selection.

    range.selectNodeContents(ref.current);
    selection.removeAllRanges();
    selection.addRange(range);
  }

  var userCanCreate = false;

  if (!type || type === 'page') {
    userCanCreate = userCanCreatePages;
  } else if (type === 'post') {
    userCanCreate = userCanCreatePosts;
  }

  function handleCreate(_x) {
    return _handleCreate.apply(this, arguments);
  }

  function _handleCreate() {
    _handleCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pageTitle) {
      var postType, page;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              postType = type || 'page';
              _context.next = 3;
              return saveEntityRecord('postType', postType, {
                title: pageTitle,
                status: 'draft'
              });

            case 3:
              page = _context.sent;
              return _context.abrupt("return", {
                id: page.id,
                type: postType,
                title: page.title.rendered,
                url: page.link,
                kind: 'post-type'
              });

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _handleCreate.apply(this, arguments);
  }

  var blockProps = useBlockProps({
    ref: listItemRef,
    className: classnames((_classnames = {
      'is-editing': isSelected || isParentOfSelectedBlock,
      'is-dragging-within': isDraggingWithin,
      'has-link': !!url,
      'has-child': hasDescendants,
      'has-text-color': !!textColor || !!(style !== null && style !== void 0 && (_style$color = style.color) !== null && _style$color !== void 0 && _style$color.text)
    }, _defineProperty(_classnames, "has-".concat(textColor, "-color"), !!textColor), _defineProperty(_classnames, 'has-background', !!backgroundColor || !!(style !== null && style !== void 0 && (_style$color2 = style.color) !== null && _style$color2 !== void 0 && _style$color2.background)), _defineProperty(_classnames, "has-".concat(backgroundColor, "-background-color"), !!backgroundColor), _classnames)),
    style: {
      color: style === null || style === void 0 ? void 0 : (_style$color3 = style.color) === null || _style$color3 === void 0 ? void 0 : _style$color3.text,
      backgroundColor: style === null || style === void 0 ? void 0 : (_style$color4 = style.color) === null || _style$color4 === void 0 ? void 0 : _style$color4.background
    }
  });

  if (!url) {
    blockProps.onClick = function () {
      return setIsLinkOpen(true);
    };
  }

  var innerBlocksProps = useInnerBlocksProps({
    className: classnames('wp-block-navigation-link__container', {
      'is-parent-of-selected-block': isParentOfSelectedBlock
    })
  }, {
    allowedBlocks: ALLOWED_BLOCKS,
    renderAppender: isSelected && hasDescendants || isImmediateParentOfSelectedBlock && !selectedBlockHasDescendants || // Show the appender while dragging to allow inserting element between item and the appender.
    hasDescendants ? InnerBlocks.DefaultAppender : false,
    __experimentalAppenderTagName: 'li'
  });
  var classes = classnames('wp-block-navigation-link__content', {
    'wp-block-navigation-link__placeholder': !url
  });
  var missingText = '';

  switch (type) {
    case 'post':
      /* translators: label for missing post in navigation link block */
      missingText = __('Select a post');
      break;

    case 'page':
      /* translators: label for missing page in navigation link block */
      missingText = __('Select a page');
      break;

    case 'category':
      /* translators: label for missing category in navigation link block */
      missingText = __('Select a category');
      break;

    case 'tag':
      /* translators: label for missing tag in navigation link block */
      missingText = __('Select a tag');
      break;

    default:
      /* translators: label for missing values in navigation link block */
      missingText = __('Add a link');
  }

  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: _defineProperty({}, rawShortcut.primary('k'), function () {
      return setIsLinkOpen(true);
    })
  }), createElement(ToolbarButton, {
    name: "link",
    icon: linkIcon,
    title: __('Link'),
    shortcut: displayShortcut.primary('k'),
    onClick: function onClick() {
      return setIsLinkOpen(true);
    }
  }), !isAtMaxNesting && createElement(ToolbarButton, {
    name: "submenu",
    icon: addSubmenu,
    title: __('Add submenu'),
    onClick: insertLinkBlock
  }))), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(TextareaControl, {
    value: description || '',
    onChange: function onChange(descriptionValue) {
      setAttributes({
        description: descriptionValue
      });
    },
    label: __('Description'),
    help: __('The description will be displayed in the menu if the current theme supports it.')
  }), createElement(TextControl, {
    value: title || '',
    onChange: function onChange(titleValue) {
      setAttributes({
        title: titleValue
      });
    },
    label: __('Link title'),
    autoComplete: "off"
  }), createElement(TextControl, {
    value: rel || '',
    onChange: function onChange(relValue) {
      setAttributes({
        rel: relValue
      });
    },
    label: __('Link rel'),
    autoComplete: "off"
  }))), createElement("li", blockProps, createElement("a", {
    className: classes
  }, !url ? createElement("div", {
    className: "wp-block-navigation-link__placeholder-text"
  }, createElement(KeyboardShortcuts, {
    shortcuts: {
      enter: function enter() {
        return isSelected && setIsLinkOpen(true);
      }
    }
  }), missingText) : createElement(RichText, {
    ref: ref,
    identifier: "label",
    className: "wp-block-navigation-link__label",
    value: label,
    onChange: function onChange(labelValue) {
      return setAttributes({
        label: labelValue
      });
    },
    onMerge: mergeBlocks,
    onReplace: onReplace,
    __unstableOnSplitAtEnd: function __unstableOnSplitAtEnd() {
      return insertBlocksAfter(createBlock('core/navigation-link'));
    },
    "aria-label": __('Navigation link text'),
    placeholder: itemLabelPlaceholder,
    withoutInteractiveFormatting: true,
    allowedFormats: ['core/bold', 'core/italic', 'core/image', 'core/strikethrough'],
    onClick: function onClick() {
      if (!url) {
        setIsLinkOpen(true);
      }
    }
  }), isLinkOpen && createElement(Popover, {
    position: "bottom center",
    onClose: function onClose() {
      return setIsLinkOpen(false);
    },
    anchorRef: listItemRef.current
  }, createElement(KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: {
      escape: function escape() {
        return setIsLinkOpen(false);
      }
    }
  }), createElement(LinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: link,
    showInitialSuggestions: true,
    withCreateSuggestion: userCanCreate,
    createSuggestion: handleCreate,
    createSuggestionButtonText: function createSuggestionButtonText(searchTerm) {
      var format;

      if (type === 'post') {
        /* translators: %s: search term. */
        format = __('Create draft post: <mark>%s</mark>');
      } else {
        /* translators: %s: search term. */
        format = __('Create draft page: <mark>%s</mark>');
      }

      return createInterpolateElement(sprintf(format, searchTerm), {
        mark: createElement("mark", null)
      });
    },
    noDirectEntry: !!type,
    noURLSuggestion: !!type,
    suggestionsQuery: getSuggestionsQuery(type, kind),
    onChange: function onChange() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$title = _ref3.title,
          newTitle = _ref3$title === void 0 ? '' : _ref3$title,
          _ref3$url = _ref3.url,
          newURL = _ref3$url === void 0 ? '' : _ref3$url,
          newOpensInNewTab = _ref3.opensInNewTab,
          id = _ref3.id,
          _ref3$kind = _ref3.kind,
          newKind = _ref3$kind === void 0 ? '' : _ref3$kind,
          _ref3$type = _ref3.type,
          newType = _ref3$type === void 0 ? '' : _ref3$type;

      return setAttributes(_objectSpread(_objectSpread({
        url: encodeURI(newURL),
        label: function () {
          var normalizedTitle = newTitle.replace(/http(s?):\/\//gi, '');
          var normalizedURL = newURL.replace(/http(s?):\/\//gi, '');

          if (newTitle !== '' && normalizedTitle !== normalizedURL && label !== newTitle) {
            return escape(newTitle);
          } else if (label) {
            return label;
          } // If there's no label, add the URL.


          return escape(normalizedURL);
        }(),
        opensInNewTab: newOpensInNewTab,
        id: id
      }, newKind && {
        kind: newKind
      }), newType && newType !== 'URL' && newType !== 'post-format' && {
        type: newType
      }));
    }
  }))), hasDescendants && showSubmenuIcon && createElement("span", {
    className: "wp-block-navigation-link__submenu-icon"
  }, createElement(ItemSubmenuIcon, null)), createElement("ul", innerBlocksProps)));
}
//# sourceMappingURL=edit.js.map