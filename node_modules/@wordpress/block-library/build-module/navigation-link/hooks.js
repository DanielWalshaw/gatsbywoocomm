import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { category, page, postTitle, tag, customPostType } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import fallbackVariations from './fallback-variations';

function getIcon(variationName) {
  switch (variationName) {
    case 'post':
      return postTitle;

    case 'page':
      return page;

    case 'tag':
      return tag;

    case 'category':
      return category;

    default:
      return customPostType;
  }
}

export function enhanceNavigationLinkVariations(settings, name) {
  if (name !== 'core/navigation-link') {
    return settings;
  } // Fallback handling may be deleted after supported WP ranges understand the `variations`
  // property when passed to register_block_type_from_metadata in index.php


  if (!settings.variations) {
    return _objectSpread(_objectSpread({}, settings), {}, {
      variations: fallbackVariations
    });
  } // Otherwise decorate server passed variations with an icon and isActive function


  if (settings.variations) {
    var isActive = function isActive(blockAttributes, variationAttributes) {
      return blockAttributes.type === variationAttributes.type;
    };

    var variations = settings.variations.map(function (variation) {
      return _objectSpread(_objectSpread(_objectSpread({}, variation), !variation.icon && {
        icon: getIcon(variation.name)
      }), !variation.isActive && {
        isActive: isActive
      });
    });
    return _objectSpread(_objectSpread({}, settings), {}, {
      variations: variations
    });
  }

  return settings;
}
//# sourceMappingURL=hooks.js.map