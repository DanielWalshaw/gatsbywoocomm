import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { omit } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { RichText, getColorClassName, useBlockProps, __experimentalGetGradientClass, __experimentalGetColorClassesAndStyles as getColorClassesAndStyles } from '@wordpress/block-editor';
import { compose } from '@wordpress/compose';

var migrateBorderRadius = function migrateBorderRadius(attributes) {
  var borderRadius = attributes.borderRadius,
      newAttributes = _objectWithoutProperties(attributes, ["borderRadius"]);

  if (!borderRadius && borderRadius !== 0) {
    return newAttributes;
  }

  return _objectSpread(_objectSpread({}, newAttributes), {}, {
    style: _objectSpread(_objectSpread({}, newAttributes.style), {}, {
      border: {
        radius: borderRadius
      }
    })
  });
};

var migrateCustomColorsAndGradients = function migrateCustomColorsAndGradients(attributes) {
  if (!attributes.customTextColor && !attributes.customBackgroundColor && !attributes.customGradient) {
    return attributes;
  }

  var style = {
    color: {}
  };

  if (attributes.customTextColor) {
    style.color.text = attributes.customTextColor;
  }

  if (attributes.customBackgroundColor) {
    style.color.background = attributes.customBackgroundColor;
  }

  if (attributes.customGradient) {
    style.color.gradient = attributes.customGradient;
  }

  return _objectSpread(_objectSpread({}, omit(attributes, ['customTextColor', 'customBackgroundColor', 'customGradient'])), {}, {
    style: style
  });
};

var oldColorsMigration = function oldColorsMigration(attributes) {
  return migrateCustomColorsAndGradients(omit(_objectSpread(_objectSpread({}, attributes), {}, {
    customTextColor: attributes.textColor && '#' === attributes.textColor[0] ? attributes.textColor : undefined,
    customBackgroundColor: attributes.color && '#' === attributes.color[0] ? attributes.color : undefined
  }), ['color', 'textColor']));
};

var blockAttributes = {
  url: {
    type: 'string',
    source: 'attribute',
    selector: 'a',
    attribute: 'href'
  },
  title: {
    type: 'string',
    source: 'attribute',
    selector: 'a',
    attribute: 'title'
  },
  text: {
    type: 'string',
    source: 'html',
    selector: 'a'
  }
};
var deprecated = [{
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true
    },
    reusable: false,
    __experimentalSelector: '.wp-block-button__link'
  },
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    },
    width: {
      type: 'number'
    }
  }),
  save: function save(_ref) {
    var attributes = _ref.attributes,
        className = _ref.className;
    var borderRadius = attributes.borderRadius,
        linkTarget = attributes.linkTarget,
        rel = attributes.rel,
        text = attributes.text,
        title = attributes.title,
        url = attributes.url,
        width = attributes.width;
    var colorProps = getColorClassesAndStyles(attributes);
    var buttonClasses = classnames('wp-block-button__link', colorProps.className, {
      'no-border-radius': borderRadius === 0
    });

    var buttonStyle = _objectSpread({
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    }, colorProps.style); // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.


    var wrapperClasses = classnames(className, _defineProperty({}, "has-custom-width wp-block-button__width-".concat(width), width));
    return createElement("div", useBlockProps.save({
      className: wrapperClasses
    }), createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },
  migrate: migrateBorderRadius
}, {
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true
    },
    reusable: false,
    __experimentalSelector: '.wp-block-button__link'
  },
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    },
    width: {
      type: 'number'
    }
  }),
  save: function save(_ref2) {
    var attributes = _ref2.attributes,
        className = _ref2.className;
    var borderRadius = attributes.borderRadius,
        linkTarget = attributes.linkTarget,
        rel = attributes.rel,
        text = attributes.text,
        title = attributes.title,
        url = attributes.url,
        width = attributes.width;
    var colorProps = getColorClassesAndStyles(attributes);
    var buttonClasses = classnames('wp-block-button__link', colorProps.className, {
      'no-border-radius': borderRadius === 0
    });

    var buttonStyle = _objectSpread({
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    }, colorProps.style); // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.


    var wrapperClasses = classnames(className, _defineProperty({}, "has-custom-width wp-block-button__width-".concat(width), width));
    return createElement("div", useBlockProps.save({
      className: wrapperClasses
    }), createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },
  migrate: migrateBorderRadius
}, {
  supports: {
    align: true,
    alignWide: false,
    color: {
      gradients: true
    }
  },
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    }
  }),
  save: function save(_ref3) {
    var attributes = _ref3.attributes;
    var borderRadius = attributes.borderRadius,
        linkTarget = attributes.linkTarget,
        rel = attributes.rel,
        text = attributes.text,
        title = attributes.title,
        url = attributes.url;
    var buttonClasses = classnames('wp-block-button__link', {
      'no-border-radius': borderRadius === 0
    });
    var buttonStyle = {
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    };
    return createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    });
  },
  migrate: migrateBorderRadius
}, {
  supports: {
    align: true,
    alignWide: false
  },
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    }
  }),
  isEligible: function isEligible(attributes) {
    return !!attributes.customTextColor || !!attributes.customBackgroundColor || !!attributes.customGradient;
  },
  migrate: compose(migrateBorderRadius, migrateCustomColorsAndGradients),
  save: function save(_ref4) {
    var _classnames3;

    var attributes = _ref4.attributes;
    var backgroundColor = attributes.backgroundColor,
        borderRadius = attributes.borderRadius,
        customBackgroundColor = attributes.customBackgroundColor,
        customTextColor = attributes.customTextColor,
        customGradient = attributes.customGradient,
        linkTarget = attributes.linkTarget,
        gradient = attributes.gradient,
        rel = attributes.rel,
        text = attributes.text,
        textColor = attributes.textColor,
        title = attributes.title,
        url = attributes.url;
    var textClass = getColorClassName('color', textColor);
    var backgroundClass = !customGradient && getColorClassName('background-color', backgroundColor);

    var gradientClass = __experimentalGetGradientClass(gradient);

    var buttonClasses = classnames('wp-block-button__link', (_classnames3 = {
      'has-text-color': textColor || customTextColor
    }, _defineProperty(_classnames3, textClass, textClass), _defineProperty(_classnames3, 'has-background', backgroundColor || customBackgroundColor || customGradient || gradient), _defineProperty(_classnames3, backgroundClass, backgroundClass), _defineProperty(_classnames3, 'no-border-radius', borderRadius === 0), _defineProperty(_classnames3, gradientClass, gradientClass), _classnames3));
    var buttonStyle = {
      background: customGradient ? customGradient : undefined,
      backgroundColor: backgroundClass || customGradient || gradient ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor,
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    return createElement("div", null, createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  }
}, {
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    align: {
      type: 'string',
      default: 'none'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    }
  }),
  isEligible: function isEligible(attribute) {
    return attribute.className && attribute.className.includes('is-style-squared');
  },
  migrate: function migrate(attributes) {
    var newClassName = attributes.className;

    if (newClassName) {
      newClassName = newClassName.replace(/is-style-squared[\s]?/, '').trim();
    }

    return migrateBorderRadius(migrateCustomColorsAndGradients(_objectSpread(_objectSpread({}, attributes), {}, {
      className: newClassName ? newClassName : undefined,
      borderRadius: 0
    })));
  },
  save: function save(_ref5) {
    var _classnames4;

    var attributes = _ref5.attributes;
    var backgroundColor = attributes.backgroundColor,
        customBackgroundColor = attributes.customBackgroundColor,
        customTextColor = attributes.customTextColor,
        linkTarget = attributes.linkTarget,
        rel = attributes.rel,
        text = attributes.text,
        textColor = attributes.textColor,
        title = attributes.title,
        url = attributes.url;
    var textClass = getColorClassName('color', textColor);
    var backgroundClass = getColorClassName('background-color', backgroundColor);
    var buttonClasses = classnames('wp-block-button__link', (_classnames4 = {
      'has-text-color': textColor || customTextColor
    }, _defineProperty(_classnames4, textClass, textClass), _defineProperty(_classnames4, 'has-background', backgroundColor || customBackgroundColor), _defineProperty(_classnames4, backgroundClass, backgroundClass), _classnames4));
    var buttonStyle = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return createElement("div", null, createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  }
}, {
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    align: {
      type: 'string',
      default: 'none'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    }
  }),
  migrate: oldColorsMigration,
  save: function save(_ref6) {
    var _classnames5;

    var attributes = _ref6.attributes;
    var url = attributes.url,
        text = attributes.text,
        title = attributes.title,
        backgroundColor = attributes.backgroundColor,
        textColor = attributes.textColor,
        customBackgroundColor = attributes.customBackgroundColor,
        customTextColor = attributes.customTextColor;
    var textClass = getColorClassName('color', textColor);
    var backgroundClass = getColorClassName('background-color', backgroundColor);
    var buttonClasses = classnames('wp-block-button__link', (_classnames5 = {
      'has-text-color': textColor || customTextColor
    }, _defineProperty(_classnames5, textClass, textClass), _defineProperty(_classnames5, 'has-background', backgroundColor || customBackgroundColor), _defineProperty(_classnames5, backgroundClass, backgroundClass), _classnames5));
    var buttonStyle = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return createElement("div", null, createElement(RichText.Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text
    }));
  }
}, {
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    color: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  }),
  save: function save(_ref7) {
    var attributes = _ref7.attributes;
    var url = attributes.url,
        text = attributes.text,
        title = attributes.title,
        align = attributes.align,
        color = attributes.color,
        textColor = attributes.textColor;
    var buttonStyle = {
      backgroundColor: color,
      color: textColor
    };
    var linkClass = 'wp-block-button__link';
    return createElement("div", {
      className: "align".concat(align)
    }, createElement(RichText.Content, {
      tagName: "a",
      className: linkClass,
      href: url,
      title: title,
      style: buttonStyle,
      value: text
    }));
  },
  migrate: oldColorsMigration
}, {
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    color: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  }),
  save: function save(_ref8) {
    var attributes = _ref8.attributes;
    var url = attributes.url,
        text = attributes.text,
        title = attributes.title,
        align = attributes.align,
        color = attributes.color,
        textColor = attributes.textColor;
    return createElement("div", {
      className: "align".concat(align),
      style: {
        backgroundColor: color
      }
    }, createElement(RichText.Content, {
      tagName: "a",
      href: url,
      title: title,
      style: {
        color: textColor
      },
      value: text
    }));
  },
  migrate: oldColorsMigration
}];
export default deprecated;
//# sourceMappingURL=deprecated.js.map