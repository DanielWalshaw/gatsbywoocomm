import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { InspectorControls, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import { PanelBody, ResizableBox, RangeControl } from '@wordpress/components';
import { compose, withInstanceId } from '@wordpress/compose';
import { withDispatch } from '@wordpress/data';
import { useState, useEffect } from '@wordpress/element';
import { View } from '@wordpress/primitives';
var MIN_SPACER_HEIGHT = 1;
var MAX_SPACER_HEIGHT = 500;
var MIN_SPACER_WIDTH = 1;
var MAX_SPACER_WIDTH = 500;

var SpacerEdit = function SpacerEdit(_ref) {
  var attributes = _ref.attributes,
      isSelected = _ref.isSelected,
      setAttributes = _ref.setAttributes,
      onResizeStart = _ref.onResizeStart,
      onResizeStop = _ref.onResizeStop,
      context = _ref.context;
  var orientation = context.orientation;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isResizing = _useState2[0],
      setIsResizing = _useState2[1];

  var height = attributes.height,
      width = attributes.width;

  var updateHeight = function updateHeight(value) {
    setAttributes({
      height: value
    });
  };

  var updateWidth = function updateWidth(value) {
    setAttributes({
      width: value
    });
  };

  var handleOnResizeStart = function handleOnResizeStart() {
    onResizeStart.apply(void 0, arguments);
    setIsResizing(true);
  };

  var handleOnVerticalResizeStop = function handleOnVerticalResizeStop(event, direction, elt, delta) {
    onResizeStop();
    var spacerHeight = Math.min(parseInt(height + delta.height, 10), MAX_SPACER_HEIGHT);
    updateHeight(spacerHeight);
    setIsResizing(false);
  };

  var handleOnHorizontalResizeStop = function handleOnHorizontalResizeStop(event, direction, elt, delta) {
    onResizeStop();
    var spacerWidth = Math.min(parseInt(width + delta.width, 10), MAX_SPACER_WIDTH);
    updateWidth(spacerWidth);
    setIsResizing(false);
  };

  var resizableBoxWithOrientation = function resizableBoxWithOrientation(blockOrientation) {
    if (blockOrientation === 'horizontal') {
      return createElement(ResizableBox, {
        className: classnames('block-library-spacer__resize-container', 'resize-horizontal', {
          'is-selected': isSelected
        }),
        size: {
          width: width,
          height: 24
        },
        minWidth: MIN_SPACER_WIDTH,
        enable: {
          top: false,
          right: true,
          bottom: false,
          left: false,
          topRight: false,
          bottomRight: false,
          bottomLeft: false,
          topLeft: false
        },
        onResizeStart: handleOnResizeStart,
        onResizeStop: handleOnHorizontalResizeStop,
        showHandle: isSelected,
        __experimentalShowTooltip: true,
        __experimentalTooltipProps: {
          axis: 'x',
          position: 'corner',
          isVisible: isResizing
        }
      });
    }

    return createElement(ResizableBox, {
      className: classnames('block-library-spacer__resize-container', {
        'is-selected': isSelected
      }),
      size: {
        height: height
      },
      minHeight: MIN_SPACER_HEIGHT,
      enable: {
        top: false,
        right: false,
        bottom: true,
        left: false,
        topRight: false,
        bottomRight: false,
        bottomLeft: false,
        topLeft: false
      },
      onResizeStart: handleOnResizeStart,
      onResizeStop: handleOnVerticalResizeStop,
      showHandle: isSelected,
      __experimentalShowTooltip: true,
      __experimentalTooltipProps: {
        axis: 'y',
        position: 'bottom',
        isVisible: isResizing
      }
    });
  };

  useEffect(function () {
    if (orientation === 'horizontal' && !width) {
      updateWidth(72);
      updateHeight(0);
    }
  }, []);
  return createElement(Fragment, null, createElement(View, useBlockProps(), resizableBoxWithOrientation(orientation)), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Spacer settings')
  }, orientation === 'horizontal' && createElement(RangeControl, {
    label: __('Width in pixels'),
    min: MIN_SPACER_WIDTH,
    max: Math.max(MAX_SPACER_WIDTH, width),
    value: width,
    onChange: updateWidth
  }), orientation !== 'horizontal' && createElement(RangeControl, {
    label: __('Height in pixels'),
    min: MIN_SPACER_HEIGHT,
    max: Math.max(MAX_SPACER_HEIGHT, height),
    value: height,
    onChange: updateHeight
  }))));
};

export default compose([withDispatch(function (dispatch) {
  var _dispatch = dispatch(blockEditorStore),
      toggleSelection = _dispatch.toggleSelection;

  return {
    onResizeStart: function onResizeStart() {
      return toggleSelection(false);
    },
    onResizeStop: function onResizeStop() {
      return toggleSelection(true);
    }
  };
}), withInstanceId])(SpacerEdit);
//# sourceMappingURL=edit.js.map