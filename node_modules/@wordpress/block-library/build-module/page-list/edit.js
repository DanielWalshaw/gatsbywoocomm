import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { BlockControls, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import ServerSideRender from '@wordpress/server-side-render';
import { ToolbarButton } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useEffect, useState } from '@wordpress/element';
import { useSelect } from '@wordpress/data';
import apiFetch from '@wordpress/api-fetch';
import { addQueryArgs } from '@wordpress/url';
/**
 * Internal dependencies
 */

import ConvertToLinksModal from './convert-to-links-modal'; // We only show the edit option when page count is <= MAX_PAGE_COUNT
// Performance of Navigation Links is not good past this value.

var MAX_PAGE_COUNT = 100;
export default function PageListEdit(_ref) {
  var _classnames;

  var context = _ref.context,
      clientId = _ref.clientId;

  var _ref2 = context || {},
      textColor = _ref2.textColor,
      backgroundColor = _ref2.backgroundColor,
      showSubmenuIcon = _ref2.showSubmenuIcon,
      style = _ref2.style;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      allowConvertToLinks = _useState2[0],
      setAllowConvertToLinks = _useState2[1];

  var blockProps = useBlockProps({
    className: classnames((_classnames = {
      'has-text-color': !!textColor
    }, _defineProperty(_classnames, "has-".concat(textColor, "-color"), !!textColor), _defineProperty(_classnames, 'has-background', !!backgroundColor), _defineProperty(_classnames, "has-".concat(backgroundColor, "-background-color"), !!backgroundColor), _defineProperty(_classnames, 'show-submenu-icons', !!showSubmenuIcon), _classnames)),
    style: _objectSpread({}, style === null || style === void 0 ? void 0 : style.color)
  });
  var isParentNavigation = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getBlockParentsByBlockName = _select.getBlockParentsByBlockName;

    return getBlockParentsByBlockName(clientId, 'core/navigation').length > 0;
  }, [clientId]);
  useEffect(function () {
    if (isParentNavigation) {
      apiFetch({
        path: addQueryArgs('/wp/v2/pages', {
          per_page: 1,
          _fields: ['id']
        }),
        parse: false
      }).then(function (res) {
        setAllowConvertToLinks(res.headers.get('X-WP-Total') <= MAX_PAGE_COUNT);
      });
    } else {
      setAllowConvertToLinks(false);
    }
  }, [isParentNavigation]);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isOpen = _useState4[0],
      setOpen = _useState4[1];

  var openModal = function openModal() {
    return setOpen(true);
  };

  var closeModal = function closeModal() {
    return setOpen(false);
  };

  return createElement(Fragment, null, allowConvertToLinks && createElement(BlockControls, {
    group: "other"
  }, createElement(ToolbarButton, {
    title: __('Edit'),
    onClick: openModal
  }, __('Edit'))), allowConvertToLinks && isOpen && createElement(ConvertToLinksModal, {
    onClose: closeModal,
    clientId: clientId
  }), createElement("div", blockProps, createElement(ServerSideRender, {
    block: "core/page-list"
  })));
}
//# sourceMappingURL=edit.js.map