import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Button, Modal } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useDispatch, useSelect } from '@wordpress/data';
import { store as coreDataStore } from '@wordpress/core-data';
import { createBlock as create } from '@wordpress/blocks';
import { store as blockEditorStore } from '@wordpress/block-editor';
var PAGE_FIELDS = ['id', 'title', 'link', 'type', 'parent'];
var MAX_PAGE_COUNT = 100;
export var convertSelectedBlockToNavigationLinks = function convertSelectedBlockToNavigationLinks(_ref) {
  var pages = _ref.pages,
      clientId = _ref.clientId,
      replaceBlock = _ref.replaceBlock,
      createBlock = _ref.createBlock;
  return function () {
    if (!pages) {
      return;
    }

    var linkMap = {};
    var navigationLinks = [];
    pages.forEach(function (_ref2) {
      var _linkMap$id$innerBloc, _linkMap$id;

      var id = _ref2.id,
          title = _ref2.title,
          url = _ref2.link,
          type = _ref2.type,
          parent = _ref2.parent;
      // See if a placeholder exists. This is created if children appear before parents in list
      var innerBlocks = (_linkMap$id$innerBloc = (_linkMap$id = linkMap[id]) === null || _linkMap$id === void 0 ? void 0 : _linkMap$id.innerBlocks) !== null && _linkMap$id$innerBloc !== void 0 ? _linkMap$id$innerBloc : [];
      linkMap[id] = createBlock('core/navigation-link', {
        id: id,
        label: title.rendered,
        url: url,
        type: type,
        kind: 'post-type'
      }, innerBlocks);

      if (!parent) {
        navigationLinks.push(linkMap[id]);
      } else {
        if (!linkMap[parent]) {
          // Use a placeholder if the child appears before parent in list
          linkMap[parent] = {
            innerBlocks: []
          };
        }

        var parentLinkInnerBlocks = linkMap[parent].innerBlocks;
        parentLinkInnerBlocks.push(linkMap[id]);
      }
    });
    replaceBlock(clientId, navigationLinks);
  };
};
export default function ConvertToLinksModal(_ref3) {
  var onClose = _ref3.onClose,
      clientId = _ref3.clientId;

  var _useSelect = useSelect(function (select) {
    var _select = select(coreDataStore),
        getEntityRecords = _select.getEntityRecords,
        hasFinishedResolution = _select.hasFinishedResolution;

    var query = ['postType', 'page', {
      per_page: MAX_PAGE_COUNT,
      _fields: PAGE_FIELDS,
      // TODO: When https://core.trac.wordpress.org/ticket/39037 REST API support for multiple orderby
      // values is resolved, update 'orderby' to [ 'menu_order', 'post_title' ] to provide a consistent
      // sort.
      orderby: 'menu_order',
      order: 'asc'
    }];
    return {
      pages: getEntityRecords.apply(void 0, query),
      pagesFinished: hasFinishedResolution('getEntityRecords', query)
    };
  }, [clientId]),
      pages = _useSelect.pages,
      pagesFinished = _useSelect.pagesFinished;

  var _useDispatch = useDispatch(blockEditorStore),
      replaceBlock = _useDispatch.replaceBlock;

  return createElement(Modal, {
    closeLabel: __('Close'),
    onRequestClose: onClose,
    title: __('Convert to links'),
    className: 'wp-block-page-list-modal',
    aria: {
      describedby: 'wp-block-page-list-modal__description'
    }
  }, createElement("p", {
    id: 'wp-block-page-list-modal__description'
  }, __('To edit this navigation menu, convert it to single page links. This allows you to add, re-order, remove items, or edit their labels.')), createElement("p", null, __("Note: if you add new pages to your site, you'll need to add them to your navigation menu.")), createElement("div", {
    className: "wp-block-page-list-modal-buttons"
  }, createElement(Button, {
    isTertiary: true,
    onClick: onClose
  }, __('Cancel')), createElement(Button, {
    isPrimary: true,
    disabled: !pagesFinished,
    onClick: convertSelectedBlockToNavigationLinks({
      pages: pages,
      replaceBlock: replaceBlock,
      clientId: clientId,
      createBlock: create
    })
  }, __('Convert'))));
}
//# sourceMappingURL=convert-to-links-modal.js.map