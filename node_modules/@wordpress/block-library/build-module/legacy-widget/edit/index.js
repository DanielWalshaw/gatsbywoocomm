import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useBlockProps, BlockControls, InspectorControls, BlockIcon, store as blockEditorStore } from '@wordpress/block-editor';
import { ToolbarGroup, ToolbarButton, Spinner, Placeholder } from '@wordpress/components';
import { brush as brushIcon, update as updateIcon } from '@wordpress/icons';
import { __ } from '@wordpress/i18n';
import { useState, useCallback } from '@wordpress/element';
import { useSelect } from '@wordpress/data';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import WidgetTypeSelector from './widget-type-selector';
import InspectorCard from './inspector-card';
import FormWrapper from './form-wrapper';
import Form from './form';
import Preview from './preview';
export default function Edit(props) {
  var _props$attributes = props.attributes,
      id = _props$attributes.id,
      idBase = _props$attributes.idBase;
  return createElement("div", useBlockProps(), !id && !idBase ? createElement(Empty, props) : createElement(NotEmpty, props));
}

function Empty(_ref) {
  var _ref$attributes = _ref.attributes,
      id = _ref$attributes.id,
      idBase = _ref$attributes.idBase,
      setAttributes = _ref.setAttributes;
  return createElement(Placeholder, {
    icon: createElement(BlockIcon, {
      icon: brushIcon
    }),
    label: __('Legacy Widget')
  }, createElement(WidgetTypeSelector, {
    selectedId: id !== null && id !== void 0 ? id : idBase,
    onSelect: function onSelect(_ref2) {
      var selectedId = _ref2.selectedId,
          isMulti = _ref2.isMulti;

      if (!selectedId) {
        setAttributes({
          id: null,
          idBase: null,
          instance: null
        });
      } else if (isMulti) {
        setAttributes({
          id: null,
          idBase: selectedId,
          instance: {}
        });
      } else {
        setAttributes({
          id: selectedId,
          idBase: null,
          instance: null
        });
      }
    }
  }));
}

function NotEmpty(_ref3) {
  var _ref3$attributes = _ref3.attributes,
      id = _ref3$attributes.id,
      idBase = _ref3$attributes.idBase,
      instance = _ref3$attributes.instance,
      setAttributes = _ref3.setAttributes;

  var _useSelect = useSelect(function (select) {
    var _select$getSettings$w, _select$getSettings;

    var widgetTypeId = id !== null && id !== void 0 ? id : idBase;
    var hiddenIds = (_select$getSettings$w = (_select$getSettings = select(blockEditorStore).getSettings()) === null || _select$getSettings === void 0 ? void 0 : _select$getSettings.widgetTypesToHideFromLegacyWidgetBlock) !== null && _select$getSettings$w !== void 0 ? _select$getSettings$w : [];
    return {
      widgetType: select(coreStore).getWidgetType(widgetTypeId),
      hasResolved: select(coreStore).hasFinishedResolution('getWidgetType', [widgetTypeId]),
      isWidgetTypeHidden: hiddenIds.includes(widgetTypeId)
    };
  }, [id, idBase]),
      widgetType = _useSelect.widgetType,
      hasResolved = _useSelect.hasResolved,
      isWidgetTypeHidden = _useSelect.isWidgetTypeHidden;

  var _useState = useState('edit'),
      _useState2 = _slicedToArray(_useState, 2),
      tab = _useState2[0],
      setTab = _useState2[1];

  var setInstance = useCallback(function (newInstance) {
    return setAttributes({
      instance: newInstance
    });
  }, [setAttributes]);

  if (!widgetType && !hasResolved) {
    return createElement(Spinner, null);
  }

  if (!widgetType && hasResolved) {
    return createElement(Placeholder, null, __('Widget is missing.'));
  }

  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, !isWidgetTypeHidden && createElement(ToolbarButton, {
    label: __('Change widget'),
    icon: updateIcon,
    onClick: function onClick() {
      return setAttributes({
        id: null,
        idBase: null,
        instance: null
      });
    }
  }), idBase && createElement(Fragment, null, createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: tab === 'edit',
    onClick: function onClick() {
      return setTab('edit');
    }
  }, createElement("span", null, __('Edit'))), createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: tab === 'preview',
    onClick: function onClick() {
      return setTab('preview');
    }
  }, createElement("span", null, __('Preview')))))), createElement(InspectorControls, null, createElement(InspectorCard, {
    name: widgetType.name,
    description: widgetType.description
  })), createElement(FormWrapper, {
    title: widgetType.name,
    isVisible: tab === 'edit'
  }, createElement(Form, {
    id: id,
    idBase: idBase,
    instance: instance,
    setInstance: setInstance
  })), idBase && createElement(Preview, {
    idBase: idBase,
    instance: instance,
    isVisible: tab === 'preview'
  }));
}
//# sourceMappingURL=index.js.map