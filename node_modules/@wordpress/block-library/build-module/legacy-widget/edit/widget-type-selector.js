import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Spinner, SelectControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { store as coreStore } from '@wordpress/core-data';
import { store as blockEditorStore } from '@wordpress/block-editor';
export default function WidgetTypeSelector(_ref) {
  var selectedId = _ref.selectedId,
      onSelect = _ref.onSelect;
  var widgetTypes = useSelect(function (select) {
    var _select$getSettings$w, _select$getSettings, _select$getWidgetType;

    var hiddenIds = (_select$getSettings$w = (_select$getSettings = select(blockEditorStore).getSettings()) === null || _select$getSettings === void 0 ? void 0 : _select$getSettings.widgetTypesToHideFromLegacyWidgetBlock) !== null && _select$getSettings$w !== void 0 ? _select$getSettings$w : [];
    return (_select$getWidgetType = select(coreStore).getWidgetTypes({
      per_page: -1
    })) === null || _select$getWidgetType === void 0 ? void 0 : _select$getWidgetType.filter(function (widgetType) {
      return !hiddenIds.includes(widgetType.id);
    });
  }, []);

  if (!widgetTypes) {
    return createElement(Spinner, null);
  }

  if (widgetTypes.length === 0) {
    return __('There are no widgets available.');
  }

  return createElement(SelectControl, {
    label: __('Select a legacy widget to display:'),
    value: selectedId !== null && selectedId !== void 0 ? selectedId : '',
    options: [{
      value: '',
      label: __('Select widget')
    }].concat(_toConsumableArray(widgetTypes.map(function (widgetType) {
      return {
        value: widgetType.id,
        label: widgetType.name
      };
    }))),
    onChange: function onChange(value) {
      if (value) {
        var selected = widgetTypes.find(function (widgetType) {
          return widgetType.id === value;
        });
        onSelect({
          selectedId: selected.id,
          isMulti: selected.is_multi
        });
      } else {
        onSelect({
          selectedId: null
        });
      }
    }
  });
}
//# sourceMappingURL=widget-type-selector.js.map