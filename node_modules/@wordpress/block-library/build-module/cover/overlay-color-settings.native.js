import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { getColorObjectByColorValue, getColorObjectByAttributeValues, getGradientValueBySlug, getGradientSlugByValue, __experimentalPanelColorGradientSettings as PanelColorGradientSettings, __experimentalUseEditorFeature as useEditorFeature } from '@wordpress/block-editor';
import { useMemo } from '@wordpress/element';

function OverlayColorSettings(_ref) {
  var overlayColor = _ref.overlayColor,
      customOverlayColor = _ref.customOverlayColor,
      gradient = _ref.gradient,
      customGradient = _ref.customGradient,
      setAttributes = _ref.setAttributes;
  var EMPTY_ARRAY = [];
  var colors = useEditorFeature('color.palette') || EMPTY_ARRAY;
  var gradients = useEditorFeature('color.gradients') || EMPTY_ARRAY;
  var gradientValue = customGradient || getGradientValueBySlug(gradients, gradient);
  var colorValue = getColorObjectByAttributeValues(colors, overlayColor, customOverlayColor).color;
  var settings = useMemo(function () {
    var setOverlayAttribute = function setOverlayAttribute(attributeName, value) {
      setAttributes(_defineProperty({
        // clear all related attributes (only one should be set)
        overlayColor: undefined,
        customOverlayColor: undefined,
        gradient: undefined,
        customGradient: undefined
      }, attributeName, value));
    };

    var onColorChange = function onColorChange(value) {
      // do nothing for falsy values
      if (!value) {
        return;
      }

      var colorObject = getColorObjectByColorValue(colors, value);

      if (colorObject !== null && colorObject !== void 0 && colorObject.slug) {
        setOverlayAttribute('overlayColor', colorObject.slug);
      } else {
        setOverlayAttribute('customOverlayColor', value);
      }
    };

    var onGradientChange = function onGradientChange(value) {
      // do nothing for falsy values
      if (!value) {
        return;
      }

      var slug = getGradientSlugByValue(gradients, value);

      if (slug) {
        setOverlayAttribute('gradient', slug);
      } else {
        setOverlayAttribute('customGradient', value);
      }
    };

    return [{
      label: __('Color'),
      onColorChange: onColorChange,
      colorValue: colorValue,
      gradientValue: gradientValue,
      onGradientChange: onGradientChange
    }];
  }, [colorValue, gradientValue, colors, gradients]);
  return createElement(PanelColorGradientSettings, {
    title: __('Overlay'),
    initialOpen: false,
    settings: settings
  });
}

export default OverlayColorSettings;
//# sourceMappingURL=overlay-color-settings.native.js.map