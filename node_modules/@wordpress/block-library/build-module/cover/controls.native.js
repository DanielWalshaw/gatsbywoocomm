import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View } from 'react-native';
import Video from 'react-native-video';
/**
 * WordPress dependencies
 */

import { Image, Icon, IMAGE_DEFAULT_FOCAL_POINT, PanelBody, RangeControl, UnitControl, TextControl, BottomSheet, ToggleControl } from '@wordpress/components';
import { plus } from '@wordpress/icons';
import { useState, useCallback, useRef } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
import { MediaUpload } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import OverlayColorSettings from './overlay-color-settings';
import FocalPointSettingsButton from './focal-point-settings-button';
import { ALLOWED_MEDIA_TYPES, COVER_MIN_HEIGHT, COVER_MAX_HEIGHT, COVER_DEFAULT_HEIGHT, CSS_UNITS, IMAGE_BACKGROUND_TYPE, VIDEO_BACKGROUND_TYPE } from './shared';

function Controls(_ref) {
  var _styles$focalPointHin;

  var attributes = _ref.attributes,
      didUploadFail = _ref.didUploadFail,
      hasOnlyColorBackground = _ref.hasOnlyColorBackground,
      isUploadInProgress = _ref.isUploadInProgress,
      onClearMedia = _ref.onClearMedia,
      onSelectMedia = _ref.onSelectMedia,
      setAttributes = _ref.setAttributes;
  var backgroundType = attributes.backgroundType,
      dimRatio = attributes.dimRatio,
      hasParallax = attributes.hasParallax,
      focalPoint = attributes.focalPoint,
      minHeight = attributes.minHeight,
      _attributes$minHeight = attributes.minHeightUnit,
      minHeightUnit = _attributes$minHeight === void 0 ? 'px' : _attributes$minHeight,
      url = attributes.url;
  var CONTAINER_HEIGHT = minHeight || COVER_DEFAULT_HEIGHT;
  var onHeightChange = useCallback(function (value) {
    if (minHeight || value !== COVER_DEFAULT_HEIGHT) {
      setAttributes({
        minHeight: value
      });
    }
  }, [minHeight]);
  var onOpacityChange = useCallback(function (value) {
    setAttributes({
      dimRatio: value
    });
  }, []);
  var onChangeUnit = useCallback(function (nextUnit) {
    setAttributes({
      minHeightUnit: nextUnit,
      minHeight: nextUnit === 'px' ? Math.max(CONTAINER_HEIGHT, COVER_MIN_HEIGHT) : CONTAINER_HEIGHT
    });
  }, []);

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      displayPlaceholder = _useState2[0],
      setDisplayPlaceholder = _useState2[1];

  function setFocalPoint(value) {
    setAttributes({
      focalPoint: value
    });
  }

  var toggleParallax = function toggleParallax() {
    setAttributes(_objectSpread({
      hasParallax: !hasParallax
    }, !hasParallax ? {
      focalPoint: undefined
    } : {
      focalPoint: IMAGE_DEFAULT_FOCAL_POINT
    }));
  };

  var addMediaButtonStyle = usePreferredColorSchemeStyle(styles.addMediaButton, styles.addMediaButtonDark);

  function focalPointPosition() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IMAGE_DEFAULT_FOCAL_POINT,
        x = _ref2.x,
        y = _ref2.y;

    return {
      left: "".concat((hasParallax ? 0.5 : x) * 100, "%"),
      top: "".concat((hasParallax ? 0.5 : y) * 100, "%")
    };
  }

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      videoNaturalSize = _useState4[0],
      setVideoNaturalSize = _useState4[1];

  var videoRef = useRef(null);
  var mediaBackground = usePreferredColorSchemeStyle(styles.mediaBackground, styles.mediaBackgroundDark);
  var imagePreviewStyles = [displayPlaceholder && styles.imagePlaceholder];
  var videoPreviewStyles = [{
    aspectRatio: videoNaturalSize && videoNaturalSize.width / videoNaturalSize.height,
    // Hide Video component since it has black background while loading the source
    opacity: displayPlaceholder ? 0 : 1
  }, styles.video, displayPlaceholder && styles.imagePlaceholder];
  var focalPointHint = !hasParallax && !displayPlaceholder && createElement(Icon, {
    icon: plus,
    size: (_styles$focalPointHin = styles.focalPointHint) === null || _styles$focalPointHin === void 0 ? void 0 : _styles$focalPointHin.width,
    style: [styles.focalPointHint, focalPointPosition(focalPoint)]
  });

  var renderMediaSection = function renderMediaSection(_ref3) {
    var _styles$image;

    var openMediaOptions = _ref3.open,
        getMediaOptions = _ref3.getMediaOptions;
    return createElement(Fragment, null, getMediaOptions(), url ? createElement(Fragment, null, createElement(BottomSheet.Cell, {
      accessible: false,
      cellContainerStyle: [styles.mediaPreview, mediaBackground],
      onLongPress: openMediaOptions
    }, createElement(View, {
      style: styles.mediaInner
    }, IMAGE_BACKGROUND_TYPE === backgroundType && createElement(Image, {
      editButton: !displayPlaceholder,
      highlightSelected: false,
      isSelected: !displayPlaceholder,
      isUploadFailed: didUploadFail,
      isUploadInProgress: isUploadInProgress,
      mediaPickerOptions: [{
        destructiveButton: true,
        id: 'clearMedia',
        label: __('Clear Media'),
        onPress: onClearMedia,
        separated: true,
        value: 'clearMedia'
      }],
      onImageDataLoad: function onImageDataLoad() {
        setDisplayPlaceholder(false);
      },
      onSelectMediaUploadOption: onSelectMedia,
      openMediaOptions: openMediaOptions,
      url: url,
      height: "100%",
      style: imagePreviewStyles,
      width: (_styles$image = styles.image) === null || _styles$image === void 0 ? void 0 : _styles$image.width
    }), VIDEO_BACKGROUND_TYPE === backgroundType && createElement(Video, {
      muted: true,
      paused: true,
      disableFocus: true,
      onLoadStart: function onLoadStart() {
        setDisplayPlaceholder(true);
      },
      onLoad: function onLoad(event) {
        var _event$naturalSize = event.naturalSize,
            height = _event$naturalSize.height,
            width = _event$naturalSize.width;
        setVideoNaturalSize({
          height: height,
          width: width
        });
        setDisplayPlaceholder(false); // Avoid invisible, paused video on Android, presumably
        // related to https://git.io/Jt6Dr

        videoRef === null || videoRef === void 0 ? void 0 : videoRef.current.seek(0);
      },
      ref: videoRef,
      resizeMode: 'cover',
      source: {
        uri: url
      },
      style: videoPreviewStyles
    }), displayPlaceholder ? null : focalPointHint)), createElement(FocalPointSettingsButton, {
      disabled: hasParallax,
      focalPoint: focalPoint || IMAGE_DEFAULT_FOCAL_POINT,
      onFocalPointChange: setFocalPoint,
      url: url
    }), IMAGE_BACKGROUND_TYPE === backgroundType && createElement(ToggleControl, {
      label: __('Fixed background'),
      checked: hasParallax,
      onChange: toggleParallax
    }), createElement(TextControl, {
      leftAlign: true,
      label: __('Clear Media'),
      labelStyle: styles.clearMediaButton,
      onPress: onClearMedia
    })) : createElement(TextControl, {
      accessibilityLabel: __('Add image or video'),
      label: __('Add image or video'),
      labelStyle: addMediaButtonStyle,
      leftAlign: true,
      onPress: openMediaOptions
    }));
  };

  return createElement(Fragment, null, createElement(PanelBody, {
    title: __('Media')
  }, createElement(MediaUpload, {
    allowedTypes: ALLOWED_MEDIA_TYPES,
    isReplacingMedia: !hasOnlyColorBackground,
    onSelect: onSelectMedia,
    render: renderMediaSection
  })), createElement(OverlayColorSettings, {
    overlayColor: attributes.overlayColor,
    customOverlayColor: attributes.customOverlayColor,
    gradient: attributes.gradient,
    customGradient: attributes.customGradient,
    setAttributes: setAttributes
  }), url ? createElement(PanelBody, null, createElement(RangeControl, {
    label: __('Opacity'),
    minimumValue: 0,
    maximumValue: 100,
    value: dimRatio,
    onChange: onOpacityChange,
    style: styles.rangeCellContainer,
    separatorType: 'topFullWidth'
  })) : null, createElement(PanelBody, {
    title: __('Dimensions')
  }, createElement(UnitControl, {
    label: __('Minimum height'),
    min: minHeightUnit === 'px' ? COVER_MIN_HEIGHT : 1,
    max: COVER_MAX_HEIGHT,
    unit: minHeightUnit,
    value: CONTAINER_HEIGHT,
    onChange: onHeightChange,
    onUnitChange: onChangeUnit,
    units: CSS_UNITS,
    style: styles.rangeCellContainer,
    key: minHeightUnit
  })));
}

export default Controls;
//# sourceMappingURL=controls.native.js.map