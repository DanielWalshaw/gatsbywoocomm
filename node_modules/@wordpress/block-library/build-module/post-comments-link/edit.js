import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { AlignmentToolbar, BlockControls, Warning, useBlockProps } from '@wordpress/block-editor';
import { useState, useEffect } from '@wordpress/element';
import { useSelect } from '@wordpress/data';
import apiFetch from '@wordpress/api-fetch';
import { addQueryArgs } from '@wordpress/url';
import { __, sprintf, _n } from '@wordpress/i18n';
import { store as coreStore } from '@wordpress/core-data';

function PostCommentsLinkEdit(_ref) {
  var context = _ref.context,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes;
  var textAlign = attributes.textAlign;
  var postType = context.postType,
      postId = context.postId;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      commentsCount = _useState2[0],
      setCommentsCount = _useState2[1];

  var blockProps = useBlockProps({
    className: classnames(_defineProperty({}, "has-text-align-".concat(textAlign), textAlign))
  });
  useEffect(function () {
    if (!postId) {
      return;
    }

    var currentPostId = postId;
    apiFetch({
      path: addQueryArgs('/wp/v2/comments', {
        post: postId
      }),
      parse: false
    }).then(function (res) {
      // Stale requests will have the `currentPostId` of an older closure.
      if (currentPostId === postId) {
        setCommentsCount(res.headers.get('X-WP-Total'));
      }
    });
  }, [postId]);
  var post = useSelect(function (select) {
    return select(coreStore).getEditedEntityRecord('postType', postType, postId);
  }, [postType, postId]);

  if (!post) {
    return null;
  }

  var link = post.link;
  var commentsText;

  if (commentsCount !== undefined) {
    var commentsNumber = parseInt(commentsCount);

    if (commentsNumber === 0) {
      commentsText = __('No comments');
    } else {
      commentsText = sprintf(
      /* translators: %s: Number of comments */
      _n('%s comment', '%s comments', commentsNumber), commentsNumber.toLocaleString());
    }
  }

  return createElement(Fragment, null, createElement(BlockControls, null, createElement(AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement("div", blockProps, link && commentsText !== undefined ? createElement("a", {
    href: link + '#comments',
    onClick: function onClick(event) {
      return event.preventDefault();
    }
  }, commentsText) : createElement(Warning, null, __('Post Comments Link block: post not found.'))));
}

export default PostCommentsLinkEdit;
//# sourceMappingURL=edit.js.map