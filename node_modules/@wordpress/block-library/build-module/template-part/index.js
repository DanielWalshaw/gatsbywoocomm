/**
 * External dependencies
 */
import { startCase } from 'lodash';
/**
 * WordPress dependencies
 */

import { store as coreDataStore } from '@wordpress/core-data';
import { select } from '@wordpress/data';
import { __, _x } from '@wordpress/i18n';
import { layout } from '@wordpress/icons';
/**
 * Internal dependencies
 */

var metadata = {
  apiVersion: 2,
  name: "core/template-part",
  category: "theme",
  attributes: {
    slug: {
      type: "string"
    },
    theme: {
      type: "string"
    },
    tagName: {
      type: "string"
    },
    area: {
      type: "string"
    }
  },
  supports: {
    align: true,
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true
    },
    __experimentalLayout: true
  },
  editorStyle: "wp-block-template-part-editor"
};
import edit from './edit';
import variations from './variations';
var name = metadata.name;
export { metadata, name };
export var settings = {
  title: _x('Template Part', 'block title'),
  description: __('Edit the different global regions of your site, like the header, footer, sidebar, or create your own.'),
  icon: layout,
  keywords: [__('template part')],
  __experimentalLabel: function __experimentalLabel(_ref) {
    var _entity$title;

    var slug = _ref.slug,
        theme = _ref.theme;

    // Attempt to find entity title if block is a template part.
    // Require slug to request, otherwise entity is uncreated and will throw 404.
    if (!slug) {
      return;
    }

    var entity = select(coreDataStore).getEntityRecord('postType', 'wp_template_part', theme + '//' + slug);

    if (!entity) {
      return;
    }

    return startCase(((_entity$title = entity.title) === null || _entity$title === void 0 ? void 0 : _entity$title.rendered) || entity.slug);
  },
  edit: edit,
  variations: variations
};
//# sourceMappingURL=index.js.map