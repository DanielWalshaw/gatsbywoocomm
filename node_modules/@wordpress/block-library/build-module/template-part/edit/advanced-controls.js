import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEntityProp } from '@wordpress/core-data';
import { SelectControl, TextControl } from '@wordpress/components';
import { sprintf, __ } from '@wordpress/i18n';
import { InspectorAdvancedControls } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

import { getTagBasedOnArea } from './get-tag-based-on-area';
var AREA_OPTIONS = [{
  label: __('Header'),
  value: 'header'
}, {
  label: __('Footer'),
  value: 'footer'
}, {
  label: __('General'),
  value: 'uncategorized'
}];
export function TemplatePartAdvancedControls(_ref) {
  var tagName = _ref.tagName,
      setAttributes = _ref.setAttributes,
      isEntityAvailable = _ref.isEntityAvailable,
      templatePartId = _ref.templatePartId;

  var _useEntityProp = useEntityProp('postType', 'wp_template_part', 'area', templatePartId),
      _useEntityProp2 = _slicedToArray(_useEntityProp, 2),
      area = _useEntityProp2[0],
      setArea = _useEntityProp2[1];

  var _useEntityProp3 = useEntityProp('postType', 'wp_template_part', 'title', templatePartId),
      _useEntityProp4 = _slicedToArray(_useEntityProp3, 2),
      title = _useEntityProp4[0],
      setTitle = _useEntityProp4[1];

  return createElement(InspectorAdvancedControls, null, isEntityAvailable && createElement(Fragment, null, createElement(TextControl, {
    label: __('Title'),
    value: title,
    onChange: function onChange(value) {
      setTitle(value);
    },
    onFocus: function onFocus(event) {
      return event.target.select();
    }
  }), createElement(SelectControl, {
    label: __('Area'),
    labelPosition: "top",
    options: AREA_OPTIONS,
    value: area,
    onChange: setArea
  })), createElement(SelectControl, {
    label: __('HTML element'),
    options: [{
      label: sprintf(
      /* translators: %s: HTML tag based on area. */
      __('Default based on area (%s)'), "<".concat(getTagBasedOnArea(area), ">")),
      value: ''
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }, {
      label: '<div>',
      value: 'div'
    }],
    value: tagName || '',
    onChange: function onChange(value) {
      return setAttributes({
        tagName: value
      });
    }
  }));
}
//# sourceMappingURL=advanced-controls.js.map