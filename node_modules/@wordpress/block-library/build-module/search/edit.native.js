import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

var _styles$widthMargin, _styles$widthMargin2;

import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View } from 'react-native';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { RichText, PlainText, useBlockProps, InspectorControls } from '@wordpress/block-editor';
import { PanelBody, SelectControl, ToggleControl, Icon } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { search } from '@wordpress/icons';
import { useRef, useEffect, useState } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './style.scss';
/**
 * Constants
 */

var MIN_BUTTON_WIDTH = 75;
var MARGINS = ((_styles$widthMargin = styles.widthMargin) === null || _styles$widthMargin === void 0 ? void 0 : _styles$widthMargin.marginLeft) + ((_styles$widthMargin2 = styles.widthMargin) === null || _styles$widthMargin2 === void 0 ? void 0 : _styles$widthMargin2.paddingLeft);
var BUTTON_OPTIONS = [{
  value: 'button-inside',
  label: __('Button inside')
}, {
  value: 'button-outside',
  label: __('Button outside')
}, {
  value: 'no-button',
  label: __('No button')
}];
export default function SearchEdit(_ref) {
  var _styles$richTextButto2;

  var _onFocus = _ref.onFocus,
      isSelected = _ref.isSelected,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      className = _ref.className,
      blockWidth = _ref.blockWidth;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isButtonSelected = _useState2[0],
      setIsButtonSelected = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isLabelSelected = _useState4[0],
      setIsLabelSelected = _useState4[1];

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      isPlaceholderSelected = _useState6[0],
      setIsPlaceholderSelected = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isLongButton = _useState8[0],
      setIsLongButton = _useState8[1];

  var _useState9 = useState(MIN_BUTTON_WIDTH),
      _useState10 = _slicedToArray(_useState9, 2),
      buttonWidth = _useState10[0],
      setButtonWidth = _useState10[1];

  var textInputRef = useRef(null);
  var label = attributes.label,
      showLabel = attributes.showLabel,
      buttonPosition = attributes.buttonPosition,
      buttonUseIcon = attributes.buttonUseIcon,
      placeholder = attributes.placeholder,
      buttonText = attributes.buttonText;
  /*
   * Called when the value of isSelected changes. Blurs the PlainText component
   * used by the placeholder when this block loses focus.
   */

  useEffect(function () {
    if (hasTextInput() && isPlaceholderSelected && !isSelected) {
      textInputRef.current.blur();
    }
  }, [isSelected]);
  useEffect(function () {
    var maxButtonWidth = Math.floor(blockWidth / 2 - MARGINS);
    var tempIsLongButton = buttonWidth > maxButtonWidth; // Update this value only if it has changed to avoid flickering.

    if (isLongButton !== tempIsLongButton) {
      setIsLongButton(tempIsLongButton);
    }
  }, [blockWidth, buttonWidth]);

  var hasTextInput = function hasTextInput() {
    return textInputRef && textInputRef.current;
  };

  var onLayoutButton = function onLayoutButton(_ref2) {
    var nativeEvent = _ref2.nativeEvent;

    var _nativeEvent$layout = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.layout,
        width = _nativeEvent$layout.width;

    if (width) {
      setButtonWidth(width);
    }
  };

  var getBlockClassNames = function getBlockClassNames() {
    return classnames(className, 'button-inside' === buttonPosition ? 'wp-block-search__button-inside' : undefined, 'button-outside' === buttonPosition ? 'wp-block-search__button-outside' : undefined, 'no-button' === buttonPosition ? 'wp-block-search__no-button' : undefined, 'button-only' === buttonPosition ? 'wp-block-search__button-only' : undefined, !buttonUseIcon && 'no-button' !== buttonPosition ? 'wp-block-search__text-button' : undefined, buttonUseIcon && 'no-button' !== buttonPosition ? 'wp-block-search__icon-button' : undefined);
  };

  var getSelectedButtonPositionLabel = function getSelectedButtonPositionLabel(option) {
    switch (option) {
      case 'button-inside':
        return __('Inside');

      case 'button-outside':
        return __('Outside');

      case 'no-button':
        return __('No button');
    }
  };

  var blockProps = useBlockProps({
    className: getBlockClassNames()
  });
  var controls = createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Search settings')
  }, createElement(ToggleControl, {
    label: __('Hide search heading'),
    checked: !showLabel,
    onChange: function onChange() {
      setAttributes({
        showLabel: !showLabel
      });
    }
  }), createElement(SelectControl, {
    label: __('Button position'),
    value: getSelectedButtonPositionLabel(buttonPosition),
    onChange: function onChange(position) {
      setAttributes({
        buttonPosition: position
      });
    },
    options: BUTTON_OPTIONS,
    hideCancelButton: true
  }), buttonPosition !== 'no-button' && createElement(ToggleControl, {
    label: __('Use icon button'),
    checked: buttonUseIcon,
    onChange: function onChange() {
      setAttributes({
        buttonUseIcon: !buttonUseIcon
      });
    }
  })));
  var isButtonInside = buttonPosition === 'button-inside';
  var borderStyle = usePreferredColorSchemeStyle(styles.border, styles.borderDark);
  var inputStyle = [!isButtonInside && borderStyle, usePreferredColorSchemeStyle(styles.plainTextInput, styles.plainTextInputDark)];
  var placeholderStyle = usePreferredColorSchemeStyle(styles.plainTextPlaceholder, styles.plainTextPlaceholderDark);
  var searchBarStyle = [styles.searchBarContainer, isButtonInside && borderStyle, isLongButton && {
    flexDirection: 'column'
  }];

  var getPlaceholderAccessibilityLabel = function getPlaceholderAccessibilityLabel() {
    var title = __('Search input field.');

    var description = placeholder ? "".concat(__('Current placeholder text is'), " ").concat(placeholder) : __('No custom placeholder set');
    return "".concat(title, " ").concat(description);
  };

  var renderTextField = function renderTextField() {
    return createElement(View, {
      style: styles.searchInputContainer,
      accessible: true,
      accessibilityRole: "none",
      accessibilityHint: __('Double tap to edit placeholder text'),
      accessibilityLabel: getPlaceholderAccessibilityLabel()
    }, createElement(PlainText, {
      ref: textInputRef,
      isSelected: isPlaceholderSelected,
      className: "wp-block-search__input",
      style: inputStyle,
      numberOfLines: 1,
      ellipsizeMode: "tail" // currently only works on ios
      ,
      label: null,
      value: placeholder,
      placeholder: placeholder ? undefined : __('Optional placeholderâ€¦'),
      onChange: function onChange(newVal) {
        return setAttributes({
          placeholder: newVal
        });
      },
      onFocus: function onFocus() {
        setIsPlaceholderSelected(true);

        _onFocus();
      },
      onBlur: function onBlur() {
        return setIsPlaceholderSelected(false);
      },
      placeholderTextColor: placeholderStyle === null || placeholderStyle === void 0 ? void 0 : placeholderStyle.color
    }));
  }; // To achieve proper expanding and shrinking `RichText` on Android, there is a need to set
  // a `placeholder` as an empty string when `RichText` is focused,
  // because `AztecView` is calculating a `minWidth` based on placeholder text.


  var buttonPlaceholderText = isButtonSelected || !isButtonSelected && buttonText && buttonText !== '' ? '' : __('Add button text');

  var renderButton = function renderButton() {
    var _styles$richTextButto;

    return createElement(View, {
      style: [styles.buttonContainer, isLongButton && styles.buttonContainerWide]
    }, buttonUseIcon && createElement(Icon, _extends({
      icon: search
    }, styles.icon, {
      onLayout: onLayoutButton
    })), !buttonUseIcon && createElement(View, {
      accessible: true,
      accessibilityRole: "none",
      accessibilityHint: __('Double tap to edit button text'),
      accessibilityLabel: "".concat(__('Search button. Current button text is'), " ").concat(buttonText),
      onLayout: onLayoutButton
    }, createElement(RichText, {
      className: "wp-block-search__button",
      identifier: "text",
      tagName: "p",
      style: styles.richTextButton,
      placeholder: buttonPlaceholderText,
      value: buttonText,
      withoutInteractiveFormatting: true,
      onChange: function onChange(html) {
        return setAttributes({
          buttonText: html
        });
      },
      minWidth: MIN_BUTTON_WIDTH,
      maxWidth: blockWidth - MARGINS,
      textAlign: "center",
      isSelected: isButtonSelected,
      __unstableMobileNoFocusOnMount: !isSelected,
      unstableOnFocus: function unstableOnFocus() {
        setIsButtonSelected(true);
      },
      onBlur: function onBlur() {
        setIsButtonSelected(false);
      },
      selectionColor: (_styles$richTextButto = styles.richTextButtonCursor) === null || _styles$richTextButto === void 0 ? void 0 : _styles$richTextButto.color
    })));
  };

  return createElement(View, _extends({}, blockProps, {
    style: styles.searchBlockContainer,
    importantForAccessibility: isSelected ? 'yes' : 'no-hide-descendants',
    accessibilityElementsHidden: isSelected ? false : true
  }), isSelected && controls, showLabel && createElement(View, {
    accessible: true,
    accessibilityRole: "none",
    accessibilityHint: __('Double tap to edit label text'),
    accessibilityLabel: "".concat(__('Search block label. Current text is'), " ").concat(label)
  }, createElement(RichText, {
    className: "wp-block-search__label",
    identifier: "text",
    tagName: "p",
    style: styles.richTextLabel,
    placeholder: __('Add labelâ€¦'),
    withoutInteractiveFormatting: true,
    value: label,
    onChange: function onChange(html) {
      return setAttributes({
        label: html
      });
    },
    isSelected: isLabelSelected,
    __unstableMobileNoFocusOnMount: !isSelected,
    unstableOnFocus: function unstableOnFocus() {
      setIsLabelSelected(true);
    },
    onBlur: function onBlur() {
      setIsLabelSelected(false);
    },
    selectionColor: (_styles$richTextButto2 = styles.richTextButtonCursor) === null || _styles$richTextButto2 === void 0 ? void 0 : _styles$richTextButto2.color
  })), ('button-inside' === buttonPosition || 'button-outside' === buttonPosition) && createElement(View, {
    style: searchBarStyle
  }, renderTextField(), renderButton()), 'button-only' === buttonPosition && renderButton(), 'no-button' === buttonPosition && renderTextField());
}
//# sourceMappingURL=edit.native.js.map