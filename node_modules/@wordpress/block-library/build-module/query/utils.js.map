{"version":3,"sources":["@wordpress/block-library/src/query/utils.js"],"names":["useSelect","useMemo","store","coreStore","getTermsInfo","terms","reduce","accumulator","term","mapById","mapByName","names","id","name","push","usePostTypes","select","getPostTypes","excludedPostTypes","filteredPostTypes","per_page","filter","viewable","slug","includes","postTypes","postTypesTaxonomiesMap","length","type","taxonomies","postTypesSelectOptions","map","labels","label","singular_name","value"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * WordPress term object from REST API.\n * Categories ref: https://developer.wordpress.org/rest-api/reference/categories/\n * Tags ref: https://developer.wordpress.org/rest-api/reference/tags/\n *\n * @typedef {Object} WPTerm\n * @property {number} id Unique identifier for the term.\n * @property {number} count Number of published posts for the term.\n * @property {string} description HTML description of the term.\n * @property {string} link URL of the term.\n * @property {string} name HTML title for the term.\n * @property {string} slug An alphanumeric identifier for the term unique to its type.\n * @property {string} taxonomy Type attribution for the term.\n * @property {Object} meta Meta fields\n * @property {number} [parent] The parent term ID.\n */\n\n/**\n * The object used in Query block that contains info and helper mappings\n * from an array of WPTerm.\n *\n * @typedef {Object} QueryTermsInfo\n * @property {WPTerm[]} terms The array of terms.\n * @property {Object<string, WPTerm>} mapById Object mapping with the term id as key and the term as value.\n * @property {Object<string, WPTerm>} mapByName Object mapping with the term name as key and the term as value.\n * @property {string[]} names Array with the terms' names.\n */\n\n/**\n * Returns a helper object with mapping from WPTerms.\n *\n * @param {WPTerm[]} terms The terms to extract of helper object.\n * @return {QueryTermsInfo} The object with the terms information.\n */\nexport const getTermsInfo = ( terms ) => ( {\n\tterms,\n\t...terms?.reduce(\n\t\t( accumulator, term ) => {\n\t\t\tconst { mapById, mapByName, names } = accumulator;\n\t\t\tmapById[ term.id ] = term;\n\t\t\tmapByName[ term.name ] = term;\n\t\t\tnames.push( term.name );\n\t\t\treturn accumulator;\n\t\t},\n\t\t{ mapById: {}, mapByName: {}, names: [] }\n\t),\n} );\n\n/**\n * Returns a helper object that contains:\n * 1. An `options` object from the available post types, to be passed to a `SelectControl`.\n * 2. A helper map with available taxonomies per post type.\n *\n * @return {Object} The helper object related to post types.\n */\nexport const usePostTypes = () => {\n\tconst { postTypes } = useSelect( ( select ) => {\n\t\tconst { getPostTypes } = select( coreStore );\n\t\tconst excludedPostTypes = [ 'attachment' ];\n\t\tconst filteredPostTypes = getPostTypes( { per_page: -1 } )?.filter(\n\t\t\t( { viewable, slug } ) =>\n\t\t\t\tviewable && ! excludedPostTypes.includes( slug )\n\t\t);\n\t\treturn {\n\t\t\tpostTypes: filteredPostTypes,\n\t\t};\n\t}, [] );\n\tconst postTypesTaxonomiesMap = useMemo( () => {\n\t\tif ( ! postTypes?.length ) return;\n\t\treturn postTypes.reduce( ( accumulator, type ) => {\n\t\t\taccumulator[ type.slug ] = type.taxonomies;\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}, [ postTypes ] );\n\tconst postTypesSelectOptions = useMemo(\n\t\t() =>\n\t\t\t( postTypes || [] ).map( ( { labels, slug } ) => ( {\n\t\t\t\tlabel: labels.singular_name,\n\t\t\t\tvalue: slug,\n\t\t\t} ) ),\n\t\t[ postTypes ]\n\t);\n\treturn { postTypesTaxonomiesMap, postTypesSelectOptions };\n};\n"]}