import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { debounce } from 'lodash';
/**
 * WordPress dependencies
 */

import { PanelBody, QueryControls, TextControl, FormTokenField, SelectControl, RangeControl, ToggleControl, Notice } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { InspectorControls } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';
import { addQueryArgs } from '@wordpress/url';
import { useEffect, useState, useCallback, createInterpolateElement } from '@wordpress/element';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { getTermsInfo, usePostTypes } from '../utils';
import { MAX_FETCHED_TERMS } from '../constants';
var stickyOptions = [{
  label: __('Include'),
  value: ''
}, {
  label: __('Exclude'),
  value: 'exclude'
}, {
  label: __('Only'),
  value: 'only'
}];

var CreateNewPostLink = function CreateNewPostLink(_ref) {
  var type = _ref.type;
  var newPostUrl = addQueryArgs('post-new.php', {
    post_type: type
  });
  return createElement("div", {
    className: "wp-block-query__create-new-link"
  }, createInterpolateElement(__('<a>Create a new post</a> for this feed.'), // eslint-disable-next-line jsx-a11y/anchor-has-content
  {
    a: createElement("a", {
      href: newPostUrl
    })
  }));
};

export default function QueryInspectorControls(_ref2) {
  var _categories$terms, _tags$terms;

  var _ref2$attributes = _ref2.attributes,
      query = _ref2$attributes.query,
      layout = _ref2$attributes.layout,
      setQuery = _ref2.setQuery,
      setLayout = _ref2.setLayout;
  var order = query.order,
      orderBy = query.orderBy,
      selectedAuthorId = query.author,
      postType = query.postType,
      sticky = query.sticky,
      inherit = query.inherit;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      showCategories = _useState2[0],
      setShowCategories = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      showTags = _useState4[0],
      setShowTags = _useState4[1];

  var _useState5 = useState(postType === 'post'),
      _useState6 = _slicedToArray(_useState5, 2),
      showSticky = _useState6[0],
      setShowSticky = _useState6[1];

  var _usePostTypes = usePostTypes(),
      postTypesTaxonomiesMap = _usePostTypes.postTypesTaxonomiesMap,
      postTypesSelectOptions = _usePostTypes.postTypesSelectOptions;

  var _useSelect = useSelect(function (select) {
    var _select = select(coreStore),
        getEntityRecords = _select.getEntityRecords;

    var termsQuery = {
      per_page: MAX_FETCHED_TERMS
    };

    var _categories = getEntityRecords('taxonomy', 'category', termsQuery);

    var _tags = getEntityRecords('taxonomy', 'post_tag', termsQuery);

    return {
      categories: getTermsInfo(_categories),
      tags: getTermsInfo(_tags),
      authorList: getEntityRecords('root', 'user', {
        per_page: -1
      })
    };
  }, []),
      authorList = _useSelect.authorList,
      categories = _useSelect.categories,
      tags = _useSelect.tags;

  useEffect(function () {
    if (!postTypesTaxonomiesMap) return;
    var postTypeTaxonomies = postTypesTaxonomiesMap[postType];
    setShowCategories(postTypeTaxonomies.includes('category'));
    setShowTags(postTypeTaxonomies.includes('post_tag'));
  }, [postType, postTypesTaxonomiesMap]);
  useEffect(function () {
    setShowSticky(postType === 'post');
  }, [postType]);

  var onPostTypeChange = function onPostTypeChange(newValue) {
    var updateQuery = {
      postType: newValue
    };

    if (!postTypesTaxonomiesMap[newValue].includes('category')) {
      updateQuery.categoryIds = [];
    }

    if (!postTypesTaxonomiesMap[newValue].includes('post_tag')) {
      updateQuery.tagIds = [];
    }

    if (newValue !== 'post') {
      updateQuery.sticky = '';
    }

    setQuery(updateQuery);
  }; // Handles categories and tags changes.


  var onTermsChange = function onTermsChange(terms, queryProperty) {
    return function (newTermValues) {
      var termIds = newTermValues.reduce(function (accumulator, termValue) {
        var _terms$mapByName$term;

        var termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_terms$mapByName$term = terms.mapByName[termValue]) === null || _terms$mapByName$term === void 0 ? void 0 : _terms$mapByName$term.id);
        if (termId) accumulator.push(termId);
        return accumulator;
      }, []);
      setQuery(_defineProperty({}, queryProperty, termIds));
    };
  };

  var onCategoriesChange = onTermsChange(categories, 'categoryIds');
  var onTagsChange = onTermsChange(tags, 'tagIds');

  var _useState7 = useState(query.search),
      _useState8 = _slicedToArray(_useState7, 2),
      querySearch = _useState8[0],
      setQuerySearch = _useState8[1];

  var onChangeDebounced = useCallback(debounce(function () {
    if (query.search !== querySearch) {
      setQuery({
        search: querySearch
      });
    }
  }, 250), [querySearch, query.search]);
  useEffect(function () {
    onChangeDebounced();
    return onChangeDebounced.cancel;
  }, [querySearch, onChangeDebounced]); // Returns only the existing term ids (categories/tags) in proper
  // format to be used in `FormTokenField`. This prevents the component
  // from crashing in the editor, when non existing term ids were provided.

  var getExistingTermsFormTokenValue = function getExistingTermsFormTokenValue(taxonomy) {
    var termsMapper = {
      category: {
        queryProp: 'categoryIds',
        terms: categories
      },
      post_tag: {
        queryProp: 'tagIds',
        terms: tags
      }
    };
    var requestedTerm = termsMapper[taxonomy];
    return (query[requestedTerm.queryProp] || []).reduce(function (accumulator, termId) {
      var term = requestedTerm.terms.mapById[termId];

      if (term) {
        accumulator.push({
          id: termId,
          value: term.name
        });
      }

      return accumulator;
    }, []);
  };

  return createElement(InspectorControls, null, createElement(CreateNewPostLink, {
    type: postType
  }), createElement(PanelBody, {
    title: __('Settings')
  }, createElement(ToggleControl, {
    label: __('Inherit query from URL'),
    help: __('Disable the option to customize the query arguments. Leave enabled to inherit the global query depending on the URL.'),
    checked: !!inherit,
    onChange: function onChange(value) {
      return setQuery({
        inherit: !!value
      });
    }
  }), !inherit && createElement(SelectControl, {
    options: postTypesSelectOptions,
    value: postType,
    label: __('Post Type'),
    onChange: onPostTypeChange
  }), (layout === null || layout === void 0 ? void 0 : layout.type) === 'flex' && createElement(Fragment, null, createElement(RangeControl, {
    label: __('Columns'),
    value: layout.columns,
    onChange: function onChange(value) {
      return setLayout({
        columns: value
      });
    },
    min: 2,
    max: Math.max(6, layout.columns)
  }), layout.columns > 6 && createElement(Notice, {
    status: "warning",
    isDismissible: false
  }, __('This column count exceeds the recommended amount and may cause visual breakage.'))), !inherit && createElement(QueryControls, {
    order: order,
    orderBy: orderBy,
    onOrderChange: function onOrderChange(value) {
      return setQuery({
        order: value
      });
    },
    onOrderByChange: function onOrderByChange(value) {
      return setQuery({
        orderBy: value
      });
    }
  }), showSticky && createElement(SelectControl, {
    label: __('Sticky posts'),
    options: stickyOptions,
    value: sticky,
    onChange: function onChange(value) {
      return setQuery({
        sticky: value
      });
    }
  })), !inherit && createElement(PanelBody, {
    title: __('Filters')
  }, showCategories && (categories === null || categories === void 0 ? void 0 : (_categories$terms = categories.terms) === null || _categories$terms === void 0 ? void 0 : _categories$terms.length) > 0 && createElement(FormTokenField, {
    label: __('Categories'),
    value: getExistingTermsFormTokenValue('category'),
    suggestions: categories.names,
    onChange: onCategoriesChange
  }), showTags && (tags === null || tags === void 0 ? void 0 : (_tags$terms = tags.terms) === null || _tags$terms === void 0 ? void 0 : _tags$terms.length) > 0 && createElement(FormTokenField, {
    label: __('Tags'),
    value: getExistingTermsFormTokenValue('post_tag'),
    suggestions: tags.names,
    onChange: onTagsChange
  }), createElement(QueryControls, {
    selectedAuthorId: selectedAuthorId,
    authorList: authorList,
    onAuthorChange: function onAuthorChange(value) {
      return setQuery({
        author: value !== '' ? +value : undefined
      });
    }
  }), createElement(TextControl, {
    label: __('Keyword'),
    value: querySearch,
    onChange: setQuerySearch
  })));
}
//# sourceMappingURL=query-inspector-controls.js.map