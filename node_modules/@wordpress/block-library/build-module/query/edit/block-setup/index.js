import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { useBlockProps } from '@wordpress/block-editor';
import { store as blocksStore } from '@wordpress/blocks';
import { Placeholder } from '@wordpress/components';
/**
 * Internal dependencies
 */

import LayoutSetupStep from './layout-step';

var BlockSetup = function BlockSetup(_ref) {
  var _blockType$icon;

  var blockName = _ref.blockName,
      useLayoutSetup = _ref.useLayoutSetup,
      _ref$onVariationSelec = _ref.onVariationSelect,
      onVariationSelect = _ref$onVariationSelec === void 0 ? function () {} : _ref$onVariationSelec,
      _ref$onBlockPatternSe = _ref.onBlockPatternSelect,
      onBlockPatternSelect = _ref$onBlockPatternSe === void 0 ? function () {} : _ref$onBlockPatternSe,
      children = _ref.children;

  var _useSelect = useSelect(function (select) {
    var _select = select(blocksStore),
        getBlockType = _select.getBlockType;

    return {
      blockType: getBlockType(blockName)
    };
  }, [blockName]),
      blockType = _useSelect.blockType;

  var blockProps = useBlockProps();
  return createElement("div", blockProps, createElement(Placeholder, {
    icon: blockType === null || blockType === void 0 ? void 0 : (_blockType$icon = blockType.icon) === null || _blockType$icon === void 0 ? void 0 : _blockType$icon.src,
    label: blockType === null || blockType === void 0 ? void 0 : blockType.title,
    isColumnLayout: true
  }, useLayoutSetup && createElement(LayoutSetupStep, {
    blockType: blockType,
    onVariationSelect: onVariationSelect,
    onBlockPatternSelect: onBlockPatternSelect
  }), children));
};

export default BlockSetup;
//# sourceMappingURL=index.js.map