import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __, _x, isRTL } from '@wordpress/i18n';
import { DropdownMenu, PanelBody, ToggleControl } from '@wordpress/components';
import { AlignmentControl, BlockControls, InspectorControls, RichText, useBlockProps, __experimentalUseEditorFeature as useEditorFeature } from '@wordpress/block-editor';
import { createBlock } from '@wordpress/blocks';
import { formatLtr } from '@wordpress/icons';
var name = 'core/paragraph';

function ParagraphRTLControl(_ref) {
  var direction = _ref.direction,
      setDirection = _ref.setDirection;
  return isRTL() && createElement(DropdownMenu, {
    isToolbarButton: true,
    controls: [{
      icon: formatLtr,
      title: _x('Left to right', 'editor button'),
      isActive: direction === 'ltr',
      onClick: function onClick() {
        setDirection(direction === 'ltr' ? undefined : 'ltr');
      }
    }]
  });
}

function ParagraphBlock(_ref2) {
  var attributes = _ref2.attributes,
      mergeBlocks = _ref2.mergeBlocks,
      onReplace = _ref2.onReplace,
      onRemove = _ref2.onRemove,
      setAttributes = _ref2.setAttributes,
      clientId = _ref2.clientId;
  var align = attributes.align,
      content = attributes.content,
      direction = attributes.direction,
      dropCap = attributes.dropCap,
      placeholder = attributes.placeholder;
  var isDropCapFeatureEnabled = useEditorFeature('typography.dropCap');
  var blockProps = useBlockProps({
    className: classnames(_defineProperty({
      'has-drop-cap': dropCap
    }, "has-text-align-".concat(align), align)),
    style: {
      direction: direction
    }
  });
  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, createElement(AlignmentControl, {
    value: align,
    onChange: function onChange(newAlign) {
      return setAttributes({
        align: newAlign
      });
    }
  }), createElement(ParagraphRTLControl, {
    direction: direction,
    setDirection: function setDirection(newDirection) {
      return setAttributes({
        direction: newDirection
      });
    }
  })), isDropCapFeatureEnabled && createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Text settings')
  }, createElement(ToggleControl, {
    label: __('Drop cap'),
    checked: !!dropCap,
    onChange: function onChange() {
      return setAttributes({
        dropCap: !dropCap
      });
    },
    help: dropCap ? __('Showing large initial letter.') : __('Toggle to show a large initial letter.')
  }))), createElement(RichText, _extends({
    identifier: "content",
    tagName: "p"
  }, blockProps, {
    value: content,
    onChange: function onChange(newContent) {
      return setAttributes({
        content: newContent
      });
    },
    onSplit: function onSplit(value, isOriginal) {
      var newAttributes;

      if (isOriginal || value) {
        newAttributes = _objectSpread(_objectSpread({}, attributes), {}, {
          content: value
        });
      }

      var block = createBlock(name, newAttributes);

      if (isOriginal) {
        block.clientId = clientId;
      }

      return block;
    },
    onMerge: mergeBlocks,
    onReplace: onReplace,
    onRemove: onRemove,
    "aria-label": content ? __('Paragraph block') : __('Empty block; start writing or type forward slash to choose a block'),
    "data-empty": content ? false : true,
    placeholder: placeholder || __('Type / to choose a block'),
    __unstableEmbedURLOnPaste: true,
    __unstableAllowPrefixTransformations: true
  })));
}

export default ParagraphBlock;
//# sourceMappingURL=edit.js.map