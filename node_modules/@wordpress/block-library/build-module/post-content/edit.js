import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { useBlockProps, __experimentalUseInnerBlocksProps as useInnerBlocksProps, __experimentalUseEditorFeature as useEditorFeature, store as blockEditorStore } from '@wordpress/block-editor';
import { useEntityBlockEditor } from '@wordpress/core-data';

function Content(_ref) {
  var layout = _ref.layout,
      postType = _ref.postType,
      postId = _ref.postId;
  var themeSupportsLayout = useSelect(function (select) {
    var _getSettings;

    var _select = select(blockEditorStore),
        getSettings = _select.getSettings;

    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  var defaultLayout = useEditorFeature('layout') || {};
  var usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  var contentSize = usedLayout.contentSize,
      wideSize = usedLayout.wideSize;
  var alignments = contentSize || wideSize ? ['wide', 'full'] : ['left', 'center', 'right'];

  var _useEntityBlockEditor = useEntityBlockEditor('postType', postType, {
    id: postId
  }),
      _useEntityBlockEditor2 = _slicedToArray(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  var props = useInnerBlocksProps(useBlockProps({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput: onInput,
    onChange: onChange,
    __experimentalLayout: {
      type: 'default',
      // Find a way to inject this in the support flag code (hooks).
      alignments: themeSupportsLayout ? alignments : undefined
    }
  });
  return createElement("div", props);
}

function Placeholder() {
  var blockProps = useBlockProps();
  return createElement("div", blockProps, createElement("div", {
    className: "wp-block-post-content__placeholder"
  }, createElement("span", null, __('This is a placeholder for post content.'))));
}

export default function PostContentEdit(_ref2) {
  var _ref2$context = _ref2.context,
      contextPostId = _ref2$context.postId,
      contextPostType = _ref2$context.postType,
      attributes = _ref2.attributes;
  var _attributes$layout = attributes.layout,
      layout = _attributes$layout === void 0 ? {} : _attributes$layout;
  return contextPostId && contextPostType ? createElement(Content, {
    postType: contextPostType,
    postId: contextPostId,
    layout: layout
  }) : createElement(Placeholder, null);
}
//# sourceMappingURL=edit.js.map