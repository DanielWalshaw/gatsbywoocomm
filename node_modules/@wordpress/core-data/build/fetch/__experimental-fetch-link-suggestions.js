"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _url = require("@wordpress/url");

var _htmlEntities = require("@wordpress/html-entities");

var _i18n = require("@wordpress/i18n");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Filters the search by type
 *
 * @typedef { 'post' | 'term' | 'post-format' } WPLinkSearchType
 */

/**
 * A link with an id may be of kind post-type or taxonomy
 *
 * @typedef { 'post-type' | 'taxonomy' } WPKind
 */

/**
 * @typedef WPLinkSearchOptions
 *
 * @property {boolean}             [isInitialSuggestions] Displays initial search suggestions, when true.
 * @property {WPLinkSearchType}    [type]                 Filters by search type.
 * @property {string}              [subtype]              Slug of the post-type or taxonomy.
 * @property {number}              [page]                 Which page of results to return.
 * @property {number}              [perPage]              Search results per page.
 */

/**
 * @typedef WPLinkSearchResult
 *
 * @property {number} id     Post or term id.
 * @property {string} url    Link url.
 * @property {string} title  Title of the link.
 * @property {string} type   The taxonomy or post type slug or type URL.
 * @property {WPKind} [kind] Link kind of post-type or taxonomy
 */

/**
 * @typedef WPEditorSettings
 *
 * @property {boolean} [ disablePostFormats ] Disables post formats, when true.
 */

/**
 * Fetches link suggestions from the API.
 *
 * @async
 * @param {string}              search
 * @param {WPLinkSearchOptions} [searchOptions]
 * @param {WPEditorSettings}    [settings]
 *
 * @example
 * ```js
 * import { __experimentalFetchLinkSuggestions as fetchLinkSuggestions } from '@wordpress/core-data';
 *
 * //...
 *
 * export function initialize( id, settings ) {
 *
 * settings.__experimentalFetchLinkSuggestions = (
 *     search,
 *     searchOptions
 * ) => fetchLinkSuggestions( search, searchOptions, settings );
 * ```
 * @return {Promise< WPLinkSearchResult[] >} List of search suggestions
 */
var fetchLinkSuggestions = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(search) {
    var searchOptions,
        settings,
        _searchOptions$isInit,
        isInitialSuggestions,
        _searchOptions$type,
        type,
        _searchOptions$subtyp,
        subtype,
        _searchOptions$page,
        page,
        _searchOptions$perPag,
        perPage,
        _settings$disablePost,
        disablePostFormats,
        queries,
        _args = arguments;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            searchOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            settings = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            _searchOptions$isInit = searchOptions.isInitialSuggestions, isInitialSuggestions = _searchOptions$isInit === void 0 ? false : _searchOptions$isInit, _searchOptions$type = searchOptions.type, type = _searchOptions$type === void 0 ? undefined : _searchOptions$type, _searchOptions$subtyp = searchOptions.subtype, subtype = _searchOptions$subtyp === void 0 ? undefined : _searchOptions$subtyp, _searchOptions$page = searchOptions.page, page = _searchOptions$page === void 0 ? undefined : _searchOptions$page, _searchOptions$perPag = searchOptions.perPage, perPage = _searchOptions$perPag === void 0 ? isInitialSuggestions ? 3 : 20 : _searchOptions$perPag;
            _settings$disablePost = settings.disablePostFormats, disablePostFormats = _settings$disablePost === void 0 ? false : _settings$disablePost;
            queries = [];

            if (!type || type === 'post') {
              queries.push((0, _apiFetch.default)({
                path: (0, _url.addQueryArgs)('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'post',
                  subtype: subtype
                })
              }).then(function (results) {
                return results.map(function (result) {
                  return _objectSpread(_objectSpread({}, result), {}, {
                    meta: {
                      kind: 'post-type',
                      subtype: subtype
                    }
                  });
                });
              }).catch(function () {
                return [];
              }) // fail by returning no results
              );
            }

            if (!type || type === 'term') {
              queries.push((0, _apiFetch.default)({
                path: (0, _url.addQueryArgs)('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'term',
                  subtype: subtype
                })
              }).then(function (results) {
                return results.map(function (result) {
                  return _objectSpread(_objectSpread({}, result), {}, {
                    meta: {
                      kind: 'taxonomy',
                      subtype: subtype
                    }
                  });
                });
              }).catch(function () {
                return [];
              }));
            }

            if (!disablePostFormats && (!type || type === 'post-format')) {
              queries.push((0, _apiFetch.default)({
                path: (0, _url.addQueryArgs)('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'post-format',
                  subtype: subtype
                })
              }).catch(function () {
                return [];
              }));
            }

            return _context.abrupt("return", Promise.all(queries).then(function (results) {
              return results.reduce(function (accumulator, current) {
                return accumulator.concat(current);
              }, //flatten list
              []).filter(
              /**
               * @param {{ id: number }} result
               */
              function (result) {
                return !!result.id;
              }).slice(0, perPage).map(
              /**
               * @param {{ id: number, url:string, title?:string, subtype?: string, type?: string }} result
               */
              function (result) {
                var _result$meta;

                return {
                  id: result.id,
                  url: result.url,
                  title: (0, _htmlEntities.decodeEntities)(result.title || '') || (0, _i18n.__)('(no title)'),
                  type: result.subtype || result.type,
                  kind: result === null || result === void 0 ? void 0 : (_result$meta = result.meta) === null || _result$meta === void 0 ? void 0 : _result$meta.kind
                };
              });
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchLinkSuggestions(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = fetchLinkSuggestions;
exports.default = _default;
//# sourceMappingURL=__experimental-fetch-link-suggestions.js.map