"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropZoneComponent;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _dom = require("@wordpress/dom");

var _compose = require("@wordpress/compose");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function DropZoneComponent(_ref) {
  var className = _ref.className,
      label = _ref.label,
      onFilesDrop = _ref.onFilesDrop,
      onHTMLDrop = _ref.onHTMLDrop,
      _onDrop = _ref.onDrop;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isDraggingOverDocument = _useState2[0],
      setIsDraggingOverDocument = _useState2[1];

  var _useState3 = (0, _element.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isDraggingOverElement = _useState4[0],
      setIsDraggingOverElement = _useState4[1];

  var _useState5 = (0, _element.useState)(),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      type = _useState6[0],
      setType = _useState6[1];

  var ref = (0, _compose.__experimentalUseDropZone)({
    onDrop: function onDrop(event) {
      var files = (0, _dom.getFilesFromDataTransfer)(event.dataTransfer);
      var html = event.dataTransfer.getData('text/html');

      if (files.length && onFilesDrop) {
        onFilesDrop(files);
      } else if (html && onHTMLDrop) {
        onHTMLDrop(html);
      } else if (_onDrop) {
        _onDrop(event);
      }
    },
    onDragStart: function onDragStart(event) {
      setIsDraggingOverDocument(true);
      var _type = 'default';

      if ( // Check for the types because sometimes the files themselves
      // are only available on drop.
      (0, _lodash.includes)(event.dataTransfer.types, 'Files') || (0, _dom.getFilesFromDataTransfer)(event.dataTransfer).length > 0) {
        _type = 'file';
      } else if ((0, _lodash.includes)(event.dataTransfer.types, 'text/html')) {
        _type = 'html';
      }

      setType(_type);
    },
    onDragEnd: function onDragEnd() {
      setIsDraggingOverDocument(false);
      setType();
    },
    onDragEnter: function onDragEnter() {
      setIsDraggingOverElement(true);
    },
    onDragLeave: function onDragLeave() {
      setIsDraggingOverElement(false);
    }
  });
  var children;

  if (isDraggingOverElement) {
    children = (0, _element.createElement)("div", {
      className: "components-drop-zone__content"
    }, (0, _element.createElement)(_icons.Icon, {
      icon: _icons.upload,
      className: "components-drop-zone__content-icon"
    }), (0, _element.createElement)("span", {
      className: "components-drop-zone__content-text"
    }, label ? label : (0, _i18n.__)('Drop files to upload')));
  }

  var classes = (0, _classnames2.default)('components-drop-zone', className, (0, _defineProperty2.default)({
    'is-active': (isDraggingOverDocument || isDraggingOverElement) && (type === 'file' && onFilesDrop || type === 'html' && onHTMLDrop || type === 'default' && _onDrop),
    'is-dragging-over-document': isDraggingOverDocument,
    'is-dragging-over-element': isDraggingOverElement
  }, "is-dragging-".concat(type), !!type));
  return (0, _element.createElement)("div", {
    ref: ref,
    className: classes
  }, children);
}
//# sourceMappingURL=index.js.map