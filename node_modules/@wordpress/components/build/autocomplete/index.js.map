{"version":3,"sources":["@wordpress/components/src/autocomplete/index.js"],"names":["filterOptions","search","options","maxResults","filtered","i","length","option","keywords","label","isMatch","some","keyword","test","push","getAutoCompleterUI","autocompleter","useItems","filterValue","items","setItems","isDebounced","loadOptions","promise","Promise","resolve","then","optionsData","canceled","keyedOptions","map","optionData","optionIndex","key","name","value","getOptionLabel","getOptionKeywords","isDisabled","isOptionDisabled","RegExp","cancel","AutocompleterUI","instanceId","listBoxId","className","selectedIndex","onChangeOptions","onSelect","onReset","contentRef","anchorRef","ref","index","Autocomplete","children","isSelected","record","onChange","onReplace","completers","debouncedSpeak","setSelectedIndex","filteredOptions","setFilteredOptions","setFilterValue","setAutocompleter","setAutocompleterUI","backspacing","setBackspacing","insertCompletion","replacement","end","start","triggerPrefix","toInsert","html","select","getOptionCompletion","completion","undefined","action","reset","announce","handleKeyDown","event","keyCode","BACKSPACE","UP","DOWN","ESCAPE","ENTER","LEFT","RIGHT","preventDefault","stopPropagation","textContent","text","textAfterSelection","completer","allowContext","lastIndexOf","textWithoutTrigger","slice","tooDistantFromTrigger","mismatch","wordsFromTrigger","split","hasOneTriggerWord","matchingWhileBackspacing","safeTrigger","match","query","selectedKey","isExpanded","activeId","onKeyDown"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escapeRegExp, find, map, debounce, deburr } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\trenderToString,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseState,\n} from '@wordpress/element';\nimport {\n\tENTER,\n\tESCAPE,\n\tUP,\n\tDOWN,\n\tLEFT,\n\tRIGHT,\n\tBACKSPACE,\n} from '@wordpress/keycodes';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { useInstanceId } from '@wordpress/compose';\nimport {\n\tcreate,\n\tslice,\n\tinsert,\n\tisCollapsed,\n\tgetTextContent,\n\tuseAnchorRef,\n} from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport Button from '../button';\nimport Popover from '../popover';\nimport withSpokenMessages from '../higher-order/with-spoken-messages';\n\n/**\n * A raw completer option.\n *\n * @typedef {*} CompleterOption\n */\n\n/**\n * @callback FnGetOptions\n *\n * @return {(CompleterOption[]|Promise.<CompleterOption[]>)} The completer options or a promise for them.\n */\n\n/**\n * @callback FnGetOptionKeywords\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} list of key words to search.\n */\n\n/**\n * @callback FnIsOptionDisabled\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} whether or not the given option is disabled.\n */\n\n/**\n * @callback FnGetOptionLabel\n * @param {CompleterOption} option a completer option.\n *\n * @return {(string|Array.<(string|WPElement)>)} list of react components to render.\n */\n\n/**\n * @callback FnAllowContext\n * @param {string} before the string before the auto complete trigger and query.\n * @param {string} after  the string after the autocomplete trigger and query.\n *\n * @return {boolean} true if the completer can handle.\n */\n\n/**\n * @typedef {Object} OptionCompletion\n * @property {'insert-at-caret'|'replace'} action the intended placement of the completion.\n * @property {OptionCompletionValue} value the completion value.\n */\n\n/**\n * A completion value.\n *\n * @typedef {(string|WPElement|Object)} OptionCompletionValue\n */\n\n/**\n * @callback FnGetOptionCompletion\n * @param {CompleterOption} value the value of the completer option.\n * @param {string} query the text value of the autocomplete query.\n *\n * @return {(OptionCompletion|OptionCompletionValue)} the completion for the given option. If an\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   OptionCompletionValue is returned, the\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   completion action defaults to `insert-at-caret`.\n */\n\n/**\n * @typedef {Object} WPCompleter\n * @property {string} name a way to identify a completer, useful for selective overriding.\n * @property {?string} className A class to apply to the popup menu.\n * @property {string} triggerPrefix the prefix that will display the menu.\n * @property {(CompleterOption[]|FnGetOptions)} options the completer options or a function to get them.\n * @property {?FnGetOptionKeywords} getOptionKeywords get the keywords for a given option.\n * @property {?FnIsOptionDisabled} isOptionDisabled get whether or not the given option is disabled.\n * @property {FnGetOptionLabel} getOptionLabel get the label for a given option.\n * @property {?FnAllowContext} allowContext filter the context under which the autocomplete activates.\n * @property {FnGetOptionCompletion} getOptionCompletion get the completion associated with a given option.\n */\n\nfunction filterOptions( search, options = [], maxResults = 10 ) {\n\tconst filtered = [];\n\tfor ( let i = 0; i < options.length; i++ ) {\n\t\tconst option = options[ i ];\n\n\t\t// Merge label into keywords\n\t\tlet { keywords = [] } = option;\n\t\tif ( 'string' === typeof option.label ) {\n\t\t\tkeywords = [ ...keywords, option.label ];\n\t\t}\n\n\t\tconst isMatch = keywords.some( ( keyword ) =>\n\t\t\tsearch.test( deburr( keyword ) )\n\t\t);\n\t\tif ( ! isMatch ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfiltered.push( option );\n\n\t\t// Abort early if max reached\n\t\tif ( filtered.length === maxResults ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn filtered;\n}\n\nconst getAutoCompleterUI = ( autocompleter ) => {\n\tconst useItems = autocompleter.useItems\n\t\t? autocompleter.useItems\n\t\t: ( filterValue ) => {\n\t\t\t\tconst [ items, setItems ] = useState( [] );\n\t\t\t\t/*\n\t\t\t\t * We support both synchronous and asynchronous retrieval of completer options\n\t\t\t\t * but internally treat all as async so we maintain a single, consistent code path.\n\t\t\t\t *\n\t\t\t\t * Because networks can be slow, and the internet is wonderfully unpredictable,\n\t\t\t\t * we don't want two promises updating the state at once. This ensures that only\n\t\t\t\t * the most recent promise will act on `optionsData`. This doesn't use the state\n\t\t\t\t * because `setState` is batched, and so there's no guarantee that setting\n\t\t\t\t * `activePromise` in the state would result in it actually being in `this.state`\n\t\t\t\t * before the promise resolves and we check to see if this is the active promise or not.\n\t\t\t\t */\n\t\t\t\tuseLayoutEffect( () => {\n\t\t\t\t\tconst { options, isDebounced } = autocompleter;\n\t\t\t\t\tconst loadOptions = debounce(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tconst promise = Promise.resolve(\n\t\t\t\t\t\t\t\ttypeof options === 'function'\n\t\t\t\t\t\t\t\t\t? options( filterValue )\n\t\t\t\t\t\t\t\t\t: options\n\t\t\t\t\t\t\t).then( ( optionsData ) => {\n\t\t\t\t\t\t\t\tif ( promise.canceled ) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst keyedOptions = optionsData.map(\n\t\t\t\t\t\t\t\t\t( optionData, optionIndex ) => ( {\n\t\t\t\t\t\t\t\t\t\tkey: `${ autocompleter.name }-${ optionIndex }`,\n\t\t\t\t\t\t\t\t\t\tvalue: optionData,\n\t\t\t\t\t\t\t\t\t\tlabel: autocompleter.getOptionLabel(\n\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tkeywords: autocompleter.getOptionKeywords\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.getOptionKeywords(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\t\t\t\t\tisDisabled: autocompleter.isOptionDisabled\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.isOptionDisabled(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// create a regular expression to filter the options\n\t\t\t\t\t\t\t\tconst search = new RegExp(\n\t\t\t\t\t\t\t\t\t'(?:\\\\b|\\\\s|^)' +\n\t\t\t\t\t\t\t\t\t\tescapeRegExp( filterValue ),\n\t\t\t\t\t\t\t\t\t'i'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetItems(\n\t\t\t\t\t\t\t\t\tfilterOptions( search, keyedOptions )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\treturn promise;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisDebounced ? 250 : 0\n\t\t\t\t\t);\n\n\t\t\t\t\tconst promise = loadOptions();\n\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tloadOptions.cancel();\n\t\t\t\t\t\tif ( promise ) {\n\t\t\t\t\t\t\tpromise.canceled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}, [ filterValue ] );\n\n\t\t\t\treturn [ items ];\n\t\t  };\n\n\tfunction AutocompleterUI( {\n\t\tfilterValue,\n\t\tinstanceId,\n\t\tlistBoxId,\n\t\tclassName,\n\t\tselectedIndex,\n\t\tonChangeOptions,\n\t\tonSelect,\n\t\tonReset,\n\t\tvalue,\n\t\tcontentRef,\n\t} ) {\n\t\tconst [ items ] = useItems( filterValue );\n\t\tconst anchorRef = useAnchorRef( { ref: contentRef, value } );\n\n\t\tuseLayoutEffect( () => {\n\t\t\tonChangeOptions( items );\n\t\t}, [ items ] );\n\n\t\tif ( ! items.length > 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<Popover\n\t\t\t\tfocusOnMount={ false }\n\t\t\t\tonClose={ onReset }\n\t\t\t\tposition=\"top right\"\n\t\t\t\tclassName=\"components-autocomplete__popover\"\n\t\t\t\tanchorRef={ anchorRef }\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tid={ listBoxId }\n\t\t\t\t\trole=\"listbox\"\n\t\t\t\t\tclassName=\"components-autocomplete__results\"\n\t\t\t\t>\n\t\t\t\t\t{ map( items, ( option, index ) => (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={ option.key }\n\t\t\t\t\t\t\tid={ `components-autocomplete-item-${ instanceId }-${ option.key }` }\n\t\t\t\t\t\t\trole=\"option\"\n\t\t\t\t\t\t\taria-selected={ index === selectedIndex }\n\t\t\t\t\t\t\tdisabled={ option.isDisabled }\n\t\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t\t'components-autocomplete__result',\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'is-selected': index === selectedIndex,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tonClick={ () => onSelect( option ) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ option.label }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) ) }\n\t\t\t\t</div>\n\t\t\t</Popover>\n\t\t);\n\t}\n\n\treturn AutocompleterUI;\n};\n\nfunction Autocomplete( {\n\tchildren,\n\tisSelected,\n\trecord,\n\tonChange,\n\tonReplace,\n\tcompleters,\n\tdebouncedSpeak,\n\tcontentRef,\n} ) {\n\tconst instanceId = useInstanceId( Autocomplete );\n\tconst [ selectedIndex, setSelectedIndex ] = useState( 0 );\n\tconst [ filteredOptions, setFilteredOptions ] = useState( [] );\n\tconst [ filterValue, setFilterValue ] = useState( '' );\n\tconst [ autocompleter, setAutocompleter ] = useState( null );\n\tconst [ AutocompleterUI, setAutocompleterUI ] = useState( null );\n\tconst [ backspacing, setBackspacing ] = useState( false );\n\n\tfunction insertCompletion( replacement ) {\n\t\tconst end = record.start;\n\t\tconst start =\n\t\t\tend - autocompleter.triggerPrefix.length - filterValue.length;\n\t\tconst toInsert = create( { html: renderToString( replacement ) } );\n\n\t\tonChange( insert( record, toInsert, start, end ) );\n\t}\n\n\tfunction select( option ) {\n\t\tconst { getOptionCompletion } = autocompleter || {};\n\n\t\tif ( option.isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( getOptionCompletion ) {\n\t\t\tconst completion = getOptionCompletion( option.value, filterValue );\n\n\t\t\tconst { action, value } =\n\t\t\t\tundefined === completion.action ||\n\t\t\t\tundefined === completion.value\n\t\t\t\t\t? { action: 'insert-at-caret', value: completion }\n\t\t\t\t\t: completion;\n\n\t\t\tif ( 'replace' === action ) {\n\t\t\t\tonReplace( [ value ] );\n\t\t\t} else if ( 'insert-at-caret' === action ) {\n\t\t\t\tinsertCompletion( value );\n\t\t\t}\n\t\t}\n\n\t\t// Reset autocomplete state after insertion rather than before\n\t\t// so insertion events don't cause the completion menu to redisplay.\n\t\treset();\n\t}\n\n\tfunction reset() {\n\t\tsetSelectedIndex( 0 );\n\t\tsetFilteredOptions( [] );\n\t\tsetFilterValue( '' );\n\t\tsetAutocompleter( null );\n\t\tsetAutocompleterUI( null );\n\t}\n\n\tfunction announce( options ) {\n\t\tif ( ! debouncedSpeak ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( !! options.length ) {\n\t\t\tdebouncedSpeak(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %d: number of results. */\n\t\t\t\t\t_n(\n\t\t\t\t\t\t'%d result found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\t'%d results found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\toptions.length\n\t\t\t\t\t),\n\t\t\t\t\toptions.length\n\t\t\t\t),\n\t\t\t\t'assertive'\n\t\t\t);\n\t\t} else {\n\t\t\tdebouncedSpeak( __( 'No results.' ), 'assertive' );\n\t\t}\n\t}\n\n\t/**\n\t * Load options for an autocompleter.\n\t *\n\t * @param {Array} options\n\t */\n\tfunction onChangeOptions( options ) {\n\t\tsetSelectedIndex(\n\t\t\toptions.length === filteredOptions.length ? selectedIndex : 0\n\t\t);\n\t\tsetFilteredOptions( options );\n\t\tannounce( options );\n\t}\n\n\tfunction handleKeyDown( event ) {\n\t\tsetBackspacing( event.keyCode === BACKSPACE );\n\n\t\tif ( ! autocompleter ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( filteredOptions.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tswitch ( event.keyCode ) {\n\t\t\tcase UP:\n\t\t\t\tsetSelectedIndex(\n\t\t\t\t\t( selectedIndex === 0\n\t\t\t\t\t\t? filteredOptions.length\n\t\t\t\t\t\t: selectedIndex ) - 1\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase DOWN:\n\t\t\t\tsetSelectedIndex(\n\t\t\t\t\t( selectedIndex + 1 ) % filteredOptions.length\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase ESCAPE:\n\t\t\t\tsetAutocompleter( null );\n\t\t\t\tsetAutocompleterUI( null );\n\t\t\t\tbreak;\n\n\t\t\tcase ENTER:\n\t\t\t\tselect( filteredOptions[ selectedIndex ] );\n\t\t\t\tbreak;\n\n\t\t\tcase LEFT:\n\t\t\tcase RIGHT:\n\t\t\t\treset();\n\t\t\t\treturn;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\t// Any handled keycode should prevent original behavior. This relies on\n\t\t// the early return in the default case.\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n\n\tlet textContent;\n\n\tif ( isCollapsed( record ) ) {\n\t\ttextContent = getTextContent( slice( record, 0 ) );\n\t}\n\n\tuseEffect( () => {\n\t\tif ( ! textContent ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = deburr( textContent );\n\t\tconst textAfterSelection = getTextContent(\n\t\t\tslice( record, undefined, getTextContent( record ).length )\n\t\t);\n\t\tconst completer = find(\n\t\t\tcompleters,\n\t\t\t( { triggerPrefix, allowContext } ) => {\n\t\t\t\tconst index = text.lastIndexOf( triggerPrefix );\n\n\t\t\t\tif ( index === -1 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst textWithoutTrigger = text.slice(\n\t\t\t\t\tindex + triggerPrefix.length\n\t\t\t\t);\n\n\t\t\t\tconst tooDistantFromTrigger = textWithoutTrigger.length > 50; // 50 chars seems to be a good limit.\n\t\t\t\t// This is a final barrier to prevent the effect from completing with\n\t\t\t\t// an extremely long string, which causes the editor to slow-down\n\t\t\t\t// significantly. This could happen, for example, if `matchingWhileBackspacing`\n\t\t\t\t// is true and one of the \"words\" end up being too long. If that's the case,\n\t\t\t\t// it will be caught by this guard.\n\t\t\t\tif ( tooDistantFromTrigger ) return false;\n\n\t\t\t\tconst mismatch = filteredOptions.length === 0;\n\t\t\t\tconst wordsFromTrigger = textWithoutTrigger.split( /\\s/ );\n\t\t\t\t// We need to allow the effect to run when not backspacing and if there\n\t\t\t\t// was a mismatch. i.e when typing a trigger + the match string or when\n\t\t\t\t// clicking in an existing trigger word on the page. We do that if we\n\t\t\t\t// detect that we have one word from trigger in the current textual context.\n\t\t\t\t//\n\t\t\t\t// Ex.: \"Some text @a\" <-- \"@a\" will be detected as the trigger word and\n\t\t\t\t// allow the effect to run. It will run until there's a mismatch.\n\t\t\t\tconst hasOneTriggerWord = wordsFromTrigger.length === 1;\n\t\t\t\t// This is used to allow the effect to run when backspacing and if\n\t\t\t\t// \"touching\" a word that \"belongs\" to a trigger. We consider a \"trigger\n\t\t\t\t// word\" any word up to the limit of 3 from the trigger character.\n\t\t\t\t// Anything beyond that is ignored if there's a mismatch. This allows\n\t\t\t\t// us to \"escape\" a mismatch when backspacing, but still imposing some\n\t\t\t\t// sane limits.\n\t\t\t\t//\n\t\t\t\t// Ex: \"Some text @marcelo sekkkk\" <--- \"kkkk\" caused a mismatch, but\n\t\t\t\t// if the user presses backspace here, it will show the completion popup again.\n\t\t\t\tconst matchingWhileBackspacing =\n\t\t\t\t\tbackspacing && textWithoutTrigger.split( /\\s/ ).length <= 3;\n\n\t\t\t\tif (\n\t\t\t\t\tmismatch &&\n\t\t\t\t\t! ( matchingWhileBackspacing || hasOneTriggerWord )\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tallowContext &&\n\t\t\t\t\t! allowContext( text.slice( 0, index ), textAfterSelection )\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t/^\\s/.test( textWithoutTrigger ) ||\n\t\t\t\t\t/\\s\\s+$/.test( textWithoutTrigger )\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn /[\\u0000-\\uFFFF]*$/.test( textWithoutTrigger );\n\t\t\t}\n\t\t);\n\n\t\tif ( ! completer ) {\n\t\t\treset();\n\t\t\treturn;\n\t\t}\n\n\t\tconst safeTrigger = escapeRegExp( completer.triggerPrefix );\n\t\tconst match = text\n\t\t\t.slice( text.lastIndexOf( completer.triggerPrefix ) )\n\t\t\t.match( new RegExp( `${ safeTrigger }([\\u0000-\\uFFFF]*)$` ) );\n\t\tconst query = match && match[ 1 ];\n\n\t\tsetAutocompleter( completer );\n\t\tsetAutocompleterUI( () =>\n\t\t\tcompleter !== autocompleter\n\t\t\t\t? getAutoCompleterUI( completer )\n\t\t\t\t: AutocompleterUI\n\t\t);\n\t\tsetFilterValue( query );\n\t}, [ textContent ] );\n\n\tconst { key: selectedKey = '' } = filteredOptions[ selectedIndex ] || {};\n\tconst { className } = autocompleter || {};\n\tconst isExpanded = !! autocompleter && filteredOptions.length > 0;\n\tconst listBoxId = isExpanded\n\t\t? `components-autocomplete-listbox-${ instanceId }`\n\t\t: null;\n\tconst activeId = isExpanded\n\t\t? `components-autocomplete-item-${ instanceId }-${ selectedKey }`\n\t\t: null;\n\n\treturn (\n\t\t<>\n\t\t\t{ children( {\n\t\t\t\tisExpanded,\n\t\t\t\tlistBoxId,\n\t\t\t\tactiveId,\n\t\t\t\tonKeyDown: handleKeyDown,\n\t\t\t} ) }\n\t\t\t{ isSelected && AutocompleterUI && (\n\t\t\t\t<AutocompleterUI\n\t\t\t\t\tclassName={ className }\n\t\t\t\t\tfilterValue={ filterValue }\n\t\t\t\t\tinstanceId={ instanceId }\n\t\t\t\t\tlistBoxId={ listBoxId }\n\t\t\t\t\tselectedIndex={ selectedIndex }\n\t\t\t\t\tonChangeOptions={ onChangeOptions }\n\t\t\t\t\tonSelect={ select }\n\t\t\t\t\tvalue={ record }\n\t\t\t\t\tcontentRef={ contentRef }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default withSpokenMessages( Autocomplete );\n"]}