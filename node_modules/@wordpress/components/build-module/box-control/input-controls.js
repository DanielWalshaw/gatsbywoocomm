import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { noop } from 'lodash';
/**
 * Internal dependencies
 */

import UnitControl from './unit-control';
import { LABELS } from './utils';
import { LayoutContainer, Layout } from './styles/box-control-styles';
var allSides = ['top', 'right', 'bottom', 'left'];
export default function BoxInputControls(_ref) {
  var _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onFocus = _ref.onFocus,
      onFocus = _ref$onFocus === void 0 ? noop : _ref$onFocus,
      _ref$onHoverOn = _ref.onHoverOn,
      onHoverOn = _ref$onHoverOn === void 0 ? noop : _ref$onHoverOn,
      _ref$onHoverOff = _ref.onHoverOff,
      onHoverOff = _ref$onHoverOff === void 0 ? noop : _ref$onHoverOff,
      values = _ref.values,
      sides = _ref.sides,
      props = _objectWithoutProperties(_ref, ["onChange", "onFocus", "onHoverOn", "onHoverOff", "values", "sides"]);

  var createHandleOnFocus = function createHandleOnFocus(side) {
    return function (event) {
      onFocus(event, {
        side: side
      });
    };
  };

  var createHandleOnHoverOn = function createHandleOnHoverOn(side) {
    return function () {
      onHoverOn(_defineProperty({}, side, true));
    };
  };

  var createHandleOnHoverOff = function createHandleOnHoverOff(side) {
    return function () {
      onHoverOff(_defineProperty({}, side, false));
    };
  };

  var handleOnChange = function handleOnChange(nextValues) {
    onChange(nextValues);
  };

  var createHandleOnChange = function createHandleOnChange(side) {
    return function (next, _ref2) {
      var event = _ref2.event;
      var altKey = event.altKey;

      var nextValues = _objectSpread({}, values);

      nextValues[side] = next;
      /**
       * Supports changing pair sides. For example, holding the ALT key
       * when changing the TOP will also update BOTTOM.
       */

      if (altKey) {
        switch (side) {
          case 'top':
            nextValues.bottom = next;
            break;

          case 'bottom':
            nextValues.top = next;
            break;

          case 'left':
            nextValues.right = next;
            break;

          case 'right':
            nextValues.left = next;
            break;
        }
      }

      handleOnChange(nextValues);
    };
  }; // Filter sides if custom configuration provided, maintaining default order.


  var filteredSides = sides !== null && sides !== void 0 && sides.length ? allSides.filter(function (side) {
    return sides.includes(side);
  }) : allSides;
  var first = filteredSides[0];
  var last = filteredSides[filteredSides.length - 1];
  var only = first === last && first;
  return createElement(LayoutContainer, {
    className: "component-box-control__input-controls-wrapper"
  }, createElement(Layout, {
    gap: 0,
    align: "top",
    className: "component-box-control__input-controls"
  }, filteredSides.map(function (side) {
    return createElement(UnitControl, _extends({}, props, {
      isFirst: first === side,
      isLast: last === side,
      isOnly: only === side,
      value: values[side],
      onChange: createHandleOnChange(side),
      onFocus: createHandleOnFocus(side),
      onHoverOn: createHandleOnHoverOn(side),
      onHoverOff: createHandleOnHoverOff(side),
      label: LABELS.top,
      key: "box-control-".concat(side)
    }));
  })));
}
//# sourceMappingURL=input-controls.js.map