import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { includes } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { useState } from '@wordpress/element';
import { upload, Icon } from '@wordpress/icons';
import { getFilesFromDataTransfer } from '@wordpress/dom';
import { __experimentalUseDropZone as useDropZone } from '@wordpress/compose';
export default function DropZoneComponent(_ref) {
  var className = _ref.className,
      label = _ref.label,
      onFilesDrop = _ref.onFilesDrop,
      onHTMLDrop = _ref.onHTMLDrop,
      _onDrop = _ref.onDrop;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      isDraggingOverDocument = _useState2[0],
      setIsDraggingOverDocument = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      isDraggingOverElement = _useState4[0],
      setIsDraggingOverElement = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      type = _useState6[0],
      setType = _useState6[1];

  var ref = useDropZone({
    onDrop: function onDrop(event) {
      var files = getFilesFromDataTransfer(event.dataTransfer);
      var html = event.dataTransfer.getData('text/html');

      if (files.length && onFilesDrop) {
        onFilesDrop(files);
      } else if (html && onHTMLDrop) {
        onHTMLDrop(html);
      } else if (_onDrop) {
        _onDrop(event);
      }
    },
    onDragStart: function onDragStart(event) {
      setIsDraggingOverDocument(true);
      var _type = 'default';

      if ( // Check for the types because sometimes the files themselves
      // are only available on drop.
      includes(event.dataTransfer.types, 'Files') || getFilesFromDataTransfer(event.dataTransfer).length > 0) {
        _type = 'file';
      } else if (includes(event.dataTransfer.types, 'text/html')) {
        _type = 'html';
      }

      setType(_type);
    },
    onDragEnd: function onDragEnd() {
      setIsDraggingOverDocument(false);
      setType();
    },
    onDragEnter: function onDragEnter() {
      setIsDraggingOverElement(true);
    },
    onDragLeave: function onDragLeave() {
      setIsDraggingOverElement(false);
    }
  });
  var children;

  if (isDraggingOverElement) {
    children = createElement("div", {
      className: "components-drop-zone__content"
    }, createElement(Icon, {
      icon: upload,
      className: "components-drop-zone__content-icon"
    }), createElement("span", {
      className: "components-drop-zone__content-text"
    }, label ? label : __('Drop files to upload')));
  }

  var classes = classnames('components-drop-zone', className, _defineProperty({
    'is-active': (isDraggingOverDocument || isDraggingOverElement) && (type === 'file' && onFilesDrop || type === 'html' && onHTMLDrop || type === 'default' && _onDrop),
    'is-dragging-over-document': isDraggingOverDocument,
    'is-dragging-over-element': isDraggingOverElement
  }, "is-dragging-".concat(type), !!type));
  return createElement("div", {
    ref: ref,
    className: classes
  }, children);
}
//# sourceMappingURL=index.js.map