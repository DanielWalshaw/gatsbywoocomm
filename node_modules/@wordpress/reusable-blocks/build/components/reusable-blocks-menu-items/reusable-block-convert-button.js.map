{"version":3,"sources":["@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js"],"names":["ReusableBlockConvertButton","clientIds","rootClientId","isModalOpen","setIsModalOpen","title","setTitle","canConvert","select","canUser","getBlocksByClientId","canInsertBlockType","blocks","isReusable","length","getEntityRecord","attributes","ref","_canConvert","every","block","isValid","name","store","convertBlocksToReusable","__experimentalConvertBlocksToReusable","noticesStore","createSuccessNotice","createErrorNotice","onConvert","reusableBlockTitle","type","message","onClose","reusableBlock","event","preventDefault"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tMenuItem,\n\tModal,\n\tButton,\n\tTextControl,\n\tFlex,\n\tFlexItem,\n} from '@wordpress/components';\nimport { reusableBlock } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n} ) {\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst [ title, setTitle ] = useState( '' );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( 'core' );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( 'core' ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootClientId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlocksToReusable: convertBlocksToReusable,\n\t} = useDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch(\n\t\tnoticesStore\n\t);\n\tconst onConvert = useCallback(\n\t\tasync function ( reusableBlockTitle ) {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable( clientIds, reusableBlockTitle );\n\t\t\t\tcreateSuccessNotice( __( 'Reusable block created.' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\ticon={ reusableBlock }\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tsetIsModalOpen( true );\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t{ isModalOpen && (\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\ttitle={ __( 'Create Reusable block' ) }\n\t\t\t\t\t\t\tcloseLabel={ __( 'Close' ) }\n\t\t\t\t\t\t\tonRequestClose={ () => {\n\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\t\tonConvert( title );\n\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Flex\n\t\t\t\t\t\t\t\t\tclassName=\"reusable-blocks-menu-items__convert-modal-actions\"\n\t\t\t\t\t\t\t\t\tjustify=\"flex-end\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tisSecondary\n\t\t\t\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\t\t\t<Button isPrimary type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Save' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</Modal>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n"]}