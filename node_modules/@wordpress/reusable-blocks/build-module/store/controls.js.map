{"version":3,"sources":["@wordpress/reusable-blocks/src/store/controls.js"],"names":["isFunction","isReusableBlock","createBlock","parse","serialize","createRegistryControl","__","store","reusableBlocksStore","convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","title","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","registry","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","getBlocksByClientId","status","saveEntityRecord","updatedRecord","newBlock","__experimentalSetEditingReusableBlock","DELETE_REUSABLE_BLOCK","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isFunction } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tisReusableBlock,\n\tcreateBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from './index.js';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string}  clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array} clientIds Block IDs.\n * @param {string} title    Reusable block title.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds, title ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t\ttitle,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl(\n\t\t( registry ) => ( { clientId } ) => {\n\t\t\tconst oldBlock = registry\n\t\t\t\t.select( 'core/block-editor' )\n\t\t\t\t.getBlock( clientId );\n\t\t\tconst reusableBlock = registry\n\t\t\t\t.select( 'core' )\n\t\t\t\t.getEditedEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\toldBlock.attributes.ref\n\t\t\t\t);\n\n\t\t\tconst newBlocks = parse(\n\t\t\t\tisFunction( reusableBlock.content )\n\t\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t\t: reusableBlock.content\n\t\t\t);\n\t\t\tregistry\n\t\t\t\t.dispatch( 'core/block-editor' )\n\t\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t\t}\n\t),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds, title } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: title || __( 'Untitled Reusable block' ),\n\t\t\t\t\tcontent: serialize(\n\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t.select( 'core/block-editor' )\n\t\t\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t\t\t),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( 'core/block-editor' )\n\t\t\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock(\n\t\t\t\t\t\tnewBlock.clientId,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry\n\t\t\t\t\t.select( 'core' )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry\n\t\t\t\t\t.select( 'core/block-editor' )\n\t\t\t\t\t.getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\tisReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t\t\t( block ) => block.clientId\n\t\t\t\t);\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry\n\t\t\t\t\t\t.dispatch( 'core/block-editor' )\n\t\t\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"]}