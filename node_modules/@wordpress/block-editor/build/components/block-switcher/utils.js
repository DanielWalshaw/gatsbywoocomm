"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRetainedBlockAttributes = exports.getMatchingBlockByName = void 0;

var _blocks = require("@wordpress/blocks");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Try to find a matching block by a block's name in a provided
 * block. We recurse through InnerBlocks and return the reference
 * of the matched block (it could be an InnerBlock).
 * If no match is found return nothing.
 *
 * @param {WPBlock} block The block to try to find a match.
 * @param {string} selectedBlockName The block's name to use for matching condition.
 * @param {Set} consumedBlocks A set holding the previously matched/consumed blocks.
 *
 * @return {WPBlock?} The matched block if found or nothing(`undefined`).
 */
var getMatchingBlockByName = function getMatchingBlockByName(block, selectedBlockName) {
  var consumedBlocks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();
  var clientId = block.clientId,
      name = block.name,
      _block$innerBlocks = block.innerBlocks,
      innerBlocks = _block$innerBlocks === void 0 ? [] : _block$innerBlocks; // Check if block has been consumed already.

  if (consumedBlocks.has(clientId)) return;
  if (name === selectedBlockName) return block; // Try to find a matching block from InnerBlocks recursively.

  var _iterator = _createForOfIteratorHelper(innerBlocks),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var innerBlock = _step.value;
      var match = getMatchingBlockByName(innerBlock, selectedBlockName, consumedBlocks);
      if (match) return match;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
/**
 * Find and return the block attributes to retain through
 * the transformation, based on Block Type's `role:content`
 * attributes. If no `role:content` attributes exist,
 * return selected block's attributes.
 *
 * @param {string} name Block type's namespaced name.
 * @param {Object} attributes Selected block's attributes.
 * @return {Object} The block's attributes to retain.
 */


exports.getMatchingBlockByName = getMatchingBlockByName;

var getRetainedBlockAttributes = function getRetainedBlockAttributes(name, attributes) {
  var contentAttributes = (0, _blocks.__experimentalGetBlockAttributesNamesByRole)(name, 'content');
  if (!(contentAttributes !== null && contentAttributes !== void 0 && contentAttributes.length)) return attributes;
  return contentAttributes.reduce(function (_accumulator, attribute) {
    if (attributes[attribute]) _accumulator[attribute] = attributes[attribute];
    return _accumulator;
  }, {});
};

exports.getRetainedBlockAttributes = getRetainedBlockAttributes;
//# sourceMappingURL=utils.js.map