{"version":3,"sources":["@wordpress/block-editor/src/components/use-block-drop-zone/index.js"],"names":["getNearestBlockIndex","elements","position","orientation","allowedEdges","candidateIndex","candidateDistance","forEach","element","index","classList","contains","rect","getBoundingClientRect","distance","edge","undefined","isTrailingEdge","offset","isTargetDraggedBlock","useBlockDropZone","rootClientId","targetRootClientId","targetBlockIndex","setTargetBlockIndex","select","blockEditorStore","getBlockListSettings","getTemplateLock","isLockedAll","showInsertionPoint","hideInsertionPoint","onBlockDrop","throttled","event","currentTarget","blockElements","Array","from","children","targetIndex","x","clientX","y","clientY","isDisabled","onDrop","onDragOver","onDragEnd","cancel"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tuseThrottle,\n\t__experimentalUseDropZone as useDropZone,\n} from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useOnBlockDrop from '../use-on-block-drop';\nimport { getDistanceToNearestEdge } from '../../utils/math';\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\n\n/**\n * The orientation of a block list.\n *\n * @typedef {'horizontal'|'vertical'|undefined} WPBlockListOrientation\n */\n\n/**\n * Given a list of block DOM elements finds the index that a block should be dropped\n * at.\n *\n * @param {Element[]}              elements    Array of DOM elements that represent each block in a block list.\n * @param {WPPoint}                position    The position of the item being dragged.\n * @param {WPBlockListOrientation} orientation The orientation of a block list.\n *\n * @return {number|undefined} The block index that's closest to the drag position.\n */\nexport function getNearestBlockIndex( elements, position, orientation ) {\n\tconst allowedEdges =\n\t\torientation === 'horizontal'\n\t\t\t? [ 'left', 'right' ]\n\t\t\t: [ 'top', 'bottom' ];\n\n\tlet candidateIndex;\n\tlet candidateDistance;\n\n\telements.forEach( ( element, index ) => {\n\t\t// Ensure the element is a block. It should have the `wp-block` class.\n\t\tif ( ! element.classList.contains( 'wp-block' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rect = element.getBoundingClientRect();\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge(\n\t\t\tposition,\n\t\t\trect,\n\t\t\tallowedEdges\n\t\t);\n\n\t\tif ( candidateDistance === undefined || distance < candidateDistance ) {\n\t\t\t// If the user is dropping to the trailing edge of the block\n\t\t\t// add 1 to the index to represent dragging after.\n\t\t\tconst isTrailingEdge = edge === 'bottom' || edge === 'right';\n\t\t\tlet offset = isTrailingEdge ? 1 : 0;\n\n\t\t\t// If the target is the dragged block itself and another 1 to\n\t\t\t// index as the dragged block is set to `display: none` and\n\t\t\t// should be skipped in the calculation.\n\t\t\tconst isTargetDraggedBlock =\n\t\t\t\tisTrailingEdge &&\n\t\t\t\telements[ index + 1 ] &&\n\t\t\t\telements[ index + 1 ].classList.contains( 'is-dragging' );\n\t\t\toffset += isTargetDraggedBlock ? 1 : 0;\n\n\t\t\t// Update the currently known best candidate.\n\t\t\tcandidateDistance = distance;\n\t\t\tcandidateIndex = index + offset;\n\t\t}\n\t} );\n\n\treturn candidateIndex;\n}\n\n/**\n * @typedef  {Object} WPBlockDropZoneConfig\n * @property {string} rootClientId The root client id for the block list.\n */\n\n/**\n * A React hook that can be used to make a block list handle drag and drop.\n *\n * @param {WPBlockDropZoneConfig} dropZoneConfig configuration data for the drop zone.\n */\nexport default function useBlockDropZone( {\n\t// An undefined value represents a top-level block. Default to an empty\n\t// string for this so that `targetRootClientId` can be easily compared to\n\t// values returned by the `getRootBlockClientId` selector, which also uses\n\t// an empty string to represent top-level blocks.\n\trootClientId: targetRootClientId = '',\n} = {} ) {\n\tconst [ targetBlockIndex, setTargetBlockIndex ] = useState( null );\n\n\tconst { isLockedAll, orientation } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockListSettings, getTemplateLock } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tisLockedAll: getTemplateLock( targetRootClientId ) === 'all',\n\t\t\t\torientation: getBlockListSettings( targetRootClientId )\n\t\t\t\t\t?.orientation,\n\t\t\t};\n\t\t},\n\t\t[ targetRootClientId ]\n\t);\n\n\tconst { showInsertionPoint, hideInsertionPoint } = useDispatch(\n\t\t'core/block-editor'\n\t);\n\n\tconst onBlockDrop = useOnBlockDrop( targetRootClientId, targetBlockIndex );\n\tconst throttled = useThrottle(\n\t\tuseCallback( ( event, currentTarget ) => {\n\t\t\tconst blockElements = Array.from( currentTarget.children );\n\t\t\tconst targetIndex = getNearestBlockIndex(\n\t\t\t\tblockElements,\n\t\t\t\t{ x: event.clientX, y: event.clientY },\n\t\t\t\torientation\n\t\t\t);\n\n\t\t\tsetTargetBlockIndex( targetIndex === undefined ? 0 : targetIndex );\n\n\t\t\tif ( targetIndex !== null ) {\n\t\t\t\tshowInsertionPoint( targetRootClientId, targetIndex );\n\t\t\t}\n\t\t}, [] ),\n\t\t200\n\t);\n\n\treturn useDropZone( {\n\t\tisDisabled: isLockedAll,\n\t\tonDrop: onBlockDrop,\n\t\tonDragOver( event ) {\n\t\t\t// `currentTarget` is only available while the event is being\n\t\t\t// handled, so get it now and pass it to the thottled function.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\t\t\tthrottled( event, event.currentTarget );\n\t\t},\n\t\tonDragEnd() {\n\t\t\tthrottled.cancel();\n\t\t\thideInsertionPoint();\n\t\t\tsetTargetBlockIndex( null );\n\t\t},\n\t} );\n}\n"]}