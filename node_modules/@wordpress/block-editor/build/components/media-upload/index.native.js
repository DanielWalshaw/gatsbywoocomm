"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MediaUpload = exports.OPTION_TAKE_PHOTO_OR_VIDEO = exports.OPTION_TAKE_PHOTO = exports.OPTION_TAKE_VIDEO = exports.MEDIA_TYPE_ANY = exports.MEDIA_TYPE_AUDIO = exports.MEDIA_TYPE_VIDEO = exports.MEDIA_TYPE_IMAGE = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _reactNativeBridge = require("@wordpress/react-native-bridge");

var _icons = require("@wordpress/icons");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MEDIA_TYPE_IMAGE = 'image';
exports.MEDIA_TYPE_IMAGE = MEDIA_TYPE_IMAGE;
var MEDIA_TYPE_VIDEO = 'video';
exports.MEDIA_TYPE_VIDEO = MEDIA_TYPE_VIDEO;
var MEDIA_TYPE_AUDIO = 'audio';
exports.MEDIA_TYPE_AUDIO = MEDIA_TYPE_AUDIO;
var MEDIA_TYPE_ANY = 'any';
exports.MEDIA_TYPE_ANY = MEDIA_TYPE_ANY;
var OPTION_TAKE_VIDEO = (0, _i18n.__)('Take a Video');
exports.OPTION_TAKE_VIDEO = OPTION_TAKE_VIDEO;
var OPTION_TAKE_PHOTO = (0, _i18n.__)('Take a Photo');
exports.OPTION_TAKE_PHOTO = OPTION_TAKE_PHOTO;
var OPTION_TAKE_PHOTO_OR_VIDEO = (0, _i18n.__)('Take a Photo or Video');
exports.OPTION_TAKE_PHOTO_OR_VIDEO = OPTION_TAKE_PHOTO_OR_VIDEO;
var PICKER_OPENING_DELAY = 200;

var MediaUpload = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MediaUpload, _Component);

  var _super = _createSuper(MediaUpload);

  function MediaUpload(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MediaUpload);
    _this = _super.call(this, props);
    _this.onPickerPresent = _this.onPickerPresent.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPickerSelect = _this.onPickerSelect.bind((0, _assertThisInitialized2.default)(_this));
    _this.getAllSources = _this.getAllSources.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      otherMediaOptions: []
    };
    return _this;
  }

  (0, _createClass2.default)(MediaUpload, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$allowedTy = _this$props.allowedTypes,
          allowedTypes = _this$props$allowedTy === void 0 ? [] : _this$props$allowedTy,
          autoOpen = _this$props.autoOpen;
      (0, _reactNativeBridge.getOtherMediaOptions)(allowedTypes, function (otherMediaOptions) {
        var otherMediaOptionsWithIcons = otherMediaOptions.map(function (option) {
          return _objectSpread(_objectSpread({}, option), {}, {
            requiresModal: true,
            types: allowedTypes,
            id: option.value
          });
        });

        _this2.setState({
          otherMediaOptions: otherMediaOptionsWithIcons
        });
      });

      if (autoOpen) {
        this.onPickerPresent();
      }
    }
  }, {
    key: "getAllSources",
    value: function getAllSources() {
      var cameraImageSource = {
        id: _reactNativeBridge.mediaSources.deviceCamera,
        // ID is the value sent to native
        value: _reactNativeBridge.mediaSources.deviceCamera + '-IMAGE',
        // This is needed to diferenciate image-camera from video-camera sources.
        label: (0, _i18n.__)('Take a Photo'),
        requiresModal: true,
        types: [MEDIA_TYPE_IMAGE],
        icon: _icons.capturePhoto
      };
      var cameraVideoSource = {
        id: _reactNativeBridge.mediaSources.deviceCamera,
        value: _reactNativeBridge.mediaSources.deviceCamera,
        label: (0, _i18n.__)('Take a Video'),
        requiresModal: true,
        types: [MEDIA_TYPE_VIDEO],
        icon: _icons.captureVideo
      };
      var deviceLibrarySource = {
        id: _reactNativeBridge.mediaSources.deviceLibrary,
        value: _reactNativeBridge.mediaSources.deviceLibrary,
        label: (0, _i18n.__)('Choose from device'),
        requiresModal: true,
        types: [MEDIA_TYPE_IMAGE, MEDIA_TYPE_VIDEO],
        icon: _icons.image
      };
      var siteLibrarySource = {
        id: _reactNativeBridge.mediaSources.siteMediaLibrary,
        value: _reactNativeBridge.mediaSources.siteMediaLibrary,
        label: (0, _i18n.__)('WordPress Media Library'),
        requiresModal: true,
        types: [MEDIA_TYPE_IMAGE, MEDIA_TYPE_VIDEO, MEDIA_TYPE_AUDIO, MEDIA_TYPE_ANY],
        icon: _icons.wordpress,
        mediaLibrary: true
      };
      var internalSources = [deviceLibrarySource, cameraImageSource, cameraVideoSource, siteLibrarySource];
      return internalSources.concat(this.state.otherMediaOptions);
    }
  }, {
    key: "getMediaOptionsItems",
    value: function getMediaOptionsItems() {
      var _this3 = this;

      var _this$props2 = this.props,
          _this$props2$allowedT = _this$props2.allowedTypes,
          allowedTypes = _this$props2$allowedT === void 0 ? [] : _this$props2$allowedT,
          __experimentalOnlyMediaLibrary = _this$props2.__experimentalOnlyMediaLibrary;
      return this.getAllSources().filter(function (source) {
        return __experimentalOnlyMediaLibrary ? source.mediaLibrary : allowedTypes.some(function (allowedType) {
          return source.types.includes(allowedType);
        });
      }).map(function (source) {
        return _objectSpread(_objectSpread({}, source), {}, {
          icon: source.icon || _this3.getChooseFromDeviceIcon()
        });
      });
    }
  }, {
    key: "getChooseFromDeviceIcon",
    value: function getChooseFromDeviceIcon() {
      return _icons.mobile;
    }
  }, {
    key: "onPickerPresent",
    value: function onPickerPresent() {
      var _this4 = this;

      var autoOpen = this.props.autoOpen;
      var isIOS = _reactNative.Platform.OS === 'ios';

      if (this.picker) {
        // the delay below is required because on iOS this action sheet gets dismissed by the close event of the Inserter
        // so this delay allows the Inserter to be closed fully before presenting action sheet.
        if (autoOpen && isIOS) {
          (0, _lodash.delay)(function () {
            return _this4.picker.presentPicker();
          }, PICKER_OPENING_DELAY);
        } else {
          this.picker.presentPicker();
        }
      }
    }
  }, {
    key: "onPickerSelect",
    value: function onPickerSelect(value) {
      var _this$props3 = this.props,
          _this$props3$allowedT = _this$props3.allowedTypes,
          allowedTypes = _this$props3$allowedT === void 0 ? [] : _this$props3$allowedT,
          onSelect = _this$props3.onSelect,
          _this$props3$multiple = _this$props3.multiple,
          multiple = _this$props3$multiple === void 0 ? false : _this$props3$multiple;
      var mediaSource = this.getAllSources().filter(function (source) {
        return source.value === value;
      }).shift();
      var types = allowedTypes.filter(function (type) {
        return mediaSource.types.includes(type);
      });
      (0, _reactNativeBridge.requestMediaPicker)(mediaSource.id, types, multiple, function (media) {
        if (multiple && media || media && media.id) {
          onSelect(media);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props4 = this.props,
          _this$props4$allowedT = _this$props4.allowedTypes,
          allowedTypes = _this$props4$allowedT === void 0 ? [] : _this$props4$allowedT,
          isReplacingMedia = _this$props4.isReplacingMedia,
          multiple = _this$props4.multiple;
      var isOneType = allowedTypes.length === 1;
      var isImage = isOneType && allowedTypes.includes(MEDIA_TYPE_IMAGE);
      var isVideo = isOneType && allowedTypes.includes(MEDIA_TYPE_VIDEO);
      var isAudio = isOneType && allowedTypes.includes(MEDIA_TYPE_AUDIO);
      var isAnyType = isOneType && allowedTypes.includes(MEDIA_TYPE_ANY);
      var isImageOrVideo = allowedTypes.length === 2 && allowedTypes.includes(MEDIA_TYPE_IMAGE) && allowedTypes.includes(MEDIA_TYPE_VIDEO);
      var pickerTitle;

      if (isImage) {
        if (isReplacingMedia) {
          pickerTitle = (0, _i18n.__)('Replace image');
        } else {
          pickerTitle = multiple ? (0, _i18n.__)('Choose images') : (0, _i18n.__)('Choose image');
        }
      } else if (isVideo) {
        if (isReplacingMedia) {
          pickerTitle = (0, _i18n.__)('Replace video');
        } else {
          pickerTitle = (0, _i18n.__)('Choose video');
        }
      } else if (isImageOrVideo) {
        if (isReplacingMedia) {
          pickerTitle = (0, _i18n.__)('Replace image or video');
        } else {
          pickerTitle = (0, _i18n.__)('Choose image or video');
        }
      } else if (isAudio) {
        if (isReplacingMedia) {
          pickerTitle = (0, _i18n.__)('Replace audio');
        } else {
          pickerTitle = (0, _i18n.__)('Choose audio');
        }
      } else if (isAnyType) {
        pickerTitle = (0, _i18n.__)('Choose file');

        if (isReplacingMedia) {
          pickerTitle = (0, _i18n.__)('Replace file');
        } else {
          pickerTitle = (0, _i18n.__)('Choose file');
        }
      }

      var getMediaOptions = function getMediaOptions() {
        return (0, _element.createElement)(_components.Picker, {
          title: pickerTitle,
          hideCancelButton: true,
          ref: function ref(instance) {
            return _this5.picker = instance;
          },
          options: _this5.getMediaOptionsItems(),
          onChange: _this5.onPickerSelect
        });
      };

      return this.props.render({
        open: this.onPickerPresent,
        getMediaOptions: getMediaOptions
      });
    }
  }]);
  return MediaUpload;
}(_element.Component);

exports.MediaUpload = MediaUpload;
var _default = MediaUpload;
exports.default = _default;
//# sourceMappingURL=index.native.js.map