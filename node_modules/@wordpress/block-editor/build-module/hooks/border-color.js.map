{"version":3,"sources":["@wordpress/block-editor/src/hooks/border-color.js"],"names":["classnames","addFilter","__","createHigherOrderComponent","ColorGradientControl","getColorClassName","getColorObjectByColorValue","getColorObjectByAttributeValues","useEditorFeature","hasBorderSupport","shouldSkipSerialization","cleanEmptyObject","EMPTY_ARRAY","BorderColorEdit","props","attributes","borderColor","style","setAttributes","colors","disableCustomColors","disableCustomGradients","onChangeColor","value","colorObject","newStyle","border","color","slug","undefined","newNamedColor","addAttributes","settings","type","addSaveProps","blockType","borderColorClass","newClassName","className","addEditProps","existingGetEditWrapperProps","getEditWrapperProps","withBorderColorPaletteStyles","BlockListBlock","name","extraStyles","wrapperProps"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport ColorGradientControl from '../components/colors-gradients/control';\nimport {\n\tgetColorClassName,\n\tgetColorObjectByColorValue,\n\tgetColorObjectByAttributeValues,\n} from '../components/colors';\nimport useEditorFeature from '../components/use-editor-feature';\nimport { hasBorderSupport, shouldSkipSerialization } from './border';\nimport { cleanEmptyObject } from './utils';\n\n// Defining empty array here instead of inline avoids unnecessary re-renders of\n// color control.\nconst EMPTY_ARRAY = [];\n\n/**\n * Inspector control panel containing the border color related configuration.\n *\n * There is deliberate overlap between the colors and borders block supports\n * relating to border color. It can be argued the border color controls could\n * be included within either, or both, the colors and borders panels in the\n * inspector controls. If they share the same block attributes it should not\n * matter.\n *\n * @param  {Object} props Block properties.\n * @return {WPElement}    Border color edit element.\n */\nexport function BorderColorEdit( props ) {\n\tconst {\n\t\tattributes: { borderColor, style },\n\t\tsetAttributes,\n\t} = props;\n\tconst colors = useEditorFeature( 'color.palette' ) || EMPTY_ARRAY;\n\n\tconst disableCustomColors = ! useEditorFeature( 'color.custom' );\n\tconst disableCustomGradients = ! useEditorFeature( 'color.customGradient' );\n\n\tconst onChangeColor = ( value ) => {\n\t\tconst colorObject = getColorObjectByColorValue( colors, value );\n\t\tconst newStyle = {\n\t\t\t...style,\n\t\t\tborder: {\n\t\t\t\t...style?.border,\n\t\t\t\tcolor: colorObject?.slug ? undefined : value,\n\t\t\t},\n\t\t};\n\n\t\t// If empty slug, ensure undefined to remove attribute.\n\t\tconst newNamedColor = colorObject?.slug ? colorObject.slug : undefined;\n\n\t\tsetAttributes( {\n\t\t\tstyle: cleanEmptyObject( newStyle ),\n\t\t\tborderColor: newNamedColor,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<ColorGradientControl\n\t\t\tlabel={ __( 'Border color' ) }\n\t\t\tvalue={ borderColor || style?.border?.color }\n\t\t\tcolors={ colors }\n\t\t\tgradients={ undefined }\n\t\t\tdisableCustomColors={ disableCustomColors }\n\t\t\tdisableCustomGradients={ disableCustomGradients }\n\t\t\tonColorChange={ onChangeColor }\n\t\t/>\n\t);\n}\n\n/**\n * Filters registered block settings, extending attributes to include\n * `borderColor` if needed.\n *\n * @param  {Object} settings Original block settings.\n * @return {Object}          Updated block settings.\n */\nfunction addAttributes( settings ) {\n\tif ( ! hasBorderSupport( settings, 'color' ) ) {\n\t\treturn settings;\n\t}\n\n\t// Allow blocks to specify default value if needed.\n\tif ( settings.attributes.borderColor ) {\n\t\treturn settings;\n\t}\n\n\t// Add new borderColor attribute to block settings.\n\treturn {\n\t\t...settings,\n\t\tattributes: {\n\t\t\t...settings.attributes,\n\t\t\tborderColor: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t},\n\t};\n}\n\n/**\n * Override props assigned to save component to inject border color.\n *\n * @param  {Object} props      Additional props applied to save element.\n * @param  {Object} blockType  Block type definition.\n * @param  {Object} attributes Block's attributes\n * @return {Object}            Filtered props to apply to save element.\n */\nfunction addSaveProps( props, blockType, attributes ) {\n\tif (\n\t\t! hasBorderSupport( blockType, 'color' ) ||\n\t\tshouldSkipSerialization( blockType )\n\t) {\n\t\treturn props;\n\t}\n\n\tconst { borderColor, style } = attributes;\n\tconst borderColorClass = getColorClassName( 'border-color', borderColor );\n\n\tconst newClassName = classnames( props.className, {\n\t\t'has-border-color': borderColor || style?.border?.color,\n\t\t[ borderColorClass ]: !! borderColorClass,\n\t} );\n\n\t// If we are clearing the last of the previous classes in `className`\n\t// set it to `undefined` to avoid rendering empty DOM attributes.\n\tprops.className = newClassName ? newClassName : undefined;\n\n\treturn props;\n}\n\n/**\n * Filters the registered block settings to apply border color styles and\n * classnames to the block edit wrapper.\n *\n * @param {Object} settings Original block settings.\n * @return {Object}         Filtered block settings.\n */\nfunction addEditProps( settings ) {\n\tif (\n\t\t! hasBorderSupport( settings, 'color' ) ||\n\t\tshouldSkipSerialization( settings )\n\t) {\n\t\treturn settings;\n\t}\n\n\tconst existingGetEditWrapperProps = settings.getEditWrapperProps;\n\tsettings.getEditWrapperProps = ( attributes ) => {\n\t\tlet props = {};\n\n\t\tif ( existingGetEditWrapperProps ) {\n\t\t\tprops = existingGetEditWrapperProps( attributes );\n\t\t}\n\n\t\treturn addSaveProps( props, settings, attributes );\n\t};\n\n\treturn settings;\n}\n\n/**\n * This adds inline styles for color palette colors.\n * Ideally, this is not needed and themes should load their palettes on the editor.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nexport const withBorderColorPaletteStyles = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst { name, attributes } = props;\n\t\tconst { borderColor } = attributes;\n\t\tconst colors = useEditorFeature( 'color.palette' ) || EMPTY_ARRAY;\n\n\t\tif (\n\t\t\t! hasBorderSupport( name, 'color' ) ||\n\t\t\tshouldSkipSerialization( name )\n\t\t) {\n\t\t\treturn <BlockListBlock { ...props } />;\n\t\t}\n\n\t\tconst extraStyles = {\n\t\t\tborderColor: borderColor\n\t\t\t\t? getColorObjectByAttributeValues( colors, borderColor )?.color\n\t\t\t\t: undefined,\n\t\t};\n\n\t\tlet wrapperProps = props.wrapperProps;\n\t\twrapperProps = {\n\t\t\t...props.wrapperProps,\n\t\t\tstyle: {\n\t\t\t\t...extraStyles,\n\t\t\t\t...props.wrapperProps?.style,\n\t\t\t},\n\t\t};\n\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t}\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/border/addAttributes',\n\taddAttributes\n);\n\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/border/addSaveProps',\n\taddSaveProps\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/border/addEditProps',\n\taddEditProps\n);\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/border/with-border-color-palette-styles',\n\twithBorderColorPaletteStyles\n);\n"]}