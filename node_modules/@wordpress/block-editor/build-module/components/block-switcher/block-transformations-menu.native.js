import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { findNodeHandle, Platform } from 'react-native';
/**
 * WordPress dependencies
 */

import { __, sprintf } from '@wordpress/i18n';
import { switchToBlockType } from '@wordpress/blocks';
import { Picker } from '@wordpress/components';
import { useDispatch } from '@wordpress/data';
import { store as noticesStore } from '@wordpress/notices';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';

var BlockTransformationsMenu = function BlockTransformationsMenu(_ref) {
  var anchorNodeRef = _ref.anchorNodeRef,
      blockTitle = _ref.blockTitle,
      pickerRef = _ref.pickerRef,
      possibleTransformations = _ref.possibleTransformations,
      selectedBlock = _ref.selectedBlock,
      selectedBlockClientId = _ref.selectedBlockClientId;

  var _useDispatch = useDispatch(blockEditorStore),
      replaceBlocks = _useDispatch.replaceBlocks;

  var _useDispatch2 = useDispatch(noticesStore),
      createSuccessNotice = _useDispatch2.createSuccessNotice;

  var pickerOptions = function pickerOptions() {
    var _selectedBlock$name;

    var selectedBlockName = (_selectedBlock$name = selectedBlock === null || selectedBlock === void 0 ? void 0 : selectedBlock.name) !== null && _selectedBlock$name !== void 0 ? _selectedBlock$name : '';
    var blocksThatSplitWhenTransformed = {
      'core/list': ['core/paragraph', 'core/heading'],
      'core/quote': ['core/paragraph'],
      'core/pullquote': ['core/paragraph']
    };
    return possibleTransformations.map(function (item) {
      var label = selectedBlockName.length && blocksThatSplitWhenTransformed[selectedBlockName] && blocksThatSplitWhenTransformed[selectedBlockName].includes(item.id) ? "".concat(item.title, " blocks") : item.title;
      return {
        label: label,
        value: item.id
      };
    });
  };

  var getAnchor = function getAnchor() {
    return anchorNodeRef ? findNodeHandle(anchorNodeRef) : undefined;
  };

  function onPickerSelect(value) {
    replaceBlocks(selectedBlockClientId, switchToBlockType(selectedBlock, value));
    var selectedItem = pickerOptions().find(function (item) {
      return item.value === value;
    });
    var successNotice = sprintf(
    /* translators: 1: From block title, e.g. Paragraph. 2: To block title, e.g. Header. */
    __('%1$s transformed to %2$s'), blockTitle, selectedItem.label);
    createSuccessNotice(successNotice);
  }

  return createElement(Picker, {
    ref: pickerRef,
    options: pickerOptions(),
    onChange: onPickerSelect,
    hideCancelButton: Platform.OS !== 'ios',
    leftAlign: true,
    getAnchor: getAnchor // translators: %s: block title e.g: "Paragraph".
    ,
    title: sprintf(__('Transform %s to'), blockTitle)
  });
};

export default BlockTransformationsMenu;
//# sourceMappingURL=block-transformations-menu.native.js.map