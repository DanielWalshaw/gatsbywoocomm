import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { useMemo } from '@wordpress/element';
import { cloneBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import { getMatchingBlockByName, getRetainedBlockAttributes } from './utils';
/**
 * Mutate the matched block's attributes by getting
 * which block type's attributes to retain and prioritize
 * them in the merging of the attributes.
 *
 * @param {WPBlock} match The matched block.
 * @param {WPBlock} selectedBlock The selected block.
 * @return {void}
 */

export var transformMatchingBlock = function transformMatchingBlock(match, selectedBlock) {
  // Get the block attributes to retain through the transformation.
  var retainedBlockAttributes = getRetainedBlockAttributes(selectedBlock.name, selectedBlock.attributes);
  match.attributes = _objectSpread(_objectSpread({}, match.attributes), retainedBlockAttributes);
};
/**
 * By providing the selected blocks and pattern's blocks
 * find the matching blocks, transform them and return them.
 * If not all selected blocks are matched, return nothing.
 *
 * @param {WPBlock[]} selectedBlocks The selected blocks.
 * @param {WPBlock[]} patternBlocks The pattern's blocks.
 * @return {WPBlock[]|void} The transformed pattern's blocks or undefined if not all selected blocks have been matched.
 */

export var getPatternTransformedBlocks = function getPatternTransformedBlocks(selectedBlocks, patternBlocks) {
  // Clone Pattern's blocks to produce new clientIds and be able to mutate the matches.
  var _patternBlocks = patternBlocks.map(function (block) {
    return cloneBlock(block);
  });
  /**
   * Keep track of the consumed pattern blocks.
   * This is needed because we loop the selected blocks
   * and for example we may have selected two paragraphs and
   * the pattern's blocks could have more `paragraphs`.
   */


  var consumedBlocks = new Set();

  var _iterator = _createForOfIteratorHelper(selectedBlocks),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var selectedBlock = _step.value;
      var isMatch = false;

      var _iterator2 = _createForOfIteratorHelper(_patternBlocks),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var patternBlock = _step2.value;
          var match = getMatchingBlockByName(patternBlock, selectedBlock.name, consumedBlocks);
          if (!match) continue;
          isMatch = true;
          consumedBlocks.add(match.clientId); // We update (mutate) the matching pattern block.

          transformMatchingBlock(match, selectedBlock); // No need to loop through other pattern's blocks.

          break;
        } // Bail eary if a selected block has not been matched.

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (!isMatch) return;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return _patternBlocks;
};
/**
 * @typedef {WPBlockPattern & {transformedBlocks: WPBlock[]}} TransformedBlockPattern
 */

/**
 * Custom hook that accepts patterns from state and the selected
 * blocks and tries to match these with the pattern's blocks.
 * If all selected blocks are matched with a Pattern's block,
 * we transform them by retaining block's attributes with `role:content`.
 * The transformed pattern's blocks are set to a new pattern
 * property `transformedBlocks`.
 *
 * @param {WPBlockPattern[]} patterns Patterns from state.
 * @param {WPBlock[]} selectedBlocks The currently selected blocks.
 * @return {TransformedBlockPattern[]} Returns the eligible matched patterns with all the selected blocks.
 */
// TODO tests

var useTransformedPatterns = function useTransformedPatterns(patterns, selectedBlocks) {
  return useMemo(function () {
    return patterns.reduce(function (accumulator, _pattern) {
      var transformedBlocks = getPatternTransformedBlocks(selectedBlocks, _pattern.blocks);

      if (transformedBlocks) {
        accumulator.push(_objectSpread(_objectSpread({}, _pattern), {}, {
          transformedBlocks: transformedBlocks
        }));
      }

      return accumulator;
    }, []);
  }, [patterns, selectedBlocks]);
};

export default useTransformedPatterns;
//# sourceMappingURL=use-transformed-patterns.js.map