{"version":3,"sources":["@wordpress/block-editor/src/components/block-switcher/utils.js"],"names":["__experimentalGetBlockAttributesNamesByRole","getBlockAttributesNamesByRole","getMatchingBlockByName","block","selectedBlockName","consumedBlocks","Set","clientId","name","innerBlocks","has","innerBlock","match","getRetainedBlockAttributes","attributes","contentAttributes","length","reduce","_accumulator","attribute"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,SAASA,2CAA2C,IAAIC,6BAAxD,QAA6F,mBAA7F;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CACrCC,KADqC,EAErCC,iBAFqC,EAIjC;AAAA,MADJC,cACI,uEADa,IAAIC,GAAJ,EACb;AAAA,MACIC,QADJ,GACyCJ,KADzC,CACII,QADJ;AAAA,MACcC,IADd,GACyCL,KADzC,CACcK,IADd;AAAA,2BACyCL,KADzC,CACoBM,WADpB;AAAA,MACoBA,WADpB,mCACkC,EADlC,uBAEJ;;AACA,MAAKJ,cAAc,CAACK,GAAf,CAAoBH,QAApB,CAAL,EAAsC;AACtC,MAAKC,IAAI,KAAKJ,iBAAd,EAAkC,OAAOD,KAAP,CAJ9B,CAKJ;;AALI,6CAMsBM,WANtB;AAAA;;AAAA;AAMJ,wDAAwC;AAAA,UAA5BE,UAA4B;AACvC,UAAMC,KAAK,GAAGV,sBAAsB,CACnCS,UADmC,EAEnCP,iBAFmC,EAGnCC,cAHmC,CAApC;AAKA,UAAKO,KAAL,EAAa,OAAOA,KAAP;AACb;AAbG;AAAA;AAAA;AAAA;AAAA;AAcJ,CAlBM;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEL,IAAF,EAAQM,UAAR,EAAwB;AACjE,MAAMC,iBAAiB,GAAGd,6BAA6B,CAAEO,IAAF,EAAQ,SAAR,CAAvD;AACA,MAAK,EAAEO,iBAAF,aAAEA,iBAAF,eAAEA,iBAAiB,CAAEC,MAArB,CAAL,EAAmC,OAAOF,UAAP;AAEnC,SAAOC,iBAAiB,CAACE,MAAlB,CAA0B,UAAEC,YAAF,EAAgBC,SAAhB,EAA+B;AAC/D,QAAKL,UAAU,CAAEK,SAAF,CAAf,EACCD,YAAY,CAAEC,SAAF,CAAZ,GAA4BL,UAAU,CAAEK,SAAF,CAAtC;AACD,WAAOD,YAAP;AACA,GAJM,EAIJ,EAJI,CAAP;AAKA,CATM","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __experimentalGetBlockAttributesNamesByRole as getBlockAttributesNamesByRole } from '@wordpress/blocks';\n\n/**\n * Try to find a matching block by a block's name in a provided\n * block. We recurse through InnerBlocks and return the reference\n * of the matched block (it could be an InnerBlock).\n * If no match is found return nothing.\n *\n * @param {WPBlock} block The block to try to find a match.\n * @param {string} selectedBlockName The block's name to use for matching condition.\n * @param {Set} consumedBlocks A set holding the previously matched/consumed blocks.\n *\n * @return {WPBlock?} The matched block if found or nothing(`undefined`).\n */\nexport const getMatchingBlockByName = (\n\tblock,\n\tselectedBlockName,\n\tconsumedBlocks = new Set()\n) => {\n\tconst { clientId, name, innerBlocks = [] } = block;\n\t// Check if block has been consumed already.\n\tif ( consumedBlocks.has( clientId ) ) return;\n\tif ( name === selectedBlockName ) return block;\n\t// Try to find a matching block from InnerBlocks recursively.\n\tfor ( const innerBlock of innerBlocks ) {\n\t\tconst match = getMatchingBlockByName(\n\t\t\tinnerBlock,\n\t\t\tselectedBlockName,\n\t\t\tconsumedBlocks\n\t\t);\n\t\tif ( match ) return match;\n\t}\n};\n\n/**\n * Find and return the block attributes to retain through\n * the transformation, based on Block Type's `role:content`\n * attributes. If no `role:content` attributes exist,\n * return selected block's attributes.\n *\n * @param {string} name Block type's namespaced name.\n * @param {Object} attributes Selected block's attributes.\n * @return {Object} The block's attributes to retain.\n */\nexport const getRetainedBlockAttributes = ( name, attributes ) => {\n\tconst contentAttributes = getBlockAttributesNamesByRole( name, 'content' );\n\tif ( ! contentAttributes?.length ) return attributes;\n\n\treturn contentAttributes.reduce( ( _accumulator, attribute ) => {\n\t\tif ( attributes[ attribute ] )\n\t\t\t_accumulator[ attribute ] = attributes[ attribute ];\n\t\treturn _accumulator;\n\t}, {} );\n};\n"]}