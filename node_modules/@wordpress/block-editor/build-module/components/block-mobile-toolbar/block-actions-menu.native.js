import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { Platform, findNodeHandle } from 'react-native';
import { partial, first, castArray, last, compact } from 'lodash';
/**
 * WordPress dependencies
 */

import { getClipboard, setClipboard, ToolbarButton, Picker } from '@wordpress/components';
import { getBlockType, getDefaultBlockName, serialize, rawHandler, createBlock, isUnmodifiedDefaultBlock } from '@wordpress/blocks';
import { __, sprintf } from '@wordpress/i18n';
import { withDispatch, withSelect } from '@wordpress/data';
import { withInstanceId, compose } from '@wordpress/compose';
import { moreHorizontalMobile } from '@wordpress/icons';
import { useRef, useState } from '@wordpress/element';
import { store as noticesStore } from '@wordpress/notices';
/**
 * Internal dependencies
 */

import { getMoversSetup } from '../block-mover/mover-description';
import { store as blockEditorStore } from '../../store';
import BlockTransformationsMenu from '../block-switcher/block-transformations-menu';

var BlockActionsMenu = function BlockActionsMenu(_ref) {
  var blockTitle = _ref.blockTitle,
      canInsertBlockType = _ref.canInsertBlockType,
      getBlocksByClientId = _ref.getBlocksByClientId,
      isEmptyDefaultBlock = _ref.isEmptyDefaultBlock,
      isFirst = _ref.isFirst,
      isLast = _ref.isLast,
      rootClientId = _ref.rootClientId,
      selectedBlockClientId = _ref.selectedBlockClientId,
      selectedBlockPossibleTransformations = _ref.selectedBlockPossibleTransformations,
      createSuccessNotice = _ref.createSuccessNotice,
      duplicateBlock = _ref.duplicateBlock,
      onMoveDown = _ref.onMoveDown,
      onMoveUp = _ref.onMoveUp,
      openGeneralSidebar = _ref.openGeneralSidebar,
      pasteBlock = _ref.pasteBlock,
      removeBlocks = _ref.removeBlocks,
      anchorNodeRef = _ref.anchorNodeRef,
      isStackedHorizontally = _ref.isStackedHorizontally,
      onDelete = _ref.onDelete,
      wrapBlockMover = _ref.wrapBlockMover,
      wrapBlockSettings = _ref.wrapBlockSettings;

  var _useState = useState(getClipboard()),
      _useState2 = _slicedToArray(_useState, 2),
      clipboard = _useState2[0],
      setCurrentClipboard = _useState2[1];

  var blockActionsMenuPickerRef = useRef();
  var blockTransformationMenuPickerRef = useRef();
  var moversOptions = {
    keys: ['icon', 'actionTitle']
  };
  var clipboardBlock = clipboard && rawHandler({
    HTML: clipboard
  })[0];
  var isPasteEnabled = clipboardBlock && canInsertBlockType(clipboardBlock.name, rootClientId);

  var _getMoversSetup = getMoversSetup(isStackedHorizontally, moversOptions),
      _getMoversSetup$actio = _getMoversSetup.actionTitle,
      backwardButtonTitle = _getMoversSetup$actio.backward,
      forwardButtonTitle = _getMoversSetup$actio.forward;

  var allOptions = {
    settings: {
      id: 'settingsOption',
      label: __('Block settings'),
      value: 'settingsOption',
      onSelect: openGeneralSidebar
    },
    backwardButton: {
      id: 'backwardButtonOption',
      label: backwardButtonTitle,
      value: 'backwardButtonOption',
      disabled: isFirst,
      onSelect: onMoveUp
    },
    forwardButton: {
      id: 'forwardButtonOption',
      label: forwardButtonTitle,
      value: 'forwardButtonOption',
      disabled: isLast,
      onSelect: onMoveDown
    },
    delete: {
      id: 'deleteOption',
      label: __('Remove block'),
      value: 'deleteOption',
      separated: true,
      disabled: isEmptyDefaultBlock,
      onSelect: function onSelect() {
        onDelete();
        createSuccessNotice( // translators: displayed right after the block is removed.
        __('Block removed'));
      }
    },
    transformButton: {
      id: 'transformButtonOption',
      label: __('Transform blockâ€¦'),
      value: 'transformButtonOption',
      onSelect: function onSelect() {
        if (blockTransformationMenuPickerRef.current) {
          blockTransformationMenuPickerRef.current.presentPicker();
        }
      }
    },
    copyButton: {
      id: 'copyButtonOption',
      label: __('Copy block'),
      value: 'copyButtonOption',
      onSelect: function onSelect() {
        var serializedBlock = serialize(getBlocksByClientId(selectedBlockClientId));
        setCurrentClipboard(serializedBlock);
        setClipboard(serializedBlock);
        createSuccessNotice( // translators: displayed right after the block is copied.
        __('Block copied'));
      }
    },
    cutButton: {
      id: 'cutButtonOption',
      label: __('Cut block'),
      value: 'cutButtonOption',
      onSelect: function onSelect() {
        setClipboard(serialize(getBlocksByClientId(selectedBlockClientId)));
        removeBlocks(selectedBlockClientId);
        createSuccessNotice( // translators: displayed right after the block is cut.
        __('Block cut'));
      }
    },
    pasteButton: {
      id: 'pasteButtonOption',
      label: __('Paste block after'),
      value: 'pasteButtonOption',
      onSelect: function onSelect() {
        onPasteBlock();
        createSuccessNotice( // translators: displayed right after the block is pasted.
        __('Block pasted'));
      }
    },
    duplicateButton: {
      id: 'duplicateButtonOption',
      label: __('Duplicate block'),
      value: 'duplicateButtonOption',
      onSelect: function onSelect() {
        duplicateBlock();
        createSuccessNotice( // translators: displayed right after the block is duplicated.
        __('Block duplicated'));
      }
    }
  };
  var options = compact([wrapBlockMover && allOptions.backwardButton, wrapBlockMover && allOptions.forwardButton, wrapBlockSettings && allOptions.settings, selectedBlockPossibleTransformations.length && allOptions.transformButton, allOptions.copyButton, allOptions.cutButton, isPasteEnabled && allOptions.pasteButton, allOptions.duplicateButton, allOptions.delete]);

  function onPasteBlock() {
    if (!clipboard) {
      return;
    }

    pasteBlock(rawHandler({
      HTML: clipboard
    })[0]);
  }

  function onPickerSelect(value) {
    var selectedItem = options.find(function (item) {
      return item.value === value;
    });
    selectedItem.onSelect();
  }

  function onPickerPresent() {
    if (blockActionsMenuPickerRef.current) {
      blockActionsMenuPickerRef.current.presentPicker();
    }
  }

  var disabledButtonIndices = options.map(function (option, index) {
    return option.disabled && index + 1;
  }).filter(Boolean);
  var accessibilityHint = Platform.OS === 'ios' ? __('Double tap to open Action Sheet with available options') : __('Double tap to open Bottom Sheet with available options');

  var getAnchor = function getAnchor() {
    return anchorNodeRef ? findNodeHandle(anchorNodeRef) : undefined;
  };

  return createElement(Fragment, null, createElement(ToolbarButton, {
    title: __('Open Block Actions Menu'),
    onClick: onPickerPresent,
    icon: moreHorizontalMobile,
    extraProps: {
      hint: accessibilityHint
    }
  }), createElement(Picker, {
    ref: blockActionsMenuPickerRef,
    options: options,
    onChange: onPickerSelect,
    destructiveButtonIndex: options.length,
    disabledButtonIndices: disabledButtonIndices,
    hideCancelButton: Platform.OS !== 'ios',
    leftAlign: true,
    getAnchor: getAnchor // translators: %s: block title e.g: "Paragraph".
    ,
    title: sprintf(__('%s block options'), blockTitle)
  }), createElement(BlockTransformationsMenu, {
    anchorNodeRef: anchorNodeRef,
    blockTitle: blockTitle,
    pickerRef: blockTransformationMenuPickerRef,
    possibleTransformations: selectedBlockPossibleTransformations,
    selectedBlock: getBlocksByClientId(selectedBlockClientId),
    selectedBlockClientId: selectedBlockClientId
  }));
};

export default compose(withSelect(function (select, _ref2) {
  var clientIds = _ref2.clientIds;

  var _select = select(blockEditorStore),
      getBlockIndex = _select.getBlockIndex,
      getBlockRootClientId = _select.getBlockRootClientId,
      getBlockOrder = _select.getBlockOrder,
      getBlockName = _select.getBlockName,
      getBlockTransformItems = _select.getBlockTransformItems,
      getBlock = _select.getBlock,
      getBlocksByClientId = _select.getBlocksByClientId,
      getSelectedBlockClientIds = _select.getSelectedBlockClientIds,
      canInsertBlockType = _select.canInsertBlockType;

  var normalizedClientIds = castArray(clientIds);
  var block = getBlock(normalizedClientIds);
  var blockName = getBlockName(normalizedClientIds);
  var blockType = getBlockType(blockName);
  var blockTitle = blockType === null || blockType === void 0 ? void 0 : blockType.title;
  var firstClientId = first(normalizedClientIds);
  var rootClientId = getBlockRootClientId(firstClientId);
  var blockOrder = getBlockOrder(rootClientId);
  var firstIndex = getBlockIndex(firstClientId, rootClientId);
  var lastIndex = getBlockIndex(last(normalizedClientIds), rootClientId);
  var isDefaultBlock = blockName === getDefaultBlockName();
  var isEmptyContent = (block === null || block === void 0 ? void 0 : block.attributes.content) === '';
  var isExactlyOneBlock = blockOrder.length === 1;
  var isEmptyDefaultBlock = isExactlyOneBlock && isDefaultBlock && isEmptyContent;
  var selectedBlockClientId = first(getSelectedBlockClientIds());
  var selectedBlock = selectedBlockClientId ? first(getBlocksByClientId(selectedBlockClientId)) : undefined;
  var selectedBlockPossibleTransformations = selectedBlock ? getBlockTransformItems([selectedBlock], rootClientId) : [];
  return {
    blockTitle: blockTitle,
    canInsertBlockType: canInsertBlockType,
    currentIndex: firstIndex,
    getBlocksByClientId: getBlocksByClientId,
    isEmptyDefaultBlock: isEmptyDefaultBlock,
    isFirst: firstIndex === 0,
    isLast: lastIndex === blockOrder.length - 1,
    rootClientId: rootClientId,
    selectedBlockClientId: selectedBlockClientId,
    selectedBlockPossibleTransformations: selectedBlockPossibleTransformations
  };
}), withDispatch(function (dispatch, _ref3, _ref4) {
  var clientIds = _ref3.clientIds,
      rootClientId = _ref3.rootClientId,
      currentIndex = _ref3.currentIndex;
  var select = _ref4.select;

  var _dispatch = dispatch(blockEditorStore),
      moveBlocksDown = _dispatch.moveBlocksDown,
      moveBlocksUp = _dispatch.moveBlocksUp,
      duplicateBlocks = _dispatch.duplicateBlocks,
      removeBlocks = _dispatch.removeBlocks,
      insertBlock = _dispatch.insertBlock,
      replaceBlocks = _dispatch.replaceBlocks;

  var _dispatch2 = dispatch('core/edit-post'),
      _openGeneralSidebar = _dispatch2.openGeneralSidebar;

  var _select2 = select(blockEditorStore),
      getBlockSelectionEnd = _select2.getBlockSelectionEnd,
      getBlock = _select2.getBlock;

  var _dispatch3 = dispatch(noticesStore),
      createSuccessNotice = _dispatch3.createSuccessNotice;

  return {
    createSuccessNotice: createSuccessNotice,
    duplicateBlock: function duplicateBlock() {
      return duplicateBlocks(clientIds);
    },
    onMoveDown: partial(moveBlocksDown, clientIds, rootClientId),
    onMoveUp: partial(moveBlocksUp, clientIds, rootClientId),
    openGeneralSidebar: function openGeneralSidebar() {
      return _openGeneralSidebar('edit-post/block');
    },
    pasteBlock: function pasteBlock(clipboardBlock) {
      var canReplaceBlock = isUnmodifiedDefaultBlock(getBlock(getBlockSelectionEnd()));

      if (!canReplaceBlock) {
        var insertedBlock = createBlock(clipboardBlock.name, clipboardBlock.attributes, clipboardBlock.innerBlocks);
        insertBlock(insertedBlock, currentIndex + 1, rootClientId);
      } else {
        replaceBlocks(clientIds, clipboardBlock);
      }
    },
    removeBlocks: removeBlocks
  };
}), withInstanceId)(BlockActionsMenu);
//# sourceMappingURL=block-actions-menu.native.js.map